var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import * as React from 'react';
import scrollParent from 'scrollparent';
import './types';
import _getViewportBounds from './utils/getViewportBounds';
import _getElementBounds from './utils/getElementBounds';
import convertOffsetToBounds from './utils/convertOffsetToBounds';
import isElementInViewport from './utils/isElementInViewport';
import eventListenerOptions from './utils/eventListenerOptions';

var LazilyRender = function (_React$Component) {
  _inherits(LazilyRender, _React$Component);

  function LazilyRender() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, LazilyRender);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = LazilyRender.__proto__ || Object.getPrototypeOf(LazilyRender)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      hasBeenScrolledIntoView: false
    }, _this.update = function () {
      cancelAnimationFrame(_this.raf);
      _this.raf = requestAnimationFrame(function () {

        var elementBounds = _this.getElementBounds();
        var viewportBounds = _this.getViewportBounds();
        var offsetBounds = _this.getOffsetBounds();

        if (!elementBounds || !viewportBounds) {
          return;
        }

        if (isElementInViewport(elementBounds, viewportBounds, offsetBounds)) {
          _this.stopListening();
          _this.setState({
            hasBeenScrolledIntoView: true
          }, function () {
            var onRender = _this.props.onRender;

            if (onRender) {
              onRender();
            }
          });
        }
      });
    }, _this.handleMount = function (element) {
      _this.element = element;
      if (_this.element) {
        _this.container = _this.getContainer();
      } else {
        _this.container = undefined;
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(LazilyRender, [{
    key: 'getContainer',
    value: function getContainer() {
      var container = scrollParent(this.element);
      if (container === document.scrollingElement || container === document.documentElement) {
        return window;
      } else {
        return container;
      }
    }
  }, {
    key: 'getViewportBounds',
    value: function getViewportBounds() {
      return _getViewportBounds(this.container);
    }
  }, {
    key: 'getElementBounds',
    value: function getElementBounds() {
      return _getElementBounds(this.element);
    }
  }, {
    key: 'getOffsetBounds',
    value: function getOffsetBounds() {
      var offset = this.props.offset;

      return convertOffsetToBounds(offset);
    }
  }, {
    key: 'startListening',
    value: function startListening() {
      var container = this.container;
      if (container) container.addEventListener('scroll', this.update, eventListenerOptions);
      window.addEventListener('resize', this.update);
    }
  }, {
    key: 'stopListening',
    value: function stopListening() {
      var container = this.container;
      if (container) container.removeEventListener('scroll', this.update, eventListenerOptions);
      window.removeEventListener('resize', this.update);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.update();
      this.startListening();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.stopListening();
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren() {
      var _props = this.props,
          placeholder = _props.placeholder,
          content = _props.content,
          children = _props.children;
      var hasBeenScrolledIntoView = this.state.hasBeenScrolledIntoView;


      if (!hasBeenScrolledIntoView && placeholder) {
        return placeholder;
      }

      if (hasBeenScrolledIntoView && content) {
        return content;
      }

      if (children) {
        return children(hasBeenScrolledIntoView);
      }

      return null;
    }
  }, {
    key: 'render',
    value: function render() {
      var className = this.props.className;

      return React.createElement(
        'div',
        { ref: this.handleMount, className: className },
        this.renderChildren()
      );
    }
  }]);

  return LazilyRender;
}(React.Component);

export default LazilyRender;