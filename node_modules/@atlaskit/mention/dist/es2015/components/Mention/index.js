import * as tslib_1 from "tslib";
import * as React from 'react';
import { MentionStyle, MentionContainer } from './styles';
import Tooltip from '@atlaskit/tooltip';
import { isRestricted, MentionType, isSpecialMentionText, } from '../../types';
import { withAnalytics } from '@atlaskit/analytics';
var MENTION_ANALYTICS_PREFIX = 'atlassian.fabric.mention';
var ANALYTICS_HOVER_DELAY = 1000;
var MentionInternal = /** @class */ (function (_super) {
    tslib_1.__extends(MentionInternal, _super);
    function MentionInternal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.startTime = 0;
        _this.handleOnClick = function (e) {
            var _a = _this.props, id = _a.id, text = _a.text, onClick = _a.onClick;
            if (onClick) {
                onClick(id, text, e);
            }
            _this.fireAnalytics('lozenge.select');
        };
        _this.handleOnMouseEnter = function (e) {
            var _a = _this.props, id = _a.id, text = _a.text, onMouseEnter = _a.onMouseEnter;
            _this.startTime = Date.now();
            if (onMouseEnter) {
                onMouseEnter(id, text, e);
            }
        };
        _this.handleOnMouseLeave = function (e) {
            var _a = _this.props, id = _a.id, text = _a.text, onMouseLeave = _a.onMouseLeave;
            if (onMouseLeave) {
                onMouseLeave(id, text, e);
            }
            var duration = Date.now() - _this.startTime;
            if (duration > ANALYTICS_HOVER_DELAY) {
                _this.fireAnalytics('lozenge.hover');
            }
            _this.startTime = 0;
        };
        _this.fireAnalytics = function (eventName) {
            var _a = _this.props, accessLevel = _a.accessLevel, text = _a.text, firePrivateAnalyticsEvent = _a.firePrivateAnalyticsEvent;
            if (firePrivateAnalyticsEvent) {
                firePrivateAnalyticsEvent(MENTION_ANALYTICS_PREFIX + "." + eventName, {
                    accessLevel: accessLevel,
                    isSpecial: isSpecialMentionText(text),
                });
            }
        };
        _this.getMentionType = function () {
            var _a = _this.props, accessLevel = _a.accessLevel, isHighlighted = _a.isHighlighted;
            if (isHighlighted) {
                return MentionType.SELF;
            }
            if (isRestricted(accessLevel)) {
                return MentionType.RESTRICTED;
            }
            return MentionType.DEFAULT;
        };
        return _this;
    }
    MentionInternal.prototype.render = function () {
        var _a = this, handleOnClick = _a.handleOnClick, handleOnMouseEnter = _a.handleOnMouseEnter, handleOnMouseLeave = _a.handleOnMouseLeave, props = _a.props;
        var text = props.text, id = props.id, accessLevel = props.accessLevel;
        var mentionType = this.getMentionType();
        var mentionComponent = (React.createElement(MentionStyle, { mentionType: mentionType, onClick: handleOnClick, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave }, text));
        return (React.createElement(MentionContainer, { "data-mention-id": id, "data-access-level": accessLevel, spellCheck: false }, mentionType === MentionType.RESTRICTED ? (React.createElement(Tooltip, { content: props.text + " won't be notified as they have no access", position: "right" }, mentionComponent)) : (mentionComponent)));
    };
    return MentionInternal;
}(React.PureComponent));
export { MentionInternal };
// tslint:disable-next-line:variable-name
var Mention = withAnalytics(MentionInternal, {}, {});
export default Mention;
//# sourceMappingURL=index.js.map