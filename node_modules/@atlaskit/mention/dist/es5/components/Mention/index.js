"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var styles_1 = require("./styles");
var tooltip_1 = require("@atlaskit/tooltip");
var types_1 = require("../../types");
var analytics_1 = require("@atlaskit/analytics");
var package_json_1 = require("../../../package.json");
var analytics_next_1 = require("@atlaskit/analytics-next");
var constants_1 = require("../../constants");
var MENTION_ANALYTICS_PREFIX = 'atlassian.fabric.mention';
exports.ANALYTICS_HOVER_DELAY = 1000;
var mentionPayload = function (actionSubject, action, _a) {
    var accessLevel = _a.accessLevel, text = _a.text;
    return ({
        action: action,
        actionSubject: actionSubject,
        eventType: 'ui',
        attributes: {
            packageName: package_json_1.name,
            packageVersion: package_json_1.version,
            componentName: 'mention',
            accessLevel: accessLevel,
            isSpecial: types_1.isSpecialMentionText(text),
        },
        source: 'unknown',
    });
};
var fireAnalytics = function (eventName, props) {
    var accessLevel = props.accessLevel, text = props.text, firePrivateAnalyticsEvent = props.firePrivateAnalyticsEvent;
    if (firePrivateAnalyticsEvent) {
        firePrivateAnalyticsEvent(MENTION_ANALYTICS_PREFIX + "." + eventName, {
            accessLevel: accessLevel,
            isSpecial: types_1.isSpecialMentionText(text),
        });
    }
};
var MentionInternal = /** @class */ (function (_super) {
    tslib_1.__extends(MentionInternal, _super);
    function MentionInternal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleOnClick = function (e) {
            var _a = _this.props, id = _a.id, text = _a.text, onClick = _a.onClick;
            if (onClick) {
                onClick(id, text, e);
            }
        };
        _this.handleOnMouseEnter = function (e) {
            var _a = _this.props, id = _a.id, text = _a.text, onMouseEnter = _a.onMouseEnter, onHover = _a.onHover;
            if (onMouseEnter) {
                onMouseEnter(id, text, e);
            }
            _this.hoverTimeout = setTimeout(function () {
                if (onHover) {
                    onHover();
                }
                _this.hoverTimeout = undefined;
            }, exports.ANALYTICS_HOVER_DELAY);
        };
        _this.handleOnMouseLeave = function (e) {
            var _a = _this.props, id = _a.id, text = _a.text, onMouseLeave = _a.onMouseLeave;
            if (onMouseLeave) {
                onMouseLeave(id, text, e);
            }
            if (_this.hoverTimeout) {
                clearTimeout(_this.hoverTimeout);
            }
        };
        _this.getMentionType = function () {
            var _a = _this.props, accessLevel = _a.accessLevel, isHighlighted = _a.isHighlighted;
            if (isHighlighted) {
                return types_1.MentionType.SELF;
            }
            if (types_1.isRestricted(accessLevel)) {
                return types_1.MentionType.RESTRICTED;
            }
            return types_1.MentionType.DEFAULT;
        };
        return _this;
    }
    MentionInternal.prototype.componentWillUnmount = function () {
        if (this.hoverTimeout) {
            clearTimeout(this.hoverTimeout);
        }
    };
    MentionInternal.prototype.render = function () {
        var _a = this, handleOnClick = _a.handleOnClick, handleOnMouseEnter = _a.handleOnMouseEnter, handleOnMouseLeave = _a.handleOnMouseLeave, props = _a.props;
        var text = props.text, id = props.id, accessLevel = props.accessLevel;
        var mentionType = this.getMentionType();
        var mentionComponent = (React.createElement(styles_1.MentionStyle, { mentionType: mentionType, onClick: handleOnClick, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave }, text));
        return (React.createElement(styles_1.MentionContainer, { "data-mention-id": id, "data-access-level": accessLevel, spellCheck: false }, mentionType === types_1.MentionType.RESTRICTED ? (React.createElement(tooltip_1.default, { content: props.text + " won't be notified as they have no access", position: "right" }, mentionComponent)) : (mentionComponent)));
    };
    return MentionInternal;
}(React.PureComponent));
exports.MentionInternal = MentionInternal;
// tslint:disable-next-line:variable-name
var MentionWithAnalytics = analytics_next_1.withAnalyticsEvents({
    onClick: function (createEvent, props) {
        createEvent(mentionPayload('mention', 'selected', props)).fire(constants_1.ELEMENTS_CHANNEL);
        // old analytics
        fireAnalytics('lozenge.select', props);
    },
    onHover: function (createEvent, props) {
        createEvent(mentionPayload('mention', 'hovered', props)).fire(constants_1.ELEMENTS_CHANNEL);
        // old analytics
        fireAnalytics('lozenge.hover', props);
    },
})(MentionInternal);
var Mention = analytics_1.withAnalytics(MentionWithAnalytics, {}, {});
exports.default = Mention;
//# sourceMappingURL=index.js.map