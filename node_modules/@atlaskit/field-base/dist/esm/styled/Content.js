import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['\n    border-width: ', 'px;\n    padding: ', ';\n  '], ['\n    border-width: ', 'px;\n    padding: ', ';\n  ']),
    _templateObject2 = _taggedTemplateLiteral(['\n    color: ', ';\n    pointer-events: none;\n  '], ['\n    color: ', ';\n    pointer-events: none;\n  ']),
    _templateObject3 = _taggedTemplateLiteral(['\n    &:hover {\n      background-color: ', ';\n      border-color: ', ';\n    }\n  '], ['\n    &:hover {\n      background-color: ', ';\n      border-color: ', ';\n    }\n  ']),
    _templateObject4 = _taggedTemplateLiteral(['\n    min-height: ', 'px;\n  '], ['\n    min-height: ', 'px;\n  ']),
    _templateObject5 = _taggedTemplateLiteral(['\n  display: flex;\n  flex-direction: column;\n  flex: 1 0 auto;\n  max-width: 100%;\n  ', ';\n'], ['\n  display: flex;\n  flex-direction: column;\n  flex: 1 0 auto;\n  max-width: 100%;\n  ', ';\n']),
    _templateObject6 = _taggedTemplateLiteral(['\n  align-items: center;\n  background-color: ', ';\n  border-color: ', ';\n  border-radius: ', ';\n  border-style: ', ';\n  box-sizing: border-box;\n  color: ', ';\n  display: flex;\n  flex: 1 0 auto;\n  font-size: ', 'px;\n  justify-content: space-between;\n  line-height: ', ';\n  max-width: 100%;\n  overflow: hidden;\n  transition: background-color ', ' ease-in-out,\n    border-color ', ' ease-in-out;\n  word-wrap: break-word;\n  ', ' ', ' ', ';\n'], ['\n  align-items: center;\n  background-color: ', ';\n  border-color: ', ';\n  border-radius: ', ';\n  border-style: ', ';\n  box-sizing: border-box;\n  color: ', ';\n  display: flex;\n  flex: 1 0 auto;\n  font-size: ', 'px;\n  justify-content: space-between;\n  line-height: ', ';\n  max-width: 100%;\n  overflow: hidden;\n  transition: background-color ', ' ease-in-out,\n    border-color ', ' ease-in-out;\n  word-wrap: break-word;\n  ', ' ', ' ', ';\n']),
    _templateObject7 = _taggedTemplateLiteral(['\n  ', ' ', ' ', ' max-width: ', ';\n'], ['\n  ', ' ', ' ', ' max-width: ', ';\n']),
    _templateObject8 = _taggedTemplateLiteral(['\n            flex: 0 0 ', ';\n          '], ['\n            flex: 0 0 ', ';\n          ']);

import styled, { css } from 'styled-components';
import { gridSize, fontSize, colors, themed } from '@atlaskit/theme';
import { getBackgroundColor, getBackgroundColorFocus, getBackgroundColorHover, getBorderColor, getBorderColorFocus, getBorderColorHover } from './theme';

var borderRadius = '5px';
var borderWidth = 1;
var borderWidthFocused = 2;
// subtle border needs to match the focused thickness to avoid jank when transitioning on focus
var borderWidthSubtle = borderWidthFocused;
var spacing = gridSize();
var lineHeightBase = spacing * 2.5;
var lineHeightCompact = spacing * 2;
var heightBase = spacing * 5;
var heightCompact = spacing * 4;
var horizontalPadding = spacing;
var innerHeight = spacing * 3;
var transitionDuration = '0.2s';

var getBorderAndPadding = function getBorderAndPadding(_ref) {
  var paddingDisabled = _ref.paddingDisabled,
      invalid = _ref.invalid,
      isFocused = _ref.isFocused,
      compact = _ref.compact,
      subtle = _ref.subtle,
      none = _ref.none;

  var border = void 0;
  var height = compact ? heightCompact : heightBase;

  if (invalid || isFocused || none) border = borderWidthFocused;else if (subtle) border = borderWidthSubtle;else border = borderWidth;

  var padding = paddingDisabled ? borderWidthFocused - border + 'px' : (height - 2 * border - innerHeight) / 2 + 'px ' + (horizontalPadding - border) + 'px';

  return css(_templateObject, border, padding);
};

var getLineHeight = function getLineHeight(props) {
  var currentLineHeight = props.compact ? lineHeightCompact : lineHeightBase;

  return currentLineHeight / fontSize();
};

var getDisabledColor = themed({ light: colors.N60, dark: colors.DN90 });

var getDisabledState = function getDisabledState(props) {
  return props.disabled && css(_templateObject2, getDisabledColor(props));
};

var getHoverState = function getHoverState(props) {
  if (props.readOnly || props.isFocused || props.none) return null;

  return css(_templateObject3, getBackgroundColorHover(props), getBorderColorHover(props));
};

var getBorderStyle = function getBorderStyle(props) {
  return props.appearance === 'none' ? 'none' : 'solid';
};

var getMinHeight = function getMinHeight(_ref2) {
  var compact = _ref2.compact;

  var minHeight = compact ? heightCompact : heightBase;
  return css(_templateObject4, minHeight);
};

// need an element wrapping the children because IE11 doesn't apply min-height correctly
// to flex-elements. See https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items
export var ChildWrapper = styled.div(_templateObject5, function (p) {
  return getMinHeight(p);
});

var getColor = themed({ light: colors.N900, dark: colors.DN600 });

export var Content = styled.div(_templateObject6, function (props) {
  return props.isFocused ? getBackgroundColorFocus(props) : getBackgroundColor(props);
}, function (props) {
  return props.isFocused ? getBorderColorFocus(props) : getBorderColor(props);
}, borderRadius, getBorderStyle, getColor, fontSize, getLineHeight, transitionDuration, transitionDuration, getBorderAndPadding, getHoverState, getDisabledState);

var getMaxWidth = function getMaxWidth(maxWidth) {
  return maxWidth ? maxWidth + 'px' : '100%';
};

/* IE11 does not respect max-width when using flex-grow + nested flex content, similar to https://github.com/philipwalton/flexbugs#flexbug-11
 * and https://github.com/philipwalton/flexbugs#flexbug-17.
 * This can be fixed by setting the basis to 100%, allowing shrinking and setting the min-width to the original flex-basis value
 * (or 0 if it was auto).
 * Alternatively since we're just setting the contents to fit parent container when grow is set to true, we can just change flex-basis
 * to 100% and not worry about shrinking or growing.
 * See AK-4285.
 */
export var ContentWrapper = styled.div(_templateObject7, function (props) {
  return props.disabled && '\n      cursor: not-allowed;\n    ';
}, function (props) {
  return props.grow ? css(_templateObject8, getMaxWidth(props.maxWidth)) : '\n          flex: 0 0 auto;\n        ';
}, function (props) {
  return props.grow ? '\n          display: block;\n        ' : '\n          display: inline-block;\n          vertical-align: top;\n        ';
}, function (props) {
  return getMaxWidth(props.maxWidth);
});