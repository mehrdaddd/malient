import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import InlineDialog from '@atlaskit/inline-dialog';
import { Content, ContentWrapper, ChildWrapper } from '../styled/Content';
import ValidationElement from './ValidationElement';

var FieldBaseStateless = function (_Component) {
  _inherits(FieldBaseStateless, _Component);

  function FieldBaseStateless() {
    _classCallCheck(this, FieldBaseStateless);

    return _possibleConstructorReturn(this, (FieldBaseStateless.__proto__ || _Object$getPrototypeOf(FieldBaseStateless)).apply(this, arguments));
  }

  _createClass(FieldBaseStateless, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.props.shouldReset) {
        this.props.onBlur();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          appearance = _props.appearance,
          children = _props.children,
          invalidMessage = _props.invalidMessage,
          isCompact = _props.isCompact,
          isDialogOpen = _props.isDialogOpen,
          isDisabled = _props.isDisabled,
          isFitContainerWidthEnabled = _props.isFitContainerWidthEnabled,
          isFocused = _props.isFocused,
          isInvalid = _props.isInvalid,
          isLoading = _props.isLoading,
          isPaddingDisabled = _props.isPaddingDisabled,
          isReadOnly = _props.isReadOnly,
          maxWidth = _props.maxWidth,
          onBlur = _props.onBlur,
          onDialogBlur = _props.onDialogBlur,
          onDialogClick = _props.onDialogClick,
          onDialogFocus = _props.onDialogFocus,
          onFocus = _props.onFocus,
          isValidationHidden = _props.isValidationHidden;


      function getAppearance(a) {
        if (isDisabled) return 'disabled';
        if (isInvalid) return 'invalid';

        return a;
      }

      return React.createElement(
        ContentWrapper,
        {
          disabled: isDisabled,
          maxWidth: maxWidth,
          grow: isFitContainerWidthEnabled
        },
        React.createElement(
          InlineDialog,
          {
            content: invalidMessage,
            isOpen: isDialogOpen && !!invalidMessage && !isValidationHidden,
            onContentBlur: onDialogBlur,
            onContentClick: onDialogClick,
            onContentFocus: onDialogFocus,
            position: 'right middle',
            shouldFlip: ['top']
          },
          React.createElement(
            ChildWrapper,
            { compact: isCompact },
            React.createElement(
              Content,
              {
                appearance: getAppearance(appearance),
                compact: isCompact,
                disabled: isDisabled,
                isFocused: isFocused,
                invalid: isInvalid && !isFocused,
                none: appearance === 'none',
                onBlurCapture: onBlur,
                onFocusCapture: onFocus,
                paddingDisabled: isPaddingDisabled,
                readOnly: isReadOnly,
                subtle: appearance === 'subtle'
              },
              children,
              !isValidationHidden ? React.createElement(ValidationElement, {
                isDisabled: isDisabled,
                isInvalid: isInvalid,
                isLoading: isLoading
              }) : null
            )
          )
        )
      );
    }
  }]);

  return FieldBaseStateless;
}(Component);

FieldBaseStateless.defaultProps = {
  appearance: 'standard',
  invalidMessage: '',
  isCompact: false,
  isDialogOpen: false,
  isDisabled: false,
  isFitContainerWidthEnabled: false,
  isFocused: false,
  isInvalid: false,
  isLoading: false,
  isPaddingDisabled: false,
  isReadOnly: false,
  onDialogBlur: function onDialogBlur() {},
  onDialogClick: function onDialogClick() {},
  onDialogFocus: function onDialogFocus() {},
  shouldReset: false,
  isValidationHidden: false
};
export default FieldBaseStateless;