import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { createElement, Component } from 'react';
import ErrorIcon from '@atlaskit/icon/glyph/error';
import WarningIcon from '@atlaskit/icon/glyph/warning';

import { Header, Title, TitleText, TitleIconWrapper as IconWrapper } from '../styled/Content';

var icon = { danger: ErrorIcon, warning: WarningIcon };
var TitleIcon = function TitleIcon(_ref) {
  var appearance = _ref.appearance;

  if (!appearance) return null;

  var Icon = icon[appearance];

  return React.createElement(
    IconWrapper,
    { appearance: appearance },
    React.createElement(Icon, { label: appearance + ' icon' })
  );
};

var ModalHeader = function (_Component) {
  _inherits(ModalHeader, _Component);

  function ModalHeader() {
    _classCallCheck(this, ModalHeader);

    return _possibleConstructorReturn(this, (ModalHeader.__proto__ || _Object$getPrototypeOf(ModalHeader)).apply(this, arguments));
  }

  _createClass(ModalHeader, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          appearance = _props.appearance,
          component = _props.component,
          heading = _props.heading,
          onClose = _props.onClose,
          showKeyline = _props.showKeyline,
          isHeadingMultiline = _props.isHeadingMultiline;

      var warning = 'You can provide `component` OR `heading`, not both.';

      if (!component && !heading) return null;
      if (component && heading) return console.warn(warning); // eslint-disable-line no-console
      if (component) {
        return createElement(component, {
          appearance: appearance,
          onClose: onClose,
          showKeyline: showKeyline,
          isHeadingMultiline: isHeadingMultiline
        });
      }

      return React.createElement(
        Header,
        { showKeyline: showKeyline },
        React.createElement(
          Title,
          { isHeadingMultiline: isHeadingMultiline },
          React.createElement(TitleIcon, { appearance: appearance }),
          React.createElement(
            TitleText,
            { isHeadingMultiline: isHeadingMultiline },
            heading
          )
        )
      );
    } // eslint-disable-line react/sort-comp

  }]);

  return ModalHeader;
}(Component);

ModalHeader.defaultProps = {
  isHeadingMultiline: true
};
export default ModalHeader;