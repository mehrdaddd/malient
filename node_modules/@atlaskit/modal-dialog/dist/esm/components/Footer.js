import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { createElement, Component } from 'react';
import Button from '@atlaskit/button';

import { Actions, ActionItem, Footer } from '../styled/Content';

var JustifyShim = function JustifyShim(props) {
  return React.createElement('span', props);
};

var ModalFooter = function (_Component) {
  _inherits(ModalFooter, _Component);

  function ModalFooter() {
    _classCallCheck(this, ModalFooter);

    return _possibleConstructorReturn(this, (ModalFooter.__proto__ || _Object$getPrototypeOf(ModalFooter)).apply(this, arguments));
  }

  _createClass(ModalFooter, [{
    key: 'render',
    // eslint-disable-line react/sort-comp

    value: function render() {
      var _props = this.props,
          actions = _props.actions,
          appearance = _props.appearance,
          component = _props.component,
          onClose = _props.onClose,
          showKeyline = _props.showKeyline;

      var warning = 'You can provide `component` OR `actions`, not both.';

      if (!component && !actions) return null;
      if (component && actions) return console.warn(warning); // eslint-disable-line no-console
      if (component) {
        return createElement(component, {
          appearance: appearance,
          onClose: onClose,
          showKeyline: showKeyline
        });
      }

      return React.createElement(
        Footer,
        { showKeyline: showKeyline },
        React.createElement(JustifyShim, null),
        React.createElement(
          Actions,
          null,
          actions ? actions.map(function (_ref, idx) {
            var text = _ref.text,
                rest = _objectWithoutProperties(_ref, ['text']);

            var variant = idx ? 'subtle' : appearance || 'primary';
            return React.createElement(
              ActionItem,
              { key: text || idx },
              React.createElement(
                Button,
                _extends({ appearance: variant, autoFocus: !idx }, rest),
                text
              )
            );
          }) : null
        )
      );
    }
  }]);

  return ModalFooter;
}(Component);

export default ModalFooter;