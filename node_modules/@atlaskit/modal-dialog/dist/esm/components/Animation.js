import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import React from 'react';
import { Transition } from 'react-transition-group';

import { gutter } from '../shared-variables';

var duration = 500;
var easing = 'cubic-bezier(0.23, 1, 0.32, 1)'; // easeOutQuint
var verticalOffset = 16;

var DefaultProps = {
  component: 'div'
};

// BASE
// ==============================

/**
  To achieve a "lazy mount" and clean up our component after unmounting,
  the following props must be set to true:
  - appear
  - mountOnEnter
  - unmountOnExit

  Read more https://reactcommunity.org/react-transition-group/#Transition-prop-mountOnEnter
*/
function Animation(_ref) {
  var Tag = _ref.component,
      transitionIn = _ref.in,
      onEnter = _ref.onEnter,
      onEntering = _ref.onEntering,
      onEntered = _ref.onEntered,
      onExit = _ref.onExit,
      onExiting = _ref.onExiting,
      onExited = _ref.onExited,
      style = _ref.style,
      styleDefault = _ref.styleDefault,
      customTransition = _ref.customTransition,
      transition = _ref.transition,
      props = _objectWithoutProperties(_ref, ['component', 'in', 'onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited', 'style', 'styleDefault', 'customTransition', 'transition']);

  return React.createElement(
    Transition,
    {
      appear: true,
      'in': transitionIn,
      mountOnEnter: true,
      onEnter: onEnter,
      onEntering: onEntering,
      onEntered: onEntered,
      onExit: onExit,
      onExiting: onExiting,
      onExited: onExited,
      timeout: duration,
      unmountOnExit: true
    },
    function (status) {
      if (status === 'exited') return null;

      var styles = _extends({}, style, styleDefault, transition[status], transition[customTransition]);

      return React.createElement(Tag, _extends({ style: styles }, props));
    }
  );
}
Animation.defaultProps = DefaultProps;

// FADE
// ==============================
export var Fade = function Fade(props) {
  return React.createElement(Animation, _extends({
    styleDefault: {
      transition: 'opacity ' + duration / 2 + 'ms'
    },
    transition: {
      entering: { opacity: 0 },
      entered: { opacity: 1 },
      exiting: { opacity: 0 }
    }
  }, props));
};

// SLIDE UP
// ==============================
var SlideUp = function SlideUp(_ref2) {
  var stackIndex = _ref2.stackIndex,
      transitionIn = _ref2.in,
      style = _ref2.style,
      component = _ref2.component,
      props = _objectWithoutProperties(_ref2, ['stackIndex', 'in', 'style', 'component']);

  var translateY = stackIndex * (verticalOffset / 2);
  var restingTransform = 'translate3d(0, ' + translateY + 'px, 0)';

  return React.createElement(Animation, _extends({
    component: component,
    'in': transitionIn,
    style: style,
    styleDefault: {
      transition: 'transform ' + duration + 'ms ' + easing,
      transform: restingTransform
    },
    transition: {
      entering: {
        transform: 'translate3d(0, ' + verticalOffset * 2 + 'px, 0)'
      },
      entered: {
        transform: restingTransform
      },
      /* Custom transition where we remove the transform so it doesn't cause issues with react-beautiful-dnd (AK-4328)
       * This can be removed once react-beautiful-dnd portals its draggables.
       */
      afterEntered: {
        transform: null,
        top: translateY + (component.displayName === 'PositionerAbsolute' ? gutter : 0)
      },
      exit: {
        transform: restingTransform
      },
      exiting: {
        transform: 'translate3d(0, -' + verticalOffset * 2 + 'px, 0)'
      }
    }
  }, props));
};
export { SlideUp };