import _Object$keys from 'babel-runtime/core-js/object/keys';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import { PureComponent } from 'react';

var STYLE_KEYS = ['boxSizing', 'height', 'overflow', 'paddingRight', 'position'];
var LOCK_STYLES = {
  boxSizing: 'border-box', // account for possible declaration `width: 100%;` on body
  overflow: 'hidden',
  position: 'relative',
  height: '100%'
};

var ScrollLock = function (_PureComponent) {
  _inherits(ScrollLock, _PureComponent);

  function ScrollLock() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ScrollLock);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ScrollLock.__proto__ || _Object$getPrototypeOf(ScrollLock)).call.apply(_ref, [this].concat(args))), _this), _this.originalStyles = {}, _temp), _possibleConstructorReturn(_this, _ret);
  } // eslint-disable-line react/sort-comp


  _createClass(ScrollLock, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (!document.body) return;
      var target = document.body;
      var scrollbarWidth = window.innerWidth - target.clientWidth;

      // keep any styles already applied to the body
      STYLE_KEYS.forEach(function (key) {
        _this2.originalStyles[key] = target.style.getPropertyValue(key);
      });

      if (this.props.detectScrollbars) {
        target.style.paddingRight = scrollbarWidth + 'px';
      }

      _Object$keys(LOCK_STYLES).forEach(function (rule) {
        var value = LOCK_STYLES[rule];
        target.style.setProperty(rule, value);
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var _this3 = this;

      if (!document.body) return;
      var target = document.body;

      // reapply original body styles, if any
      STYLE_KEYS.forEach(function (rule) {
        target.style.setProperty(rule, _this3.originalStyles[rule]);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return ScrollLock;
}(PureComponent);

ScrollLock.defaultProps = { detectScrollbars: true };
export default ScrollLock;