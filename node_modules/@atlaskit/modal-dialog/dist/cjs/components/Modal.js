'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _layerManager = require('@atlaskit/layer-manager');

var _blanket = require('@atlaskit/blanket');

var _blanket2 = _interopRequireDefault(_blanket);

var _sharedVariables = require('../shared-variables');

var _Modal = require('../styled/Modal');

var _Animation = require('./Animation');

var _Content = require('./Content');

var _Content2 = _interopRequireDefault(_Content);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NOTE: Rename transition components so it's easier to read the render method
var FillScreen = function FillScreen(props) {
  return _react2.default.createElement(_Animation.Fade, (0, _extends3.default)({ component: _Modal.FillScreen }, props));
};
// eslint-disable-next-line react/prop-types

var Positioner = function Positioner(_ref) {
  var scrollBehavior = _ref.scrollBehavior,
      props = (0, _objectWithoutProperties3.default)(_ref, ['scrollBehavior']);

  var component = scrollBehavior === 'inside' ? _Modal.PositionerAbsolute : _Modal.PositionerRelative;

  return _react2.default.createElement(_Animation.SlideUp, (0, _extends3.default)({ component: component }, props));
};

function getScrollDistance() {
  return window.pageYOffset ||
  // $FlowFixMe
  document.documentElement.scrollTop ||
  // $FlowFixMe
  document.body.scrollTop || 0;
}
function getInitialState() {
  return {
    dialogNode: null,
    scrollDistance: getScrollDistance(),
    hasEntered: false,
    isExiting: false
  };
}

var Modal = function (_Component) {
  (0, _inherits3.default)(Modal, _Component);

  function Modal() {
    var _ref2;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Modal);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref2 = Modal.__proto__ || (0, _getPrototypeOf2.default)(Modal)).call.apply(_ref2, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  } // eslint-disable-line react/sort-comp


  (0, _createClass3.default)(Modal, [{
    key: 'componentDidMount',


    // getDialogNode = (dialogNode) => {
    //   this.setState(state => !state.dialogNode && ({ dialogNode }));
    // }

    value: function componentDidMount() {
      window.addEventListener('scroll', this.handleWindowScroll);
    }

    /* Prevent window from being scrolled programatically so that the modal is positioned correctly
     * and to prevent scrollIntoView from scrolling the window.
     */

  }, {
    key: 'render',
    value: function render() {
      // NOTE: `in` is NOT public API, thus not documented (provided by react-transition-group)
      var _props = this.props,
          actions = _props.actions,
          appearance = _props.appearance,
          autoFocus = _props.autoFocus,
          body = _props.body,
          children = _props.children,
          footer = _props.footer,
          header = _props.header,
          height = _props.height,
          transitionIn = _props.in,
          isChromeless = _props.isChromeless,
          isHeadingMultiline = _props.isHeadingMultiline,
          onClose = _props.onClose,
          onCloseComplete = _props.onCloseComplete,
          onStackChange = _props.onStackChange,
          shouldCloseOnEscapePress = _props.shouldCloseOnEscapePress,
          stackIndex = _props.stackIndex,
          heading = _props.heading,
          width = _props.width,
          scrollBehavior = _props.scrollBehavior;
      var _state = this.state,
          isExiting = _state.isExiting,
          scrollDistance = _state.scrollDistance;


      var isBackground = stackIndex != null && stackIndex > 0;
      var transitionProps = { in: transitionIn, stackIndex: stackIndex };

      // If a custom width (number or percentage) is supplied, set inline style
      // otherwise allow styled component to consume as named prop
      var widthName = _sharedVariables.WIDTH_ENUM.values.includes(width) ? width : null;
      var widthValue = widthName ? null : width;

      // Pass an afterEnded custom transition to Positioner so we can update styles to remove the transform property
      // This fixes an issue with react-beautiful-dnd within modals - AK-4328
      var customTransition = this.state.hasEntered && !this.state.isExiting && !isBackground ? 'afterEntered' : '';

      return _react2.default.createElement(
        FillScreen,
        (0, _extends3.default)({}, transitionProps, {
          'aria-hidden': isBackground,
          onExit: this.handleExit,
          scrollDistance: scrollDistance
        }),
        _react2.default.createElement(_blanket2.default, { isTinted: true, onBlanketClicked: this.handleOverlayClick }),
        _react2.default.createElement(
          Positioner,
          (0, _extends3.default)({}, transitionProps, {
            customTransition: customTransition,
            onClick: this.handleOverlayClick,
            onEntered: this.handleEntered,
            onExited: onCloseComplete,
            scrollBehavior: scrollBehavior,
            widthName: widthName,
            widthValue: widthValue
          }),
          _react2.default.createElement(
            _layerManager.FocusLock,
            {
              enabled: stackIndex === 0 && !isExiting,
              autoFocus: autoFocus
            },
            _react2.default.createElement(
              _Modal.Dialog,
              {
                heightValue: height,
                isChromeless: isChromeless,
                onClick: this.handleDialogClick,
                role: 'dialog',
                tabIndex: '-1'
              },
              _react2.default.createElement(
                _Content2.default,
                {
                  actions: actions,
                  appearance: appearance,
                  footer: footer,
                  heading: heading,
                  isHeadingMultiline: isHeadingMultiline,
                  header: header,
                  onClose: onClose,
                  shouldScroll: scrollBehavior === 'inside',
                  shouldCloseOnEscapePress: shouldCloseOnEscapePress,
                  onStackChange: onStackChange,
                  isChromeless: isChromeless,
                  stackIndex: stackIndex,
                  body: body
                },
                children
              )
            )
          )
        )
      );
    }
  }]);
  return Modal;
}(_react.Component);

Modal.defaultProps = {
  autoFocus: undefined,
  scrollBehavior: 'inside',
  shouldCloseOnEscapePress: true,
  shouldCloseOnOverlayClick: true,
  isChromeless: false,
  stackIndex: 0,
  width: 'medium',
  isHeadingMultiline: true
};

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.state = getInitialState();

  this.handleWindowScroll = function () {
    if (getScrollDistance() !== _this2.state.scrollDistance) {
      window.scrollTo(window.pageXOffset, _this2.state.scrollDistance);
    }
  };

  this.handleOverlayClick = function (e) {
    if (_this2.props.shouldCloseOnOverlayClick) {
      // $FlowFixMe TEMPORARY
      _this2.props.onClose(e);
    }
  };

  this.handleDialogClick = function (event) {
    event.stopPropagation();
  };

  this.handleEntered = function () {
    _this2.setState({
      hasEntered: true
    });
    if (_this2.props.onOpenComplete) {
      var _props2;

      (_props2 = _this2.props).onOpenComplete.apply(_props2, arguments);
    }
  };

  this.handleExit = function () {
    window.removeEventListener('scroll', _this2.handleWindowScroll);
    // disable FocusLock *before* unmount. animation may end after a new modal
    // has gained focus, breaking focus behaviour.
    _this2.setState({ isExiting: true });
  };
};

exports.default = (0, _layerManager.withRenderTarget)({
  target: 'modal',
  withTransitionGroup: true
},
// $FlowFixMe TEMPORARY
Modal);