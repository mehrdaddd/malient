import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['\n  margin-top: ', ';\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n'], ['\n  margin-top: ', ';\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n']);

import React, { Component } from 'react';
import styled from 'styled-components';
import Spinner from '@atlaskit/spinner';

var LoadingDiv = styled.div(_templateObject, function (_ref) {
  var spacing = _ref.spacing;
  return spacing === 'none' ? '2px' : '4px';
});

var LoadingSpinner = function (_Component) {
  _inherits(LoadingSpinner, _Component);

  function LoadingSpinner() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, LoadingSpinner);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = LoadingSpinner.__proto__ || _Object$getPrototypeOf(LoadingSpinner)).call.apply(_ref2, [this].concat(args))), _this), _this.invertSpinner = function () {
      var _this$props = _this.props,
          appearance = _this$props.appearance,
          isSelected = _this$props.isSelected,
          isDisabled = _this$props.isDisabled;

      if (isSelected) return true;else if (isDisabled) return false;else if (appearance === 'primary' || appearance === 'danger') return true;
      return false;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(LoadingSpinner, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        LoadingDiv,
        { spacing: this.props.spacing },
        React.createElement(Spinner, { invertColor: this.invertSpinner() })
      );
    }
  }]);

  return LoadingSpinner;
}(Component);

export default LoadingSpinner;