"use strict";
// TODO: introduce some form of caching???
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Client = /** @class */ (function () {
    function Client(options) {
        if (options === void 0) { options = {}; }
        var _a = options.baseUrl, baseUrl = _a === void 0 ? 'https://cs-rpc.us-west-1.staging.public.atl-paas.net/invoke' : _a;
        this.baseUrl = baseUrl;
    }
    Client.prototype.get = function (url) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res, json;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetch("" + this.baseUrl, {
                            method: 'POST',
                            headers: {
                                'Cache-Control': 'no-cache',
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                aaid: '9902257f-b119-4ee1-84a9-442abe8baf04',
                                definitionId: '038b410a-9cfe-4a16-91df-93051fad6b48',
                                extensionKey: 'trello-smart-card-test',
                                spiField: 'resolve',
                                headers: {
                                    'Cache-Control': 'no-cache',
                                },
                                body: {
                                    resourceUrl: encodeURI(url),
                                },
                            }),
                        })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        json = _a.sent();
                        if (!json.response.body) {
                            throw new Error('Invalid response.');
                        }
                        return [2 /*return*/, json.response.body];
                }
            });
        });
    };
    return Client;
}());
exports.Client = Client;
//# sourceMappingURL=Client.js.map