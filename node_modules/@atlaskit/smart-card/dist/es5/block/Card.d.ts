/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Client } from '../Client';
import { CardView, CardViewProps } from './CardView';
export declare const LoadingView: () => null;
export declare const LoadedView: typeof CardView;
export declare const ErroredView: () => JSX.Element;
export interface CardProps {
    client?: Client;
    url: string;
}
export interface CardContext {
    smartCardClient?: Client;
}
export interface CardState {
    status: 'loading' | 'loaded' | 'errored';
    data?: CardViewProps;
}
export declare class Card extends React.Component<CardProps, CardState> {
    static contextTypes: {
        smartCardClient: PropTypes.Requireable<any>;
    };
    context: CardContext;
    state: CardState;
    getClient(): Client;
    shouldFetch(prevProps: CardProps, nextProps: CardProps): boolean;
    loadData(): Promise<void>;
    handleRender: () => void;
    componentWillReceiveProps(nextProps: CardProps): void;
    componentDidUpdate(prevProps: CardProps): void;
    renderLoadedState(): JSX.Element;
    render(): JSX.Element;
}
