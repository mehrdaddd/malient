import * as tslib_1 from "tslib";
import * as React from 'react';
import Button, { ButtonGroup } from '@atlaskit/button';
import MeatballIcon from '@atlaskit/icon/glyph/more';
import DropdownMenu, { DropdownItemGroup, DropdownItem, } from '@atlaskit/dropdown-menu';
import { Wrapper } from './styled';
var ActionsView = /** @class */ (function (_super) {
    tslib_1.__extends(ActionsView, _super);
    function ActionsView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.createActionHandler = function (action) {
            return function (event) {
                /* prevent the parent link handler from opening a URL when clicked */
                if (event) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                var onAction = _this.props.onAction;
                if (onAction) {
                    onAction(action);
                }
            };
        };
        _this.handleOpenChange = function (_a) {
            var event = _a.event;
            /* prevent the parent link handler from opening a URL when clicked */
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
        };
        return _this;
    }
    ActionsView.prototype.render = function () {
        var _this = this;
        var _a = this.props.actions, actions = _a === void 0 ? [] : _a;
        // display a maximum of 3 actions
        var limitedActions = actions.slice(0, 3);
        if (limitedActions.length === 0) {
            return null;
        }
        var firstAction;
        var secondAction;
        var otherActions;
        if (limitedActions.length === 2) {
            firstAction = limitedActions[0];
            secondAction = limitedActions[1];
            otherActions = [];
        }
        else {
            firstAction = limitedActions[0];
            otherActions = limitedActions.slice(1);
        }
        return (React.createElement(Wrapper, null,
            React.createElement(ButtonGroup, null,
                firstAction ? (React.createElement(Button, { onClick: this.createActionHandler(firstAction) }, firstAction.text)) : null,
                secondAction ? (React.createElement(Button, { onClick: this.createActionHandler(secondAction) }, secondAction.text)) : null,
                otherActions.length ? (React.createElement(DropdownMenu, { triggerType: "button", triggerButtonProps: {
                        appearance: 'subtle',
                        iconAfter: React.createElement(MeatballIcon, { label: "actions", size: "medium" }),
                    }, onOpenChange: this.handleOpenChange },
                    React.createElement(DropdownItemGroup, null, otherActions.map(function (action) { return (React.createElement(DropdownItem, { key: action.text, onClick: _this.createActionHandler(action) }, action.text)); })))) : null)));
    };
    return ActionsView;
}(React.Component));
export default ActionsView;
//# sourceMappingURL=index.js.map