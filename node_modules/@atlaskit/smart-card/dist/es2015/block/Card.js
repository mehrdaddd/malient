import * as tslib_1 from "tslib";
import * as React from 'react';
import * as PropTypes from 'prop-types';
import LazyRender from 'react-lazily-render';
import { ErrorCard } from '@atlaskit/media-ui';
import { extractPropsFromJSONLD } from './extractPropsFromJSONLD';
import { CardView, minWidth, maxWidth } from './CardView';
export var LoadingView = function () { return null; };
export var LoadedView = CardView;
export var ErroredView = function () { return (React.createElement(ErrorCard, { hasPreview: false, minWidth: minWidth(), maxWidth: maxWidth({ hasPreview: false }) })); };
function getLoadingState() {
    return {
        status: 'loading',
        data: undefined,
    };
}
function getLoadedState(data) {
    return {
        status: 'loaded',
        data: data,
    };
}
function getErroredState() {
    return {
        status: 'errored',
    };
}
var Card = /** @class */ (function (_super) {
    tslib_1.__extends(Card, _super);
    function Card() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = getLoadingState();
        _this.handleRender = function () {
            _this.loadData();
        };
        return _this;
    }
    Card.prototype.getClient = function () {
        var client = this.context.smartCardClient || this.props.client;
        if (!client) {
            throw new Error('@atlaskit/smart-card: No client provided. Provide a client like <Card client={new Client()} url=""/> or <Provider client={new Client()}><Card url=""/></Provider>.');
        }
        return client;
    };
    Card.prototype.shouldFetch = function (prevProps, nextProps) {
        return prevProps.url !== nextProps.url;
    };
    Card.prototype.loadData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var client, url, json, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        try {
                            client = this.getClient();
                        }
                        catch (error) {
                            // report the error for consumers to fix
                            // tslint:disable-next-line:no-console
                            console.error(error.message);
                            this.setState(getErroredState());
                            return [2 /*return*/];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        url = this.props.url;
                        return [4 /*yield*/, client.get(url)];
                    case 2:
                        json = _a.sent();
                        this.setState(getLoadedState(extractPropsFromJSONLD(json.data)));
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        // swallow the error and show a generic error message
                        this.setState(getErroredState());
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Card.prototype.componentWillReceiveProps = function (nextProps) {
        if (this.shouldFetch(this.props, nextProps)) {
            this.setState(getLoadingState());
        }
    };
    Card.prototype.componentDidUpdate = function (prevProps) {
        if (this.shouldFetch(prevProps, this.props)) {
            this.loadData();
        }
    };
    Card.prototype.renderLoadedState = function () {
        var data = this.state.data;
        if (data) {
            return React.createElement(LoadedView, tslib_1.__assign({}, data));
        }
        else {
            return React.createElement(ErroredView, null);
        }
    };
    Card.prototype.render = function () {
        var status = this.state.status;
        var content;
        switch (status) {
            case 'loading':
                content = React.createElement(LoadingView, null);
                break;
            case 'loaded':
                content = this.renderLoadedState();
                break;
            case 'errored':
                content = React.createElement(ErroredView, null);
                break;
        }
        return (React.createElement(LazyRender, { offset: 100, placeholder: React.createElement(LoadingView, null), content: content, onRender: this.handleRender }));
    };
    Card.contextTypes = {
        smartCardClient: PropTypes.object,
    };
    return Card;
}(React.Component));
export { Card };
//# sourceMappingURL=Card.js.map