import { Context } from '@atlaskit/media-core';
import { UploadParams } from '..';
import { UploadService, UploadServiceEventListener, UploadServiceEventPayloadTypes } from './uploadServiceFactory';
export declare class OldUploadServiceImpl implements UploadService {
    private static hasher;
    private readonly resumable;
    private readonly emitter;
    private readonly mediaClientPool;
    private readonly authProvider;
    private readonly userCollectionMediaClient;
    private readonly api;
    private readonly uploadChunkUrl;
    private readonly uploads;
    private dropzoneElement?;
    private uploadParams;
    private retry;
    constructor(context: Context, uploadParams?: UploadParams);
    setUploadParams(uploadParams?: UploadParams): void;
    getUploadParams(): UploadParams;
    addBrowse(element: HTMLElement): void;
    addDropzone(element: HTMLElement): void;
    removeDropzone(): void;
    addFiles(files: File[]): void;
    cancel(uniqueIdentifier?: string): void;
    on<E extends keyof UploadServiceEventPayloadTypes>(event: E, listener: UploadServiceEventListener<E>): void;
    off<E extends keyof UploadServiceEventPayloadTypes>(event: E, listener: UploadServiceEventListener<E>): void;
    private emit;
    private getMediaClient(resumableFile);
    private getQueryParameters;
    private hashResumableChunk(chunk);
    private generateTarget;
    private onFilesAdded;
    private getMediaTypeFromFile(file);
    private onChunkingComplete;
    private onFileProgress;
    private emitLastUploadingPercentage;
    private onFileSuccess;
    private onFileError;
    private finalizeFile(resumableFile);
    private appendChunksToUpload(mediaClient, uploadId, allChunkIds, maxChunks);
    private copyFileToUsersCollection(sourceFileId, sourceCollection?);
    private processFile(mediaClient, fileId, resumableFile);
    private pollForFileMetadata(mediaClient, publicId, resumableFile);
    private onUploadError(resumableFile, errorName, errorDetails, mediaClient);
    private onError(resumableFile, errorName, error?);
    private readonly onDrop;
    private mapResumableFileToMediaFile;
    private mapResumableFileToPublicMediaFile;
    private getResumableFileCreationDate;
    private getResumableFileUploadParams;
    private cleanupResumableFile;
}
