"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var localUpload_1 = require("./localUpload");
var events_1 = require("../outer/analytics/events");
var documentReady_1 = require("../util/documentReady");
var Clipboard = /** @class */ (function (_super) {
    tslib_1.__extends(Clipboard, _super);
    function Clipboard(analyticsContext, context, config) {
        if (config === void 0) { config = { uploadParams: {} }; }
        var _this = _super.call(this, analyticsContext, context, config) || this;
        _this.pasteHandler = function (event) {
            /*
              Browser behaviour for getting files from the clipboard is very inconsistent and buggy.
              @see https://extranet.atlassian.com/display/FIL/RFC+099%3A+Clipboard+browser+inconsistency
            */
            var filesArray = Array.from(event.clipboardData.files);
            _this.uploadService.addFiles(filesArray);
        };
        _this.analyticsContext.trackEvent(new events_1.MPClipboardLoaded());
        return _this;
    }
    Clipboard.prototype.activate = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, documentReady_1.whenDomReady];
                    case 1:
                        _a.sent();
                        this.deactivate();
                        document.addEventListener('paste', this.pasteHandler, false);
                        return [2 /*return*/];
                }
            });
        });
    };
    Clipboard.prototype.deactivate = function () {
        document.removeEventListener('paste', this.pasteHandler);
    };
    return Clipboard;
}(localUpload_1.LocalUploadComponent));
exports.Clipboard = Clipboard;
//# sourceMappingURL=clipboard.js.map