import { Auth, AuthProvider } from '@atlaskit/media-core';
export interface MediaApiError {
    error: {
        code?: string;
        title?: string;
    };
}
export declare const isTokenError: (apiError?: MediaApiError | undefined) => boolean;
export declare type MediaClientRequestHeaders = {
    [header: string]: any;
};
export declare type MediaClientRequestParameters = {
    [parameter: string]: any;
};
export interface MediaClientRequest {
    httpMethod: 'GET' | 'POST' | 'PUT';
    mediaApiMethod: string;
    headers?: MediaClientRequestHeaders;
    parameters?: MediaClientRequestParameters;
    data?: {
        [key: string]: any;
    };
}
export interface MediaClientResponse {
    data: any;
}
export declare type AddAuth = (request: MediaClientRequest, auth: Auth) => MediaClientRequest;
export declare const addAuthToHeaders: (request: MediaClientRequest, auth: Auth) => MediaClientRequest;
export declare const addAuthToQueryParameters: (request: MediaClientRequest, auth: Auth) => MediaClientRequest;
export declare class MediaClient {
    private readonly apiUrl;
    private readonly authProvider;
    private readonly collection;
    private auth?;
    constructor(apiUrl: string, authProvider: AuthProvider, collection?: string | undefined);
    readonly storedAuth: Auth | undefined;
    refreshAuth(): Promise<Auth>;
    call(request: MediaClientRequest, addAuth?: AddAuth): Promise<MediaClientResponse>;
    private makeCall(request, addAuth, forceRefreshToken?);
    private getAuth(forceRefresh?);
    private makeCallWithToken(request, addAuth, auth);
    private getAxiosRequestConfig(request);
}
