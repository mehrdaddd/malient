export declare class MockFile implements File {
    readonly size: number;
    readonly type: string;
    readonly lastModified: number;
    readonly lastModifiedDate: any;
    readonly name: string;
    readonly webkitRelativePath: string;
    msClose(): void;
    msDetachStream(): any;
    slice(start?: number, end?: number, contentType?: string): Blob;
}
export declare class MockFileList extends Array<File> {
    item(index: number): File;
    static fromArray(files: File[]): MockFileList;
}
export declare class MockDataTransfer implements DataTransfer {
    dropEffect: string;
    effectAllowed: string;
    readonly files: FileList;
    readonly items: DataTransferItemList;
    readonly types: string[];
    constructor(files?: FileList);
    clearData(format?: string): boolean;
    getData(format: string): string;
    setData(format: string, data: string): boolean;
    setDragImage(image: Element, x: number, y: number): void;
}
export declare class MockClipboardEvent extends Event implements ClipboardEvent {
    clipboardData: DataTransfer;
    constructor(event: string, files?: File[]);
}
export declare class MockDragEvent extends MouseEvent implements DragEvent {
    dataTransfer: DataTransfer;
    constructor(event: string, files?: File[]);
    initDragEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, dataTransferArg: DataTransfer): void;
    msConvertURL(file: File, targetType: string, targetURL?: string): void;
}
