import * as tslib_1 from "tslib";
import * as React from 'react';
import { Component } from 'react';
import { LineWidthButton } from './buttons/lineWidthButton';
import { ColorButton } from './buttons/colorButton';
import { ToolButton } from './buttons/toolButton';
import { LineWidthPopup } from './popups/lineWidthPopup';
import { ColorPopup } from './popups/colorPopup';
import { ToolbarContainer, CenterButtons, RightButtons, RightButton, } from './styles';
import { buttonSave, buttonCancel } from '../../phrases';
export var tools = [
    'arrow',
    'rectangle',
    'oval',
    'line',
    'text',
    'blur',
    'brush',
];
var Toolbar = /** @class */ (function (_super) {
    tslib_1.__extends(Toolbar, _super);
    function Toolbar(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { popup: 'none' };
        return _this;
    }
    Toolbar.prototype.render = function () {
        var _this = this;
        var color = this.props.color;
        var onColorButtonClick = function () { return _this.showOrHidePopup('color'); };
        var onLineWidthButtonClick = function () { return _this.showOrHidePopup('lineWidth'); };
        var isColorButtonActive = this.state.popup === 'color';
        var isLineWidthButtonActive = this.state.popup === 'lineWidth';
        return (React.createElement(ToolbarContainer, null,
            React.createElement(CenterButtons, null,
                this.renderToolButtons(),
                React.createElement(LineWidthButton, { isActive: isLineWidthButtonActive, onClick: onLineWidthButtonClick }),
                React.createElement(ColorButton, { color: color, isActive: isColorButtonActive, onClick: onColorButtonClick })),
            React.createElement(RightButtons, null,
                React.createElement(RightButton, { appearance: "primary", theme: "dark", onClick: this.props.onSave }, buttonSave),
                React.createElement(RightButton, { appearance: "subtle", onClick: this.props.onCancel, theme: "dark" }, buttonCancel)),
            this.renderPopup()));
    };
    Toolbar.prototype.renderToolButtons = function () {
        var _a = this.props, activeTool = _a.tool, onToolChanged = _a.onToolChanged;
        var onToolClick = function (tool) { return onToolChanged(tool); };
        return tools.map(function (tool) { return (React.createElement(ToolButton, { key: tool, tool: tool, activeTool: activeTool, onToolClick: onToolClick })); });
    };
    Toolbar.prototype.showOrHidePopup = function (target) {
        if (this.state.popup === target) {
            this.setState({ popup: 'none' });
        }
        else {
            this.setState({ popup: target });
        }
    };
    Toolbar.prototype.renderPopup = function () {
        var _this = this;
        var _a = this.props, color = _a.color, lineWidth = _a.lineWidth, onColorChanged = _a.onColorChanged, onLineWidthChanged = _a.onLineWidthChanged;
        var popup = this.state.popup;
        if (popup === 'color') {
            var onPickColor = function (color) {
                onColorChanged(color);
                _this.setState({ popup: 'none' });
            };
            return React.createElement(ColorPopup, { onPickColor: onPickColor, color: color });
        }
        if (popup === 'lineWidth') {
            var onLineWidthClick = function (lineWidth) {
                onLineWidthChanged(lineWidth);
                _this.setState({ popup: 'none' });
            };
            return (React.createElement(LineWidthPopup, { onLineWidthClick: onLineWidthClick, lineWidth: lineWidth }));
        }
        return null;
    };
    return Toolbar;
}(Component));
export { Toolbar };
//# sourceMappingURL=toolbar.js.map