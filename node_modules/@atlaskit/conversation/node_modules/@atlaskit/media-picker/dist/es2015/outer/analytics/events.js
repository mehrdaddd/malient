import * as tslib_1 from "tslib";
var UserEvent = /** @class */ (function () {
    function UserEvent(name, properties) {
        this.prefix = 'files.mediapicker-web.';
        this.name = this.prefix + name;
        this.properties = properties;
    }
    UserEvent.prototype.toJSON = function () {
        return {
            name: this.name,
            properties: this.properties,
        };
    };
    return UserEvent;
}());
export { UserEvent };
var MediaPickerLoaded = /** @class */ (function (_super) {
    tslib_1.__extends(MediaPickerLoaded, _super);
    function MediaPickerLoaded() {
        return _super.call(this, 'library.loaded', {}) || this;
    }
    return MediaPickerLoaded;
}(UserEvent));
export { MediaPickerLoaded };
var MPBrowserLoaded = /** @class */ (function (_super) {
    tslib_1.__extends(MPBrowserLoaded, _super);
    function MPBrowserLoaded() {
        return _super.call(this, 'browser.loaded', {}) || this;
    }
    return MPBrowserLoaded;
}(UserEvent));
export { MPBrowserLoaded };
var MPDropzoneLoaded = /** @class */ (function (_super) {
    tslib_1.__extends(MPDropzoneLoaded, _super);
    function MPDropzoneLoaded() {
        return _super.call(this, 'dropzone.loaded', {}) || this;
    }
    return MPDropzoneLoaded;
}(UserEvent));
export { MPDropzoneLoaded };
var MPClipboardLoaded = /** @class */ (function (_super) {
    tslib_1.__extends(MPClipboardLoaded, _super);
    function MPClipboardLoaded() {
        return _super.call(this, 'cliboard.loaded', {}) || this;
    }
    return MPClipboardLoaded;
}(UserEvent));
export { MPClipboardLoaded };
/* Popup */
var MPPopupLoaded = /** @class */ (function (_super) {
    tslib_1.__extends(MPPopupLoaded, _super);
    function MPPopupLoaded() {
        return _super.call(this, 'popup.loaded', {}) || this;
    }
    return MPPopupLoaded;
}(UserEvent));
export { MPPopupLoaded };
var MPPopupShown = /** @class */ (function (_super) {
    tslib_1.__extends(MPPopupShown, _super);
    function MPPopupShown() {
        return _super.call(this, 'popup.shown', {}) || this;
    }
    return MPPopupShown;
}(UserEvent));
export { MPPopupShown };
var MPPopupHidden = /** @class */ (function (_super) {
    tslib_1.__extends(MPPopupHidden, _super);
    function MPPopupHidden() {
        return _super.call(this, 'popup.hidden', {}) || this;
    }
    return MPPopupHidden;
}(UserEvent));
export { MPPopupHidden };
/* File operations */
var MPFileUploadEnded = /** @class */ (function (_super) {
    tslib_1.__extends(MPFileUploadEnded, _super);
    function MPFileUploadEnded() {
        return _super.call(this, 'file.upload.ended', {}) || this;
    }
    return MPFileUploadEnded;
}(UserEvent));
export { MPFileUploadEnded };
var MPFileUploadStarted = /** @class */ (function (_super) {
    tslib_1.__extends(MPFileUploadStarted, _super);
    function MPFileUploadStarted() {
        return _super.call(this, 'file.upload.started', {}) || this;
    }
    return MPFileUploadStarted;
}(UserEvent));
export { MPFileUploadStarted };
var MPFileProcessingStarted = /** @class */ (function (_super) {
    tslib_1.__extends(MPFileProcessingStarted, _super);
    function MPFileProcessingStarted() {
        return _super.call(this, 'file.processing.started', {}) || this;
    }
    return MPFileProcessingStarted;
}(UserEvent));
export { MPFileProcessingStarted };
var ErrorException = /** @class */ (function (_super) {
    tslib_1.__extends(ErrorException, _super);
    function ErrorException(errorAlias, errorStack, errorDescription) {
        var _this = this;
        var errorMessage = {
            alias: errorAlias,
            description: errorDescription,
            stacktrace: errorStack,
        };
        _this = _super.call(this, 'files.mediapicker-web.library.exception.fired', errorMessage) || this;
        return _this;
    }
    return ErrorException;
}(UserEvent));
export { ErrorException };
//# sourceMappingURL=events.js.map