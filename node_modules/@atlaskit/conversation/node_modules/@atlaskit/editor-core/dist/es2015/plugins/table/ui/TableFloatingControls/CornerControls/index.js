import * as tslib_1 from "tslib";
import * as React from 'react';
import { Component } from 'react';
import { isTableSelected, selectTable } from 'prosemirror-utils';
import { toolbarSize } from '../styles';
import { CornerContainer, CornerButton } from './styles';
import InsertColumnButton from '../ColumnControls/InsertColumnButton';
import InsertRowButton from '../RowControls/InsertRowButton';
import { getLineMarkerWidth } from '../utils';
import { checkIfHeaderColumnEnabled, checkIfHeaderRowEnabled, checkIfNumberColumnEnabled, } from '../../../utils';
var CornerControls = /** @class */ (function (_super) {
    tslib_1.__extends(CornerControls, _super);
    function CornerControls() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectTable = function () {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            dispatch(selectTable(state.tr));
        };
        _this.hoverTable = function () {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            _this.props.hoverTable()(state, dispatch);
        };
        _this.resetHoverSelection = function () {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            _this.props.resetHoverSelection(state, dispatch);
        };
        _this.insertColumn = function () {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            _this.props.insertColumn(0)(state, dispatch);
        };
        _this.insertRow = function () {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            _this.props.insertRow(0)(state, dispatch);
        };
        return _this;
    }
    CornerControls.prototype.render = function () {
        var _a = this.props, tableElement = _a.tableElement, state = _a.editorView.state, scroll = _a.scroll, isTableInDanger = _a.isTableInDanger;
        var tableHeight = tableElement.offsetHeight;
        var lineMarkerWidth = getLineMarkerWidth(tableElement, scroll);
        return (React.createElement(CornerContainer, { className: isTableSelected(state.selection) ? 'active' : '' },
            React.createElement(CornerButton, { onClick: this.selectTable, onMouseOver: this.hoverTable, onMouseOut: this.resetHoverSelection, className: isTableInDanger ? 'danger' : '' }),
            !checkIfHeaderColumnEnabled(state) &&
                !checkIfNumberColumnEnabled(state) && (React.createElement(InsertColumnButton, { onClick: this.insertColumn, lineMarkerHeight: tableHeight + toolbarSize })),
            !checkIfHeaderRowEnabled(state) && (React.createElement(InsertRowButton, { style: { top: 2 }, onClick: this.insertRow, lineMarkerWidth: lineMarkerWidth, onMouseOver: this.props.updateScroll }))));
    };
    return CornerControls;
}(Component));
export default CornerControls;
//# sourceMappingURL=index.js.map