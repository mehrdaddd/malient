import * as React from 'react';
import { orderedList, bulletList, listItem } from '@atlaskit/editor-common';
import { ToolbarSize } from '../../ui/Toolbar';
import ToolbarLists from './ui/ToolbarLists';
import { plugin, stateKey } from './pm-plugins/main';
import inputRulePlugin from './pm-plugins/input-rule';
import keymapPlugin from './pm-plugins/keymap';
var listPlugin = {
    nodes: function () {
        return [
            { name: 'bulletList', node: bulletList, rank: 300 },
            { name: 'orderedList', node: orderedList, rank: 400 },
            { name: 'listItem', node: listItem, rank: 500 },
        ];
    },
    pmPlugins: function () {
        return [
            { rank: 600, plugin: function () { return plugin; } },
            { rank: 620, plugin: function (_a) {
                    var schema = _a.schema;
                    return inputRulePlugin(schema);
                } },
            { rank: 640, plugin: function (_a) {
                    var schema = _a.schema;
                    return keymapPlugin(schema);
                } },
        ];
    },
    primaryToolbarComponent: function (_a) {
        var editorView = _a.editorView, appearance = _a.appearance, popupsMountPoint = _a.popupsMountPoint, popupsBoundariesElement = _a.popupsBoundariesElement, popupsScrollableElement = _a.popupsScrollableElement, toolbarSize = _a.toolbarSize, disabled = _a.disabled, isToolbarReducedSpacing = _a.isToolbarReducedSpacing;
        var pluginState = stateKey.getState(editorView.state);
        var isSmall = toolbarSize < ToolbarSize.L;
        var isSeparator = toolbarSize >= ToolbarSize.S;
        return (React.createElement(ToolbarLists, { isSmall: isSmall, isSeparator: isSeparator, isReducedSpacing: isToolbarReducedSpacing, disabled: disabled, editorView: editorView, pluginState: pluginState, popupsMountPoint: popupsMountPoint, popupsBoundariesElement: popupsBoundariesElement, popupsScrollableElement: popupsScrollableElement, enableTaskToolbar: !!editorView.state.schema.nodes.taskItem && appearance === 'full-page' }));
    },
};
export default listPlugin;
//# sourceMappingURL=index.js.map