import * as React from 'react';
import { inlineExtension, extension, bodiedExtension, } from '@atlaskit/editor-common';
import { pluginKey as macroPluginKey } from '../macro';
import createPlugin, { pluginKey } from './plugin';
import { editExtension, removeExtension } from './actions';
import ExtensionEditPanel from './ui/ExtensionEditPanel';
import WithPluginState from '../../ui/WithPluginState';
var extensionPlugin = {
    nodes: function () {
        return [
            { rank: 2300, name: 'extension', node: extension },
            { rank: 2310, name: 'bodiedExtension', node: bodiedExtension },
            { rank: 2320, name: 'inlineExtension', node: inlineExtension },
        ];
    },
    pmPlugins: function () {
        return [
            {
                rank: 2330,
                plugin: function (_a) {
                    var schema = _a.schema, props = _a.props, dispatch = _a.dispatch, providerFactory = _a.providerFactory;
                    return createPlugin(dispatch, providerFactory, props.extensionHandlers || {});
                },
            },
        ];
    },
    contentComponent: function (_a) {
        var editorView = _a.editorView;
        var dispatch = editorView.dispatch;
        return (React.createElement(WithPluginState, { plugins: {
                macroState: macroPluginKey,
                extensionState: pluginKey,
            }, render: function (_a) {
                var _b = _a.macroState, macroState = _b === void 0 ? {} : _b, _c = _a.extensionState, extensionState = _c === void 0 ? {} : _c;
                return (React.createElement(ExtensionEditPanel, { element: extensionState.element, onEdit: function () { return editExtension(macroState.macroProvider)(editorView); }, onRemove: function () { return removeExtension(editorView.state, dispatch); } }));
            } }));
    },
};
export default extensionPlugin;
//# sourceMappingURL=index.js.map