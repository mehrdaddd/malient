import * as tslib_1 from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import Select from '@atlaskit/single-select';
import RemoveIcon from '@atlaskit/icon/glyph/editor/remove';
import { TrashToolbarButton } from './styles';
import Separator from '../../../../ui/Separator';
import FloatingToolbar from '../../../../ui/FloatingToolbar';
import { createLanguageList, filterSupportedLanguages, findMatchedLanguage, getLanguageIdentifier, } from './languageList';
var LanguagePicker = /** @class */ (function (_super) {
    tslib_1.__extends(LanguagePicker, _super);
    function LanguagePicker(props) {
        var _this = _super.call(this, props) || this;
        _this.onLanguageSelectMouseDown = function (event) {
            event.preventDefault();
            _this.setState({
                languageSelectFocused: true,
            });
        };
        _this.resetLanguageSelectFocused = function (event) {
            _this.setState({
                languageSelectFocused: false,
            });
        };
        _this.handlePluginStateChange = function (pluginState) {
            var element = pluginState.element, language = pluginState.language, toolbarVisible = pluginState.toolbarVisible;
            var supportedLanguages = _this.state.supportedLanguages;
            var updatedLanguage = findMatchedLanguage(supportedLanguages, language);
            _this.setState({
                activeLanguage: updatedLanguage,
                element: element,
                toolbarVisible: toolbarVisible,
            });
            var activeLanguageValue = updatedLanguage
                ? getLanguageIdentifier(updatedLanguage)
                : undefined;
            if (language !== activeLanguageValue) {
                _this.props.pluginState.updateLanguage(activeLanguageValue, _this.props.editorView);
            }
        };
        _this.handleLanguageChange = function (language) {
            _this.props.pluginState.updateLanguage(language.item.value, _this.props.editorView);
            _this.setState({
                toolbarVisible: true,
            });
        };
        _this.handleRemoveCodeBlock = function () {
            _this.props.pluginState.removeCodeBlock(_this.props.editorView);
        };
        _this.state = {
            language: undefined,
            toolbarVisible: false,
            supportedLanguages: filterSupportedLanguages(props.pluginState.supportedLanguages),
        };
        return _this;
    }
    LanguagePicker.prototype.componentDidMount = function () {
        this.props.pluginState.subscribe(this.handlePluginStateChange);
        var supportedLanguages = this.state.supportedLanguages;
        this.items = [
            {
                items: createLanguageList(supportedLanguages).map(function (lang) { return ({
                    content: lang.name,
                    value: getLanguageIdentifier(lang),
                }); }),
            },
        ];
    };
    LanguagePicker.prototype.componentWillUnmount = function () {
        this.props.pluginState.unsubscribe(this.handlePluginStateChange);
    };
    LanguagePicker.prototype.render = function () {
        var _a = this.state, activeLanguage = _a.activeLanguage, element = _a.element, toolbarVisible = _a.toolbarVisible, languageSelectFocused = _a.languageSelectFocused;
        var defaultLanguage = activeLanguage
            ? {
                content: activeLanguage.name,
                value: getLanguageIdentifier(activeLanguage),
            }
            : undefined;
        if (toolbarVisible || languageSelectFocused) {
            return (React.createElement(FloatingToolbar, { target: element, offset: [0, 3] },
                React.createElement("div", { tabIndex: 0, onMouseDown: this.onLanguageSelectMouseDown, onBlur: this.resetLanguageSelectFocused },
                    React.createElement(Select, { id: "test", hasAutocomplete: true, shouldFocus: languageSelectFocused, items: this.items, onSelected: this.handleLanguageChange, defaultSelected: defaultLanguage, placeholder: "Select language" })),
                React.createElement(Separator, null),
                React.createElement(TrashToolbarButton, { onClick: this.handleRemoveCodeBlock, iconBefore: React.createElement(RemoveIcon, { label: "Reset block type" }) })));
        }
        return null;
    };
    return LanguagePicker;
}(PureComponent));
export default LanguagePicker;
//# sourceMappingURL=index.js.map