import * as tslib_1 from "tslib";
import * as React from 'react';
import WrapLeftIcon from '@atlaskit/icon/glyph/editor/media-wrap-left';
import WrapRightIcon from '@atlaskit/icon/glyph/editor/media-wrap-right';
import CenterIcon from '@atlaskit/icon/glyph/editor/media-center';
import WideIcon from '@atlaskit/icon/glyph/editor/media-wide';
import FullWidthIcon from '@atlaskit/icon/glyph/editor/media-full-width';
import RemoveIcon from '@atlaskit/icon/glyph/editor/remove';
import { akEditorFullPageMaxWidth, } from '@atlaskit/editor-common';
import ToolbarButton from '../../../../ui/ToolbarButton';
import Separator from '../../../../ui/Separator';
import FloatingToolbar from '../../../../ui/FloatingToolbar';
import { closestElement } from '../../../../utils';
var icons = {
    'wrap-left': {
        icon: WrapLeftIcon,
        label: 'wrap left',
    },
    center: {
        icon: CenterIcon,
        label: 'center',
    },
    'wrap-right': {
        icon: WrapRightIcon,
        label: 'wrap right',
    },
    wide: {
        icon: WideIcon,
        label: 'wide',
    },
    'full-width': {
        icon: FullWidthIcon,
        label: 'full width',
    },
};
var MediaSingleEdit = /** @class */ (function (_super) {
    tslib_1.__extends(MediaSingleEdit, _super);
    function MediaSingleEdit() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { layout: 'center', allowBreakout: true, allowLayout: true };
        _this.handleRemove = function () {
            var pluginState = _this.props.pluginState;
            pluginState.removeSelectedMediaNode();
        };
        _this.handlePluginStateChange = function (pluginState) {
            var target = pluginState.element, layout = pluginState.layout;
            var node = pluginState.selectedMediaNode();
            var allowBreakout = !!(node &&
                node.attrs &&
                node.attrs.width > akEditorFullPageMaxWidth);
            var allowLayout = !!pluginState.isLayoutSupported();
            _this.setState({ target: target, layout: layout, allowBreakout: allowBreakout, allowLayout: allowLayout });
        };
        return _this;
    }
    MediaSingleEdit.prototype.componentDidMount = function () {
        this.props.pluginState.subscribe(this.handlePluginStateChange);
    };
    MediaSingleEdit.prototype.componentWillUnmount = function () {
        this.props.pluginState.unsubscribe(this.handlePluginStateChange);
    };
    MediaSingleEdit.prototype.render = function () {
        var _this = this;
        var _a = this.state, target = _a.target, selectedLayout = _a.layout, allowBreakout = _a.allowBreakout, allowLayout = _a.allowLayout;
        if (target &&
            !closestElement(target, 'li') &&
            !closestElement(target, 'table')) {
            return (React.createElement(FloatingToolbar, { target: target, offset: [0, 3], fitHeight: 24 },
                Object.keys(icons).map(function (layout, index) {
                    // Don't render Wide and Full width button for image smaller than editor content width
                    if (index > 2 && !allowBreakout) {
                        return;
                    }
                    var Icon = icons[layout].icon;
                    var label = icons[layout].label;
                    return (
                    /** Adding extra span tag here to get rid of unnecessary styling */
                    React.createElement("span", { key: index },
                        React.createElement(ToolbarButton, { disabled: !allowLayout, selected: layout === selectedLayout, onClick: _this.handleChangeLayout.bind(_this, layout), iconBefore: React.createElement(Icon, { label: "Change layout to " + label }) })));
                }),
                React.createElement(Separator, null),
                React.createElement("span", null,
                    React.createElement(ToolbarButton, { onClick: this.handleRemove, iconBefore: React.createElement(RemoveIcon, { label: "Remove media" }) }))));
        }
        else {
            return null;
        }
    };
    MediaSingleEdit.prototype.handleChangeLayout = function (layout) {
        this.props.pluginState.align(layout);
    };
    return MediaSingleEdit;
}(React.Component));
export default MediaSingleEdit;
//# sourceMappingURL=index.js.map