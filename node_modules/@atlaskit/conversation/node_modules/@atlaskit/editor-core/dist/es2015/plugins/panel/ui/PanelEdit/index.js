import * as tslib_1 from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import styled from 'styled-components';
import SuccessIcon from '@atlaskit/icon/glyph/editor/success';
import InfoIcon from '@atlaskit/icon/glyph/editor/info';
import NoteIcon from '@atlaskit/icon/glyph/editor/note';
import RemoveIcon from '@atlaskit/icon/glyph/editor/remove';
import WarningIcon from '@atlaskit/icon/glyph/editor/warning';
import ErrorIcon from '@atlaskit/icon/glyph/editor/error';
import { akColorN70, akColorR300, akColorR400, } from '@atlaskit/util-shared-styles';
import UiToolbarButton from '../../../../ui/ToolbarButton';
import UiSeparator from '../../../../ui/Separator';
import UiFloatingToolbar from '../../../../ui/FloatingToolbar';
import { availablePanelType, } from '../../pm-plugins/main';
var icons = {
    info: InfoIcon,
    note: NoteIcon,
    success: SuccessIcon,
    warning: WarningIcon,
    error: ErrorIcon,
};
var titles = {
    info: 'Info',
    note: 'Note',
    success: 'Success',
    warning: 'Warning',
    error: 'Error',
};
var ToolbarButton = styled(UiToolbarButton)(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  width: 24px;\n  padding: 0;\n  margin: 0 2px;\n"], ["\n  width: 24px;\n  padding: 0;\n  margin: 0 2px;\n"])));
var Separator = styled(UiSeparator)(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["\n  margin: 2px 6px;\n"], ["\n  margin: 2px 6px;\n"])));
// `line-height: 1` to fix extra 1px height from toolbar wrapper
var FloatingToolbar = styled(UiFloatingToolbar)(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["\n  & > div {\n    line-height: 1;\n  }\n  & > div:first-child > button {\n    margin-left: 0;\n  }\n  & > div:last-child > button {\n    margin-right: 0;\n  }\n"], ["\n  & > div {\n    line-height: 1;\n  }\n  & > div:first-child > button {\n    margin-left: 0;\n  }\n  & > div:last-child > button {\n    margin-right: 0;\n  }\n"])));
var ToolbarButtonDestructive = styled(ToolbarButton)(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["\n  &:hover {\n    color: ", " !important;\n  }\n  &:active {\n    color: ", " !important;\n  }\n  &[disabled]:hover {\n    color: ", " !important;\n  }\n"], ["\n  &:hover {\n    color: ", " !important;\n  }\n  &:active {\n    color: ", " !important;\n  }\n  &[disabled]:hover {\n    color: ", " !important;\n  }\n"])), akColorR300, akColorR400, akColorN70);
var PanelEdit = /** @class */ (function (_super) {
    tslib_1.__extends(PanelEdit, _super);
    function PanelEdit(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { toolbarVisible: false };
        _this.handlePluginStateChange = function (pluginState) {
            var target = pluginState.element, activePanelType = pluginState.activePanelType, toolbarVisible = pluginState.toolbarVisible;
            _this.setState({
                toolbarVisible: toolbarVisible,
                target: target,
                activePanelType: activePanelType,
            });
        };
        _this.handleSelectPanelType = function (panelType, event) {
            var editorView = _this.props.editorView;
            _this.props.pluginState.changePanelType(editorView, panelType);
        };
        _this.handleRemovePanel = function () {
            var editorView = _this.props.editorView;
            _this.props.pluginState.removePanel(editorView);
        };
        return _this;
    }
    PanelEdit.prototype.componentDidMount = function () {
        this.props.pluginState.subscribe(this.handlePluginStateChange);
    };
    PanelEdit.prototype.componentWillUnmount = function () {
        this.props.pluginState.unsubscribe(this.handlePluginStateChange);
    };
    PanelEdit.prototype.render = function () {
        var _this = this;
        var _a = this.state, target = _a.target, activePanelType = _a.activePanelType, toolbarVisible = _a.toolbarVisible;
        if (toolbarVisible) {
            return (React.createElement(FloatingToolbar, { target: target, offset: [0, 12], fitHeight: 32 },
                availablePanelType.map(function (panelType, index) {
                    var Icon = icons[panelType.panelType];
                    return (React.createElement(ToolbarButton, { spacing: "compact", key: index, selected: activePanelType === panelType.panelType, onClick: _this.handleSelectPanelType.bind(_this, panelType), title: titles[panelType.panelType], iconBefore: React.createElement(Icon, { label: "Change panel type to " + panelType.panelType }) }));
                }),
                React.createElement(Separator, null),
                React.createElement(ToolbarButtonDestructive, { spacing: "compact", onClick: this.handleRemovePanel, title: "Remove panel", iconBefore: React.createElement(RemoveIcon, { label: "Remove panel" }) })));
        }
        else {
            return null;
        }
    };
    return PanelEdit;
}(PureComponent));
export default PanelEdit;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=index.js.map