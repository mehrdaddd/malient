import * as React from 'react';
import { WithProviders } from '@atlaskit/editor-common';
import { stateKey as blockTypeStateKey, } from '../block-type/pm-plugins/main';
import { stateKey as mediaStateKey } from '../media/pm-plugins/main';
import { hyperlinkPluginKey } from '../hyperlink';
import { mentionPluginKey as mentionStateKey } from '../mentions/pm-plugins/main';
import { stateKey as tablesStateKey } from '../table/pm-plugins/main';
import { stateKey as imageUploadStateKey } from '../image-upload/pm-plugins/main';
import { pluginKey as placeholderTextStateKey } from '../placeholder-text';
import { pluginKey as layoutStateKey } from '../layout';
import { pluginKey as macroStateKey, insertMacroFromMacroBrowser, } from '../macro';
import { pluginKey as dateStateKey } from '../date/plugin';
import { emojiPluginKey } from '../emoji/pm-plugins/main';
import WithPluginState from '../../ui/WithPluginState';
import { ToolbarSize } from '../../ui/Toolbar';
import ToolbarInsertBlock from './ui/ToolbarInsertBlock';
var toolbarSizeToButtons = function (toolbarSize) {
    switch (toolbarSize) {
        case ToolbarSize.XXL:
        case ToolbarSize.XL:
        case ToolbarSize.L:
        case ToolbarSize.M:
            return 5;
        case ToolbarSize.S:
            return 2;
        default:
            return 0;
    }
};
var insertBlockPlugin = function (options) { return ({
    primaryToolbarComponent: function (_a) {
        var editorView = _a.editorView, editorActions = _a.editorActions, eventDispatcher = _a.eventDispatcher, providerFactory = _a.providerFactory, popupsMountPoint = _a.popupsMountPoint, popupsBoundariesElement = _a.popupsBoundariesElement, popupsScrollableElement = _a.popupsScrollableElement, toolbarSize = _a.toolbarSize, disabled = _a.disabled, isToolbarReducedSpacing = _a.isToolbarReducedSpacing;
        var buttons = toolbarSizeToButtons(toolbarSize);
        var renderNode = function (providers) {
            return (React.createElement(WithPluginState, { plugins: {
                    blockTypeState: blockTypeStateKey,
                    mediaState: mediaStateKey,
                    tablesState: tablesStateKey,
                    mentionsState: mentionStateKey,
                    macroState: macroStateKey,
                    hyperlinkState: hyperlinkPluginKey,
                    emojiState: emojiPluginKey,
                    dateState: dateStateKey,
                    imageUpload: imageUploadStateKey,
                    placeholderTextState: placeholderTextStateKey,
                    layoutState: layoutStateKey,
                }, render: function (_a) {
                    var _b = _a.blockTypeState, blockTypeState = _b === void 0 ? {} : _b, mediaState = _a.mediaState, mentionsState = _a.mentionsState, tablesState = _a.tablesState, _c = _a.macroState, macroState = _c === void 0 ? {} : _c, hyperlinkState = _a.hyperlinkState, emojiState = _a.emojiState, dateState = _a.dateState, imageUpload = _a.imageUpload, placeholderTextState = _a.placeholderTextState, layoutState = _a.layoutState;
                    return (React.createElement(ToolbarInsertBlock, { buttons: buttons, isReducedSpacing: isToolbarReducedSpacing, isDisabled: disabled, editorView: editorView, tableHidden: tablesState && tablesState.tableHidden, tableSupported: !!tablesState, mentionsEnabled: mentionsState && mentionsState.enabled, dateEnabled: !!dateState, placeholderTextEnabled: placeholderTextState && placeholderTextState.allowInserting, layoutSectionEnabled: !!layoutState, insertMentionQuery: mentionsState && mentionsState.insertMentionQuery, mentionsSupported: !!mentionsState, mediaUploadsEnabled: mediaState && mediaState.allowsUploads, onShowMediaPicker: mediaState && mediaState.showMediaPicker, mediaSupported: !!mediaState, imageUploadSupported: !!imageUpload, imageUploadEnabled: imageUpload && imageUpload.enabled, handleImageUpload: imageUpload && imageUpload.handleImageUpload.bind(imageUpload), availableWrapperBlockTypes: blockTypeState.availableWrapperBlockTypes, linkSupported: !!hyperlinkState, linkDisabled: !hyperlinkState ||
                            !hyperlinkState.linkable ||
                            hyperlinkState.active, showLinkPanel: hyperlinkState && hyperlinkState.showLinkPanel, emojiDisabled: !emojiState || !emojiState.enabled, insertEmoji: emojiState && emojiState.insertEmoji, emojiProvider: providers.emojiProvider, horizontalRuleEnabled: options.horizontalRuleEnabled, onInsertBlockType: blockTypeState.insertBlockType, onInsertMacroFromMacroBrowser: insertMacroFromMacroBrowser, macroProvider: macroState.macroProvider, popupsMountPoint: popupsMountPoint, popupsBoundariesElement: popupsBoundariesElement, popupsScrollableElement: popupsScrollableElement, insertMenuItems: options.insertMenuItems, editorActions: editorActions }));
                } }));
        };
        return (React.createElement(WithProviders, { providerFactory: providerFactory, providers: ['emojiProvider'], renderNode: renderNode }));
    },
}); };
export default insertBlockPlugin;
//# sourceMappingURL=index.js.map