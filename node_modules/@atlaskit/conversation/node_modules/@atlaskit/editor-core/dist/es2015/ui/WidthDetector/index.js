import * as tslib_1 from "tslib";
import * as React from 'react';
import { Component } from 'react';
import SizeDetector from '@atlaskit/size-detector';
import { pluginKey as widthPluginKey } from '../../plugins/width';
var WidthDetector = /** @class */ (function (_super) {
    tslib_1.__extends(WidthDetector, _super);
    function WidthDetector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.debounce = null;
        _this.broadcastWidth = function (width) {
            var editorView = _this.props.editorView;
            if (editorView && _this.width !== width) {
                if (_this.debounce) {
                    clearTimeout(_this.debounce);
                }
                // NodeViews will trigger multiple state change error without this debounce
                _this.debounce = setTimeout(function () {
                    var tr = editorView.state.tr.setMeta(widthPluginKey, width);
                    tr.setMeta('isLocal', true);
                    editorView.dispatch(tr);
                    _this.width = width;
                    _this.debounce = null;
                }, 10);
            }
        };
        return _this;
    }
    WidthDetector.prototype.render = function () {
        var _this = this;
        return (React.createElement(SizeDetector, { containerStyle: {
                height: 0,
                width: '100%',
                flex: 'none',
            } }, function (_a) {
            var width = _a.width;
            return _this.broadcastWidth(width) || null;
        }));
    };
    return WidthDetector;
}(Component));
export default WidthDetector;
//# sourceMappingURL=index.js.map