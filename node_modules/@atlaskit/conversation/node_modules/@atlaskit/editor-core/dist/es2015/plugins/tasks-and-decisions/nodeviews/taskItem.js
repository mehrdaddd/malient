import * as tslib_1 from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { AnalyticsDelegate } from '@atlaskit/analytics';
import { ContentNodeView } from '../../../nodeviews';
import TaskItem from '../ui/Task';
var Task = /** @class */ (function (_super) {
    tslib_1.__extends(Task, _super);
    function Task(node, view, getPos, analyticsDelegateContext, providerFactory) {
        var _this = _super.call(this, node, view) || this;
        _this.isContentEmpty = false;
        _this.handleOnChange = function (taskId, isChecked) {
            var tr = _this.view.state.tr;
            var nodePos = _this.getPos();
            tr.setNodeMarkup(nodePos, undefined, {
                state: isChecked ? 'DONE' : 'TODO',
                localId: taskId,
            });
            _this.view.dispatch(tr);
        };
        _this.node = node;
        _this.view = view;
        _this.getPos = getPos;
        _this.isContentEmpty = node.content.childCount === 0;
        _this.analyticsDelegateContext = analyticsDelegateContext;
        _this.providerFactory = providerFactory;
        _this.renderReactComponent();
        return _this;
    }
    Task.prototype.renderReactComponent = function () {
        this.domRef = document.createElement('li');
        this.domRef.style['list-style-type'] = 'none';
        var node = this.node;
        var _a = node.attrs, localId = _a.localId, state = _a.state;
        var taskItem = (React.createElement(TaskItem, { taskId: localId, contentRef: this.handleRef, isDone: state === 'DONE', onChange: this.handleOnChange, showPlaceholder: this.isContentEmpty, providers: this.providerFactory }));
        ReactDOM.render(React.createElement(AnalyticsDelegate, tslib_1.__assign({}, this.analyticsDelegateContext), taskItem), this.domRef);
    };
    Object.defineProperty(Task.prototype, "dom", {
        get: function () {
            return this.domRef;
        },
        enumerable: true,
        configurable: true
    });
    Task.prototype.update = function (node) {
        /**
         * Return false here because allowing node updates breaks 'checking the box'
         * when using collab editing.
         *
         * This is likely because the taskDecisionProvider is updating itself &
         * Prosemirror is interfering.
         */
        return false;
    };
    Task.prototype.destroy = function () {
        ReactDOM.unmountComponentAtNode(this.domRef);
        this.domRef = undefined;
        _super.prototype.destroy.call(this);
    };
    return Task;
}(ContentNodeView));
export function taskItemNodeViewFactory(analyticsDelegateContext, providerFactory) {
    return function (node, view, getPos) {
        return new Task(node, view, getPos, analyticsDelegateContext, providerFactory);
    };
}
//# sourceMappingURL=taskItem.js.map