import { MentionProvider, MentionDescription } from '@atlaskit/mention';
import { EditorState, Plugin, PluginKey, Transaction } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { ProviderFactory } from '@atlaskit/editor-common';
export declare const mentionPluginKey: PluginKey;
export declare type MentionsStateSubscriber = (state: MentionsState) => any;
export declare type StateChangeHandler = (state: MentionsState) => any;
export declare type ProviderChangeHandler = (provider?: MentionProvider) => any;
export declare class MentionsState {
    query?: string;
    lastQuery?: string;
    queryActive: boolean;
    enabled: boolean;
    focused: boolean;
    anchorElement?: HTMLElement;
    mentionProvider?: MentionProvider;
    onSelectPrevious: () => boolean;
    onSelectNext: () => boolean;
    onSelectCurrent: (key?: string | undefined) => boolean;
    onDismiss: () => void;
    onSpaceTyped: () => void;
    private changeHandlers;
    private state;
    private view;
    private dirty;
    private currentQueryResult?;
    private queryResults;
    private tokens;
    private previousQueryResultCount;
    constructor(state: EditorState, providerFactory: ProviderFactory);
    subscribe(cb: MentionsStateSubscriber): void;
    unsubscribe(cb: MentionsStateSubscriber): void;
    notifySubscribers(): void;
    apply(tr: Transaction, state: EditorState): void;
    update(state: EditorState): void;
    private rangeHasNodeMatchingQuery(doc, from, to, query);
    dismiss(): boolean;
    generateDismissTransaction(tr?: Transaction): Transaction;
    isEnabled(state?: EditorState): boolean;
    private findActiveMentionQueryMark();
    insertMention(mentionData?: MentionDescription, queryMark?: {
        start;
        end;
    }): void;
    generateInsertMentionTransaction(mentionData?: MentionDescription, queryMark?: {
        start;
        end;
    }, tr?: Transaction): Transaction;
    isNextCharacterSpace(position: number, doc: any): boolean;
    handleProvider: (name: string, provider: Promise<any>) => void;
    setMentionProvider(provider?: Promise<MentionProvider>): Promise<MentionProvider>;
    trySelectCurrent(key?: string): boolean;
    tryInsertingPreviousMention(): boolean;
    onMentionResult: (mentions: MentionDescription[], query: string) => void;
    private isSubQueryOfCurrentQuery(query);
    private findExactMatch(query, mentions);
    private clearState();
    setView(view: EditorView): void;
    insertMentionQuery: () => void;
    updateEditorFocused(focused: boolean): void;
}
export declare function createPlugin(providerFactory: ProviderFactory): Plugin;
export interface Mention {
    name: string;
    mentionName: string;
    nickname?: string;
    id: string;
}
