import * as tslib_1 from "tslib";
import * as React from 'react';
import { Component } from 'react';
import TableDisplayOptionsIcon from '@atlaskit/icon/glyph/editor/table-display-options';
import ExpandIcon from '@atlaskit/icon/glyph/chevron-down';
import EditorDoneIcon from '@atlaskit/icon/glyph/editor/done';
import { akColorB400 } from '@atlaskit/util-shared-styles';
import DropdownMenu from '../../../../../ui/DropdownMenu';
import { analyticsService as analytics } from '../../../../../analytics';
import { TriggerWrapper, ExpandIconWrapper, Spacer, ToolbarButtonWide, } from '../styles';
import { toggleHeaderRow, toggleHeaderColumn, toggleNumberColumn, } from '../../../actions';
import { checkIfHeaderRowEnabled, checkIfHeaderColumnEnabled, checkIfNumberColumnEnabled, } from '../../../utils';
var DisplayOptionsMenu = /** @class */ (function (_super) {
    tslib_1.__extends(DisplayOptionsMenu, _super);
    function DisplayOptionsMenu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isOpen: false,
        };
        _this.createItems = function () {
            var items = [];
            var icon = React.createElement(EditorDoneIcon, { primaryColor: akColorB400, label: "Selected" });
            var _a = _this.props, allowHeaderRow = _a.allowHeaderRow, allowHeaderColumn = _a.allowHeaderColumn, allowNumberColumn = _a.allowNumberColumn, state = _a.editorView.state;
            if (allowHeaderRow) {
                items.push({
                    elemBefore: checkIfHeaderRowEnabled(state) ? icon : React.createElement(Spacer, null),
                    content: 'Header row',
                    value: { name: 'header_row' },
                });
            }
            if (allowHeaderColumn) {
                items.push({
                    elemBefore: checkIfHeaderColumnEnabled(state) ? icon : React.createElement(Spacer, null),
                    content: 'Header column',
                    value: { name: 'header_column' },
                });
            }
            if (allowNumberColumn) {
                items.push({
                    elemBefore: checkIfNumberColumnEnabled(state) ? icon : React.createElement(Spacer, null),
                    content: 'Number column',
                    value: { name: 'number_column' },
                });
            }
            return [{ items: items }];
        };
        _this.onItemActivated = function (_a) {
            var item = _a.item;
            var _b = _this.props.editorView, state = _b.state, dispatch = _b.dispatch;
            switch (item.value.name) {
                case 'header_row':
                    analytics.trackEvent('atlassian.editor.format.table.toggleHeaderRow.button');
                    toggleHeaderRow(state, dispatch);
                    _this.toggleOpen();
                    break;
                case 'header_column':
                    analytics.trackEvent('atlassian.editor.format.table.toggleHeaderColumn.button');
                    toggleHeaderColumn(state, dispatch);
                    _this.toggleOpen();
                    break;
                case 'number_column':
                    analytics.trackEvent('atlassian.editor.format.table.toggleNumberColumn.button');
                    toggleNumberColumn(state, dispatch);
                    _this.toggleOpen();
                    break;
            }
        };
        _this.toggleOpen = function () {
            _this.handleOpenChange({ isOpen: !_this.state.isOpen });
        };
        _this.handleOpenChange = function (_a) {
            var isOpen = _a.isOpen;
            _this.setState({ isOpen: isOpen });
        };
        return _this;
    }
    DisplayOptionsMenu.prototype.render = function () {
        var isOpen = this.state.isOpen;
        var mountPoint = this.props.mountPoint;
        return (React.createElement(DropdownMenu, { mountTo: mountPoint, items: this.createItems(), isOpen: isOpen, onOpenChange: this.handleOpenChange, onItemActivated: this.onItemActivated, fitHeight: 188, fitWidth: 180 },
            React.createElement(ToolbarButtonWide, { spacing: "compact", selected: isOpen, title: "Toggle display options menu", onClick: this.toggleOpen, iconBefore: React.createElement(TriggerWrapper, null,
                    React.createElement(TableDisplayOptionsIcon, { label: "Toggle display options menu" }),
                    React.createElement(ExpandIconWrapper, null,
                        React.createElement(ExpandIcon, { label: "expand-dropdown-menu" }))) })));
    };
    return DisplayOptionsMenu;
}(Component));
export default DisplayOptionsMenu;
//# sourceMappingURL=index.js.map