import { Plugin, PluginKey } from 'prosemirror-state';
import { columnResizingPluginKey } from 'prosemirror-tables';
import { stateKey as tablePluginKey } from '../pm-plugins/main';
export var pluginKey = new PluginKey('tableColumnResizingCustomPlugin');
var updateControls = function (state) {
    var tableElement = tablePluginKey.getState(state).tableElement;
    if (!tableElement) {
        return;
    }
    var cols = tableElement.querySelector('tr').children;
    var columnControls = tableElement.parentElement.querySelectorAll('.table-column');
    var rows = tableElement.querySelectorAll('tr');
    var rowControls = tableElement.parentElement.parentElement.querySelectorAll('.table-row');
    // update column controls width on resize
    for (var i = 0, count = columnControls.length; i < count; i++) {
        columnControls[i].style.width = cols[i].offsetWidth + 1 + "px";
    }
    // update rows controls height on resize
    for (var i = 0, count = rowControls.length; i < count; i++) {
        rowControls[i].style.height = rows[i].offsetHeight + 1 + "px";
    }
    var rightShadow = tableElement.parentElement.parentElement.querySelector('.table-shadow.-right');
    if (rightShadow) {
        var _a = tableElement.parentElement, offsetWidth = _a.offsetWidth, scrollLeft = _a.scrollLeft;
        var diff = tableElement.offsetWidth - offsetWidth;
        var scrollDiff = scrollLeft - diff > 0 ? scrollLeft - diff : 0;
        var width = diff > 0 ? Math.min(diff, 10) : 0;
        var container = tableElement.parentElement.parentElement;
        var paddingLeft = getComputedStyle(container).paddingLeft;
        var paddingLeftPx = paddingLeft
            ? Number(paddingLeft.substr(0, paddingLeft.length - 2))
            : 0;
        rightShadow.style.width = width + "px";
        rightShadow.style.left = offsetWidth -
            width -
            scrollDiff +
            paddingLeftPx + "px";
    }
};
var plugin = new Plugin({
    key: pluginKey,
    props: {
        handleDOMEvents: {
            mousemove: function (view) {
                var dragging = columnResizingPluginKey.getState(view.state).dragging;
                if (dragging) {
                    updateControls(view.state);
                }
                return false;
            },
            mouseleave: function (view) {
                updateControls(view.state);
                return false;
            },
        },
        attributes: function () { return ({ class: 'table-resizing' }); },
    },
});
export default plugin;
//# sourceMappingURL=table-column-resizing-plugin.js.map