import * as tslib_1 from "tslib";
import * as React from 'react';
import { Component } from 'react';
import { Wrapper, Header, Content, ContentWrapper } from './styles';
import { Overlay } from '../styles';
import ExtensionLozenge from '../Lozenge';
var Extension = /** @class */ (function (_super) {
    tslib_1.__extends(Extension, _super);
    function Extension() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Extension.prototype.render = function () {
        var _a = this.props, node = _a.node, onClick = _a.onClick, handleContentDOMRef = _a.handleContentDOMRef, onSelectExtension = _a.onSelectExtension, children = _a.children;
        var hasBody = node.type.name === 'bodiedExtension';
        var hasChildren = !!children;
        return (React.createElement(Wrapper, { onClick: onClick, className: hasBody ? '' : 'with-overlay' },
            React.createElement(Overlay, { className: "extension-overlay" }),
            React.createElement(Header, { contentEditable: false, onClick: onSelectExtension, className: hasChildren ? 'with-children' : '' }, children ? children : React.createElement(ExtensionLozenge, { node: node })),
            hasBody && (React.createElement(ContentWrapper, null,
                React.createElement(Content, { innerRef: handleContentDOMRef, className: "extension-content" })))));
    };
    return Extension;
}(Component));
export default Extension;
//# sourceMappingURL=index.js.map