import { setBlockType } from 'prosemirror-commands';
import { Plugin, PluginKey } from 'prosemirror-state';
import { findParentDomRefOfType, findParentNodeOfType, removeParentNodeOfType, } from 'prosemirror-utils';
import keymapPlugin from './keymaps';
import codeBlockNodeView from '../nodeviews/code-block';
var CodeBlockState = /** @class */ (function () {
    function CodeBlockState(state) {
        this.toolbarVisible = false;
        this.domEvent = false;
        this.uniqueId = undefined;
        this.editorFocused = false;
        this.changeHandlers = [];
        this.focusHandlers = [];
        this.changeHandlers = [];
        this.focusHandlers = [];
        this.state = state;
    }
    CodeBlockState.prototype.subscribe = function (cb) {
        this.changeHandlers.push(cb);
        cb(this);
    };
    CodeBlockState.prototype.unsubscribe = function (cb) {
        this.changeHandlers = this.changeHandlers.filter(function (ch) { return ch !== cb; });
    };
    CodeBlockState.prototype.subscribeFocusHandlers = function (cb) {
        this.focusHandlers.push(cb);
    };
    CodeBlockState.prototype.unsubscribeFocusHandlers = function (cb) {
        this.focusHandlers = this.focusHandlers.filter(function (ch) { return ch !== cb; });
    };
    CodeBlockState.prototype.updateLanguage = function (language, view) {
        if (this.activeCodeBlock) {
            setBlockType(view.state.schema.nodes.codeBlock, {
                language: language,
                uniqueId: this.uniqueId,
            })(view.state, view.dispatch);
            if (this.focusHandlers.length > 0) {
                this.triggerFocus();
            }
            else {
                view.focus();
            }
        }
    };
    CodeBlockState.prototype.removeCodeBlock = function (view) {
        var _a = view.state, tr = _a.tr, schema = _a.schema, dispatch = view.dispatch;
        dispatch(removeParentNodeOfType(schema.nodes.codeBlock)(tr));
        view.focus();
    };
    CodeBlockState.prototype.updateEditorFocused = function (editorFocused) {
        this.editorFocused = editorFocused;
    };
    CodeBlockState.prototype.setLanguages = function (supportedLanguages) {
        this.supportedLanguages = supportedLanguages;
    };
    CodeBlockState.prototype.update = function (state, domAtPos, domEvent) {
        if (domEvent === void 0) { domEvent = false; }
        this.state = state;
        var codeBlockNode = this.activeCodeBlockNode();
        if ((domEvent && codeBlockNode) || codeBlockNode !== this.activeCodeBlock) {
            this.domEvent = domEvent;
            var newElement = codeBlockNode && this.activeCodeBlockElement(domAtPos);
            this.toolbarVisible =
                this.editorFocused &&
                    !!codeBlockNode &&
                    (domEvent || this.element !== newElement);
            this.activeCodeBlock = codeBlockNode;
            this.language =
                (codeBlockNode && codeBlockNode.attrs['language']) || undefined;
            this.element = newElement;
            this.uniqueId = codeBlockNode && codeBlockNode.attrs['uniqueId'];
            this.triggerOnChange();
        }
    };
    CodeBlockState.prototype.triggerOnChange = function () {
        var _this = this;
        this.changeHandlers.forEach(function (cb) { return cb(_this); });
    };
    CodeBlockState.prototype.triggerFocus = function () {
        var _this = this;
        this.focusHandlers.forEach(function (cb) { return cb(_this.uniqueId); });
    };
    CodeBlockState.prototype.activeCodeBlockElement = function (domAtPos) {
        var _a = this.state, selection = _a.selection, codeBlock = _a.schema.nodes.codeBlock;
        var codeDOM = findParentDomRefOfType(codeBlock, domAtPos)(selection);
        return codeDOM
            ? codeDOM.parentElement.parentElement.parentElement
            : undefined;
    };
    CodeBlockState.prototype.activeCodeBlockNode = function () {
        var _a = this.state, selection = _a.selection, codeBlock = _a.schema.nodes.codeBlock;
        var parent = findParentNodeOfType(codeBlock)(selection);
        if (parent) {
            return parent.node;
        }
    };
    return CodeBlockState;
}());
export { CodeBlockState };
export var stateKey = new PluginKey('codeBlockPlugin');
export var plugin = new Plugin({
    state: {
        init: function (config, state) {
            return new CodeBlockState(state);
        },
        apply: function (tr, pluginState, oldState, newState) {
            var stored = tr.getMeta(stateKey);
            if (stored) {
                pluginState.update(newState, stored.domAtPos, stored.domEvent);
            }
            return pluginState;
        },
    },
    key: stateKey,
    view: function (editorView) {
        var domAtPos = editorView.domAtPos.bind(editorView);
        stateKey.getState(editorView.state).update(editorView.state, domAtPos);
        return {
            update: function (view, prevState) {
                stateKey.getState(view.state).update(view.state, domAtPos);
            },
        };
    },
    props: {
        nodeViews: {
            codeBlock: codeBlockNodeView,
        },
        handleClick: function (view, event) {
            stateKey
                .getState(view.state)
                .update(view.state, view.domAtPos.bind(view), true);
            return false;
        },
        handleDOMEvents: {
            focus: function (view, event) {
                stateKey.getState(view.state).updateEditorFocused(true);
                return false;
            },
            blur: function (view, event) {
                var pluginState = stateKey.getState(view.state);
                pluginState.updateEditorFocused(false);
                pluginState.update(view.state, view.domAtPos.bind(view), true);
                return false;
            },
        },
    },
});
var plugins = function (schema) {
    return [plugin, keymapPlugin(schema)].filter(function (plugin) { return !!plugin; });
};
export default plugins;
//# sourceMappingURL=main.js.map