import * as tslib_1 from "tslib";
import { Plugin, PluginKey } from 'prosemirror-state';
import ExtensionNodeView from './nodeviews/extension';
import { setExtensionElement } from './actions';
import { getExtensionNode } from './utils';
export var pluginKey = new PluginKey('extensionPlugin');
export default function (dispatch, providerFactory, extensionHandlers) {
    return new Plugin({
        state: {
            init: function () { return ({ element: null }); },
            apply: function (tr, state, prevState, nextState) {
                var meta = tr.getMeta(pluginKey);
                if (meta) {
                    var newState = tslib_1.__assign({}, state, meta);
                    dispatch(pluginKey, newState);
                    return newState;
                }
                return state;
            },
        },
        view: function () {
            return {
                update: function (view) {
                    var state = view.state, dispatch = view.dispatch;
                    var element = pluginKey.getState(state).element;
                    if (element &&
                        (!document.body.contains(element) || !getExtensionNode(state))) {
                        setExtensionElement(null)(state, dispatch);
                    }
                },
            };
        },
        key: pluginKey,
        props: {
            nodeViews: {
                extension: ExtensionNodeView(providerFactory, extensionHandlers),
                bodiedExtension: ExtensionNodeView(providerFactory, extensionHandlers),
                inlineExtension: ExtensionNodeView(providerFactory, extensionHandlers),
            },
        },
    });
};
//# sourceMappingURL=plugin.js.map