import * as tslib_1 from "tslib";
import * as React from 'react';
import { browser } from '@atlaskit/editor-common';
import CrossIcon from '@atlaskit/icon/glyph/cross';
import Modal from '@atlaskit/modal-dialog';
import { Header, Footer, ContentWrapper, Line, Content, ColumnRight, ColumnLeft, Row, CodeSm, CodeMd, CodeLg, Title, } from './styles';
import * as keymaps from '../../../keymaps';
import ToolbarButton from '../../../ui/ToolbarButton';
import { closeHelpCommand } from '../';
// tslint:disable-next-line:variable-name
var AkModalDialog = Modal;
export var formatting = [
    {
        name: 'Bold',
        type: 'strong',
        keymap: function () { return keymaps.toggleBold; },
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeLg, null, "**Bold**"))); },
    },
    {
        name: 'Italic',
        type: 'em',
        keymap: function () { return keymaps.toggleItalic; },
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeLg, null, "*Italic*"))); },
    },
    {
        name: 'Underline',
        type: 'underline',
        keymap: function () { return keymaps.toggleUnderline; },
    },
    {
        name: 'Strikethrough',
        type: 'strike',
        keymap: function () { return keymaps.toggleStrikethrough; },
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeLg, null, "~~strikethrough~~"))); },
    },
    {
        name: 'Heading 1',
        type: 'heading',
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeSm, null, "#"),
            " ",
            React.createElement(CodeLg, null, "space"))); },
    },
    {
        name: 'Heading 2',
        type: 'heading',
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeLg, null, "##"),
            " ",
            React.createElement(CodeLg, null, "space"))); },
    },
    {
        name: 'Numbered list',
        type: 'orderedList',
        keymap: function () { return keymaps.toggleOrderedList; },
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeSm, null, "1."),
            " ",
            React.createElement(CodeLg, null, "space"))); },
    },
    {
        name: 'Bulleted list',
        type: 'bulletList',
        keymap: function () { return keymaps.toggleBulletList; },
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeSm, null, "*"),
            " ",
            React.createElement(CodeLg, null, "space"))); },
    },
    {
        name: 'Quote',
        type: 'blockquote',
        keymap: function () { return keymaps.toggleBlockQuote; },
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeLg, null, ">"),
            " ",
            React.createElement(CodeLg, null, "space"))); },
    },
    {
        name: 'Code block',
        type: 'codeBlock',
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeLg, null, "```"))); },
    },
    {
        name: 'Divider',
        type: 'rule',
        keymap: function () { return keymaps.insertRule; },
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeLg, null, "---"))); },
    },
    {
        name: 'Link',
        type: 'link',
        keymap: function (_a) {
            var appearance = _a.appearance;
            return appearance && appearance !== 'message' ? keymaps.addLink : undefined;
        },
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeLg, null, "[Link](http://a.com)"))); },
    },
    {
        name: 'Code',
        type: 'code',
        keymap: function () { return keymaps.toggleCode; },
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeLg, null, "`code`"))); },
    },
    {
        name: 'Actions',
        type: 'taskItem',
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeSm, null, "[]"),
            " ",
            React.createElement(CodeLg, null, "space"))); },
    },
    {
        name: 'Decisions',
        type: 'decisionItem',
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeSm, null, "<>"),
            " ",
            React.createElement(CodeLg, null, "space"))); },
    },
    {
        name: 'Emoji',
        type: 'emoji',
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeLg, null, ":"))); },
    },
    {
        name: 'Mention',
        type: 'mention',
        autoFormatting: function () { return (React.createElement("span", null,
            React.createElement(CodeLg, null, "@"))); },
    },
];
var otherFormatting = [
    {
        name: 'Clear formatting',
        type: 'clearFormatting',
        keymap: function () { return keymaps.clearFormatting; },
    },
    {
        name: 'Undo',
        type: 'undo',
        keymap: function () { return keymaps.undo; },
    },
    {
        name: 'Redo',
        type: 'redo',
        keymap: function () { return keymaps.redo; },
    },
];
export var getSupportedFormatting = function (schema) {
    var supportedBySchema = formatting.filter(function (format) { return schema.nodes[format.type] || schema.marks[format.type]; });
    return supportedBySchema.concat(otherFormatting);
};
export var getComponentFromKeymap = function (keymap) {
    var shortcut = keymap[browser.mac ? 'mac' : 'windows'];
    var keyParts = shortcut.replace(/\-(?=.)/g, ' + ').split(' ');
    return (React.createElement("span", null, keyParts.map(function (part, index) {
        if (part === '+') {
            return React.createElement("span", { key: shortcut + "-" + index }, ' + ');
        }
        else if (part === 'Cmd') {
            return React.createElement(CodeSm, { key: shortcut + "-" + index }, "\u2318");
        }
        else if (['ctrl', 'alt', 'opt', 'shift'].indexOf(part.toLowerCase()) >= 0) {
            return React.createElement(CodeMd, { key: shortcut + "-" + index }, part);
        }
        return (React.createElement(CodeSm, { key: shortcut + "-" + index }, part.toUpperCase()));
    })));
};
// tslint:disable-next-line:variable-name
var ModalHeader = function (_a) {
    var onClose = _a.onClose, showKeyline = _a.showKeyline;
    return (React.createElement(Header, { showKeyline: showKeyline },
        "Keyboard shortcuts",
        React.createElement("div", null,
            React.createElement(ToolbarButton, { onClick: onClose, title: "Close help dialog", spacing: "compact", iconBefore: React.createElement(CrossIcon, { label: "Close help dialog", size: "medium" }) }))));
};
// tslint:disable-next-line:variable-name
var ModalFooter = function (_a) {
    var onClose = _a.onClose, showKeyline = _a.showKeyline;
    return (React.createElement(Footer, { showKeyline: showKeyline },
        "Press ",
        getComponentFromKeymap(keymaps.openHelp),
        " to quickly open this dialog at any time"));
};
var HelpDialog = /** @class */ (function (_super) {
    tslib_1.__extends(HelpDialog, _super);
    function HelpDialog(props) {
        var _this = _super.call(this, props) || this;
        _this.closeDialog = function () {
            var _a = _this.props.editorView, tr = _a.state.tr, dispatch = _a.dispatch;
            closeHelpCommand(tr, dispatch);
        };
        _this.handleEsc = function (e) {
            if (e.key === 'Escape' && _this.props.isVisible) {
                _this.closeDialog();
            }
        };
        var schema = _this.props.editorView.state.schema;
        _this.formatting = getSupportedFormatting(schema);
        return _this;
    }
    HelpDialog.prototype.componentDidMount = function () {
        document.addEventListener('keydown', this.handleEsc);
    };
    HelpDialog.prototype.componentWillUnmount = function () {
        document.removeEventListener('keydown', this.handleEsc);
    };
    HelpDialog.prototype.render = function () {
        var _this = this;
        if (!this.props.isVisible) {
            return null;
        }
        return (React.createElement(AkModalDialog, { width: "large", onClose: this.closeDialog, header: ModalHeader, footer: ModalFooter },
            React.createElement(ContentWrapper, null,
                React.createElement(Line, null),
                React.createElement(Content, null,
                    React.createElement(ColumnLeft, null,
                        React.createElement(Title, null, "Text Formatting"),
                        React.createElement("div", null, this.formatting
                            .filter(function (form) {
                            var keymap = form.keymap && form.keymap(_this.props);
                            return keymap && keymap[browser.mac ? 'mac' : 'windows'];
                        })
                            .map(function (form) { return (React.createElement(Row, { key: "textFormatting-" + form.name },
                            React.createElement("span", null, form.name),
                            getComponentFromKeymap(form.keymap({ appearance: _this.props.appearance })))); }))),
                    React.createElement(ColumnRight, null,
                        React.createElement(Title, null, "Markdown"),
                        React.createElement("div", null, this.formatting.map(function (form) {
                            return form.autoFormatting && (React.createElement(Row, { key: "autoFormatting-" + form.name },
                                React.createElement("span", null, form.name),
                                form.autoFormatting()));
                        })))))));
    };
    return HelpDialog;
}(React.Component));
export default HelpDialog;
//# sourceMappingURL=index.js.map