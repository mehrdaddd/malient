import * as tslib_1 from "tslib";
import * as React from 'react';
import { Component } from 'react';
import { CellSelection } from 'prosemirror-tables';
import { selectColumn, isTableSelected, findTable, getCellsInColumn, } from 'prosemirror-utils';
import { checkIfHeaderColumnEnabled, checkIfNumberColumnEnabled, } from '../../../utils';
import { ColumnContainer, ColumnInner, ColumnControlsButtonWrap, HeaderButton, } from './styles';
import { toolbarSize } from '../styles';
import { tableDeleteColumnButtonSize } from '../../styles';
import InsertColumnButton from './InsertColumnButton';
import DeleteColumnButton from './DeleteColumnButton';
import { findColumnSelection } from '../utils';
var ColumnControls = /** @class */ (function (_super) {
    tslib_1.__extends(ColumnControls, _super);
    function ColumnControls() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { dangerColumns: [] };
        _this.handleMouseDown = function (event) {
            event.preventDefault();
        };
        _this.selectColumns = function (columnIdxs) { return function (tr) {
            var cells = columnIdxs.reduce(function (acc, colIdx) {
                var colCells = getCellsInColumn(colIdx)(tr.selection);
                return colCells ? acc.concat(colCells) : acc;
            }, []);
            if (cells) {
                var $anchor = tr.doc.resolve(cells[0].pos);
                var $head = tr.doc.resolve(cells[cells.length - 1].pos);
                return tr.setSelection(new CellSelection($anchor, $head));
            }
        }; };
        _this.selectColumn = function (column) {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            dispatch(selectColumn(column)(state.tr));
        };
        _this.hoverColumns = function (columns, danger) {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            _this.setState({ dangerColumns: danger ? columns : [] });
            _this.props.hoverColumns(columns, danger)(state, dispatch);
        };
        _this.resetHoverSelection = function () {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            _this.setState({ dangerColumns: [] });
            _this.props.resetHoverSelection(state, dispatch);
        };
        _this.insertColumn = function (column) {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            _this.props.insertColumn(column)(state, dispatch);
        };
        return _this;
    }
    ColumnControls.prototype.createDeleteColumnButton = function (selection, offsetWidth, selectionWidth) {
        var _this = this;
        var selectedColIdxs = [];
        for (var i = 0; i < selection.count; i++) {
            selectedColIdxs.push(selection.startIdx + i);
        }
        return (React.createElement(DeleteColumnButton, { key: "delete", style: {
                left: offsetWidth + selectionWidth / 2 - tableDeleteColumnButtonSize / 2,
            }, onClick: function () { return _this.deleteColumns(selectedColIdxs); }, onMouseEnter: function () { return _this.hoverColumns(selectedColIdxs, true); }, onMouseLeave: function () { return _this.hoverColumns(selectedColIdxs); } }));
    };
    ColumnControls.prototype.createDeleteColumnButtonForSelection = function (selection, cols) {
        var selectionGroupOffset = 0;
        var selectionGroupWidth = 0;
        // find the cols before
        for (var i = 0; i < selection.startIdx; i++) {
            selectionGroupOffset += cols[i].offsetWidth;
        }
        // these are the selected col widths
        for (var i = selection.startIdx; i <= selection.endIdx; i++) {
            selectionGroupWidth += cols[i].offsetWidth;
        }
        return this.createDeleteColumnButton(selection, selectionGroupOffset, selectionGroupWidth);
    };
    ColumnControls.prototype.render = function () {
        var _this = this;
        var _a = this.props, state = _a.editorView.state, tableElement = _a.tableElement, isTableHovered = _a.isTableHovered, isTableInDanger = _a.isTableInDanger;
        if (!tableElement) {
            return null;
        }
        var tr = tableElement.querySelector('tr');
        if (!tr) {
            return null;
        }
        var cols = tr.children;
        var nodes = [];
        var tableHeight = tableElement.offsetHeight;
        var prevColWidths = 0;
        var selection = findColumnSelection(state, cols);
        var _loop_1 = function (i, len) {
            var onlyThisColumnSelected = selection.inSelection(i) &&
                !isTableSelected(state.selection) &&
                !selection.hasMultipleSelection;
            var isNumberColumn = checkIfNumberColumnEnabled(state)
                ? i === 0
                : false;
            var classNames = selection.inSelection(i) || isTableHovered ? ['active'] : [''];
            if (this_1.state.dangerColumns.indexOf(i) !== -1 || isTableInDanger) {
                classNames.push('danger');
            }
            nodes.push(React.createElement(ColumnControlsButtonWrap, { key: i, className: classNames.join(' ') + " table-column", style: { width: cols[i].offsetWidth + 1 }, onMouseDown: this_1.handleMouseDown },
                React.createElement(HeaderButton, { onMouseDown: function () { return _this.selectColumn(i); }, onMouseOver: function () { return _this.hoverColumns([i]); }, onMouseOut: this_1.resetHoverSelection }),
                !(i === 0 &&
                    checkIfNumberColumnEnabled(state) &&
                    checkIfHeaderColumnEnabled(state)) &&
                    !(selection.hasMultipleSelection && selection.frontOfSelection(i)) ? (React.createElement(InsertColumnButton, { onClick: function () { return _this.insertColumn(i + 1); }, lineMarkerHeight: tableHeight + toolbarSize })) : null), onlyThisColumnSelected && !isNumberColumn
                ? this_1.createDeleteColumnButton(selection, prevColWidths, cols[i].offsetWidth)
                : null);
            prevColWidths += cols[i].offsetWidth;
        };
        var this_1 = this;
        for (var i = 0, len = cols.length; i < len; i++) {
            _loop_1(i, len);
        }
        if (selection.hasMultipleSelection && !isTableSelected(state.selection)) {
            nodes.push(this.createDeleteColumnButtonForSelection(selection, cols));
        }
        return (React.createElement(ColumnContainer, null,
            React.createElement(ColumnInner, null, nodes)));
    };
    ColumnControls.prototype.deleteColumns = function (cols) {
        var _a = this.props.editorView, dispatch = _a.dispatch, state = _a.state;
        var table = findTable(state.selection);
        if (table &&
            cols.length &&
            table.node.attrs.isNumberColumnEnabled &&
            cols[0] === 0) {
            // select all except number column to remove cells
            dispatch(this.selectColumns(cols.slice(1))(state.tr));
            this.props.remove();
            // reselect the number column
            this.selectColumns(cols[0]);
        }
        else {
            // normal delete
            this.props.remove();
        }
        this.resetHoverSelection();
    };
    return ColumnControls;
}(Component));
export default ColumnControls;
//# sourceMappingURL=index.js.map