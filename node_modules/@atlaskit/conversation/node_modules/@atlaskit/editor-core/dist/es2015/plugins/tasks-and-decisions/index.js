import * as tslib_1 from "tslib";
import * as React from 'react';
import styled from 'styled-components';
import { decisionItem, decisionList, taskItem, taskList, } from '@atlaskit/editor-common';
import { createPlugin } from './pm-plugins/main';
import pastePlugin from './pm-plugins/paste-plugin';
import inputRulePlugin from './pm-plugins/input-rules';
import keymap from './pm-plugins/keymaps';
import ToolbarDecision from './ui/ToolbarDecision';
import ToolbarTask from './ui/ToolbarTask';
// tslint:disable-next-line:variable-name
var TaskDecisionToolbarGroup = styled.div(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  display: flex;\n"], ["\n  display: flex;\n"])));
var tasksAndDecisionsPlugin = {
    nodes: function () {
        return [
            { name: 'decisionList', node: decisionList, rank: 1800 },
            { name: 'decisionItem', node: decisionItem, rank: 1900 },
            { name: 'taskList', node: taskList, rank: 2000 },
            { name: 'taskItem', node: taskItem, rank: 2100 },
        ];
    },
    pmPlugins: function () {
        return [
            { rank: 50, plugin: function () { return pastePlugin(); } },
            {
                rank: 500,
                plugin: function (_a) {
                    var schema = _a.schema, props = _a.props, dispatch = _a.dispatch, providerFactory = _a.providerFactory;
                    var delegateAnalyticsEvent = props.delegateAnalyticsEvent;
                    return createPlugin({ delegateAnalyticsEvent: delegateAnalyticsEvent }, providerFactory);
                },
            },
            { rank: 510, plugin: function (_a) {
                    var schema = _a.schema;
                    return inputRulePlugin(schema);
                } },
            { rank: 9800, plugin: function (_a) {
                    var schema = _a.schema;
                    return keymap(schema);
                } },
        ];
    },
    secondaryToolbarComponent: function (_a) {
        var editorView = _a.editorView, disabled = _a.disabled;
        return (React.createElement(TaskDecisionToolbarGroup, null,
            React.createElement(ToolbarDecision, { editorView: editorView, isDisabled: disabled, isReducedSpacing: true }),
            React.createElement(ToolbarTask, { editorView: editorView, isDisabled: disabled, isReducedSpacing: true })));
    },
};
export default tasksAndDecisionsPlugin;
var templateObject_1;
//# sourceMappingURL=index.js.map