"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var styled_components_1 = require("styled-components");
var media_wrap_left_1 = require("@atlaskit/icon/glyph/editor/media-wrap-left");
var media_wrap_right_1 = require("@atlaskit/icon/glyph/editor/media-wrap-right");
var media_center_1 = require("@atlaskit/icon/glyph/editor/media-center");
var media_wide_1 = require("@atlaskit/icon/glyph/editor/media-wide");
var media_full_width_1 = require("@atlaskit/icon/glyph/editor/media-full-width");
var remove_1 = require("@atlaskit/icon/glyph/editor/remove");
var editor_common_1 = require("@atlaskit/editor-common");
var util_shared_styles_1 = require("@atlaskit/util-shared-styles");
var ToolbarButton_1 = require("../../../../ui/ToolbarButton");
var Separator_1 = require("../../../../ui/Separator");
var FloatingToolbar_1 = require("../../../../ui/FloatingToolbar");
var utils_1 = require("../../../../utils");
var icons = {
    'wrap-left': {
        icon: media_wrap_left_1.default,
        label: 'Align left',
    },
    center: {
        icon: media_center_1.default,
        label: 'Align center',
    },
    'wrap-right': {
        icon: media_wrap_right_1.default,
        label: 'Align right',
    },
    wide: {
        icon: media_wide_1.default,
        label: 'Wide',
    },
    'full-width': {
        icon: media_full_width_1.default,
        label: 'Full width',
    },
};
var ToolbarButton = styled_components_1.default(ToolbarButton_1.default)(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  width: 24px;\n  padding: 0;\n  margin: 0 2px;\n"], ["\n  width: 24px;\n  padding: 0;\n  margin: 0 2px;\n"])));
var Separator = styled_components_1.default(Separator_1.default)(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["\n  margin: 2px 6px;\n"], ["\n  margin: 2px 6px;\n"])));
// `line-height: 1` to fix extra 1px height from toolbar wrapper
var FloatingToolbar = styled_components_1.default(FloatingToolbar_1.default)(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["\n  & > div {\n    line-height: 1;\n  }\n  & > div:first-child > button {\n    margin-left: 0;\n  }\n  & > div:last-child > button {\n    margin-right: 0;\n  }\n"], ["\n  & > div {\n    line-height: 1;\n  }\n  & > div:first-child > button {\n    margin-left: 0;\n  }\n  & > div:last-child > button {\n    margin-right: 0;\n  }\n"])));
var ToolbarButtonDestructive = styled_components_1.default(ToolbarButton)(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["\n  &:hover {\n    color: ", " !important;\n  }\n  &:active {\n    color: ", " !important;\n  }\n  &[disabled]:hover {\n    color: ", " !important;\n  }\n"], ["\n  &:hover {\n    color: ", " !important;\n  }\n  &:active {\n    color: ", " !important;\n  }\n  &[disabled]:hover {\n    color: ", " !important;\n  }\n"])), util_shared_styles_1.akColorR300, util_shared_styles_1.akColorR400, util_shared_styles_1.akColorN70);
var MediaSingleEdit = /** @class */ (function (_super) {
    tslib_1.__extends(MediaSingleEdit, _super);
    function MediaSingleEdit() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { layout: 'center', allowBreakout: true, allowLayout: true };
        _this.handleRemove = function () {
            var pluginState = _this.props.pluginState;
            pluginState.removeSelectedMediaNode();
        };
        _this.handlePluginStateChange = function (pluginState) {
            var target = pluginState.element, layout = pluginState.layout;
            var node = pluginState.selectedMediaNode();
            var allowBreakout = !!(node &&
                node.attrs &&
                node.attrs.width > editor_common_1.akEditorFullPageMaxWidth);
            var allowLayout = !!pluginState.isLayoutSupported();
            _this.setState({ target: target, layout: layout, allowBreakout: allowBreakout, allowLayout: allowLayout });
        };
        return _this;
    }
    MediaSingleEdit.prototype.componentDidMount = function () {
        this.props.pluginState.subscribe(this.handlePluginStateChange);
    };
    MediaSingleEdit.prototype.componentWillUnmount = function () {
        this.props.pluginState.unsubscribe(this.handlePluginStateChange);
    };
    MediaSingleEdit.prototype.render = function () {
        var _this = this;
        var _a = this.state, target = _a.target, selectedLayout = _a.layout, allowBreakout = _a.allowBreakout, allowLayout = _a.allowLayout;
        if (target &&
            !utils_1.closestElement(target, 'li') &&
            !utils_1.closestElement(target, 'table')) {
            return (React.createElement(FloatingToolbar, { target: target, offset: [0, 12], fitHeight: 32 },
                Object.keys(icons).map(function (layout, index) {
                    // Don't render Wide and Full width button for image smaller than editor content width
                    if (index > 2 && !allowBreakout) {
                        return;
                    }
                    var Icon = icons[layout].icon;
                    var label = icons[layout].label;
                    return (React.createElement(ToolbarButton, { spacing: "compact", key: index, disabled: !allowLayout, selected: layout === selectedLayout, onClick: _this.handleChangeLayout.bind(_this, layout), title: label, iconBefore: React.createElement(Icon, { label: "Change layout to " + label }) }));
                }),
                React.createElement(Separator, null),
                React.createElement(ToolbarButtonDestructive, { spacing: "compact", onClick: this.handleRemove, title: "Remove image", iconBefore: React.createElement(remove_1.default, { label: "Remove image" }) })));
        }
        else {
            return null;
        }
    };
    MediaSingleEdit.prototype.handleChangeLayout = function (layout) {
        this.props.pluginState.align(layout);
    };
    return MediaSingleEdit;
}(React.Component));
exports.default = MediaSingleEdit;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=index.js.map