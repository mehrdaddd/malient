/// <reference types="react" />
import * as React from 'react';
import { Component } from 'react';
import { CardDimensions, CardEventHandler, CardAction } from '@atlaskit/media-card';
import { Context, ImageResizeMode } from '@atlaskit/media-core';
import { MediaType, MediaBaseAttributes, CardEventClickHandler, ImageStatus, ImageLoaderProps, ImageLoaderState } from '@atlaskit/editor-common';
import { MediaProvider, MediaStateManager, MediaState } from '../../pm-plugins/main';
export declare type Appearance = 'small' | 'image' | 'horizontal' | 'square';
export declare const MEDIA_HEIGHT = 125;
export declare const FILE_WIDTH = 156;
export interface Props extends Partial<MediaBaseAttributes> {
    type: MediaType;
    mediaProvider?: Promise<MediaProvider>;
    cardDimensions?: CardDimensions;
    onClick?: CardEventClickHandler;
    onDelete?: CardEventHandler;
    resizeMode?: ImageResizeMode;
    appearance?: Appearance;
    stateManagerFallback?: MediaStateManager;
    selected?: boolean;
    tempId?: string;
    url?: string;
    imageStatus?: ImageStatus;
    disableOverlay?: boolean;
}
export interface State extends MediaState {
    mediaProvider?: MediaProvider;
    viewContext?: Context;
    linkCreateContext?: Context;
}
export declare class MediaComponentInternal extends Component<Props, State> {
    private destroyed;
    static defaultProps: {
        selected: boolean;
    };
    state: State;
    componentWillMount(): void;
    componentWillReceiveProps(nextProps: Props): void;
    componentWillUnmount(): void;
    render(): JSX.Element | null;
    private renderLoadingCard(mediaItemType, url?);
    private renderLink();
    private renderFile();
    private renderPublicFile();
    private renderTemporaryFile();
    private renderExternal();
    private handleMediaStateChange;
    private handleMediaProvider;
    private setContext;
    private readonly resizeMode;
}
export declare const createDeleteAction: (eventHander: CardEventHandler) => CardAction;
declare const _default: new (props?: (Props & ImageLoaderProps) | undefined, context?: any) => {
    state: ImageLoaderState;
    img: HTMLImageElement | null;
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: ImageLoaderProps): void;
    componentWillUnmount(): void;
    fetchImage({url}: ImageLoaderProps): void;
    onLoad: () => void;
    onError: () => void;
    render(): JSX.Element;
    setState<K extends "imageStatus">(f: (prevState: ImageLoaderState, props: Props & ImageLoaderProps) => Pick<ImageLoaderState, K>, callback?: (() => any) | undefined): void;
    setState<K extends "imageStatus">(state: Pick<ImageLoaderState, K>, callback?: (() => any) | undefined): void;
    forceUpdate(callBack?: (() => any) | undefined): void;
    props: Readonly<{
        children?: React.ReactNode;
    }> & Readonly<Props & ImageLoaderProps>;
    context: any;
    refs: {
        [key: string]: React.ReactInstance;
    };
};
export default _default;
