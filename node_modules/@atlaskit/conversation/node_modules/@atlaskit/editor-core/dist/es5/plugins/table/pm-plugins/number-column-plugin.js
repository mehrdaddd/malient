"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prosemirror_state_1 = require("prosemirror-state");
var prosemirror_tables_1 = require("prosemirror-tables");
var prosemirror_view_1 = require("prosemirror-view");
var prosemirror_utils_1 = require("prosemirror-utils");
var utils_1 = require("../utils");
exports.pluginKey = new prosemirror_state_1.PluginKey('tableNumberColumnPlugin');
var plugin = new prosemirror_state_1.Plugin({
    state: {
        init: function () { return ({
            decorationSet: prosemirror_view_1.DecorationSet.empty,
        }); },
        apply: function (tr, state) { return state; },
    },
    key: exports.pluginKey,
    props: {
        // disable number column cells from editing
        decorations: function (state) { return utils_1.createNumberColumnDecorationSet(state); },
    },
    // adjust number column on each table modification
    appendTransaction: function (transactions, oldState, newState) {
        var table = prosemirror_utils_1.findTable(newState.selection);
        if (table &&
            table.node.attrs.isNumberColumnEnabled &&
            transactions.some(function (transaction) { return transaction.docChanged; }) &&
            // ignore the transaction that enables number column (otherwise it goes into infinite loop)
            !transactions.some(function (transaction) { return transaction.getMeta(exports.pluginKey); })) {
            var map = prosemirror_tables_1.TableMap.get(table.node);
            var start = prosemirror_utils_1.findTable(newState.selection).pos;
            var tr = newState.tr;
            var _a = newState.schema.nodes, tableHeader = _a.tableHeader, paragraph = _a.paragraph;
            var increment = table.node.child(0).child(0).type === tableHeader ? 0 : 1;
            var updated = false;
            for (var i = 0; i < table.node.childCount; i++) {
                var cell = table.node.child(i).child(0);
                var textContent = "" + (i + increment);
                if (cell.type === tableHeader) {
                    continue;
                }
                var from = tr.mapping.map(start + map.map[i * map.width]);
                tr.replaceWith(from + 1, from + cell.nodeSize, paragraph.create({}, newState.schema.text(textContent)));
                updated = true;
            }
            if (updated) {
                return tr;
            }
        }
    },
});
exports.default = plugin;
//# sourceMappingURL=number-column-plugin.js.map