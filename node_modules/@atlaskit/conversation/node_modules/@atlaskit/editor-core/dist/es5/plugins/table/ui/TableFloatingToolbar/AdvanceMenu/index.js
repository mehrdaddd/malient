"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var prosemirror_tables_1 = require("prosemirror-tables");
var more_1 = require("@atlaskit/icon/glyph/editor/more");
var DropdownMenu_1 = require("../../../../../ui/DropdownMenu");
var analytics_1 = require("../../../../../analytics");
var utils_1 = require("../../../utils");
var styles_1 = require("../styles");
var AdvanceMenu = /** @class */ (function (_super) {
    tslib_1.__extends(AdvanceMenu, _super);
    function AdvanceMenu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isOpen: false,
        };
        _this.createItems = function () {
            var _a = _this.props, allowMergeCells = _a.allowMergeCells, state = _a.editorView.state;
            var items = [];
            if (allowMergeCells) {
                items.push({
                    content: 'Merge cells',
                    value: { name: 'merge' },
                    isDisabled: !prosemirror_tables_1.mergeCells(state) || utils_1.checkIfNumberColumnCellsSelected(state),
                });
                items.push({
                    content: 'Split cell',
                    value: { name: 'split' },
                    isDisabled: !prosemirror_tables_1.splitCell(state),
                });
            }
            return items.length ? [{ items: items }] : null;
        };
        _this.onItemActivated = function (_a) {
            var item = _a.item;
            var _b = _this.props.editorView, state = _b.state, dispatch = _b.dispatch;
            switch (item.value.name) {
                case 'merge':
                    analytics_1.analyticsService.trackEvent('atlassian.editor.format.table.merge.button');
                    prosemirror_tables_1.mergeCells(state, dispatch);
                    _this.toggleOpen();
                    break;
                case 'split':
                    analytics_1.analyticsService.trackEvent('atlassian.editor.format.table.split.button');
                    prosemirror_tables_1.splitCell(state, dispatch);
                    _this.toggleOpen();
                    break;
            }
        };
        _this.toggleOpen = function () {
            _this.handleOpenChange({ isOpen: !_this.state.isOpen });
        };
        _this.handleOpenChange = function (_a) {
            var isOpen = _a.isOpen;
            _this.setState({ isOpen: isOpen });
        };
        return _this;
    }
    AdvanceMenu.prototype.render = function () {
        var isOpen = this.state.isOpen;
        var mountPoint = this.props.mountPoint;
        var items = this.createItems();
        if (!items) {
            return null;
        }
        return (React.createElement(DropdownMenu_1.default, { mountTo: mountPoint, items: items, isOpen: isOpen, onOpenChange: this.handleOpenChange, onItemActivated: this.onItemActivated, fitHeight: 188, fitWidth: 136 },
            React.createElement(styles_1.ToolbarButton, { spacing: "compact", selected: isOpen, title: "Toggle advance menu", onClick: this.toggleOpen, iconBefore: React.createElement(more_1.default, { label: "Toggle advance menu" }) })));
    };
    return AdvanceMenu;
}(react_1.Component));
exports.default = AdvanceMenu;
//# sourceMappingURL=index.js.map