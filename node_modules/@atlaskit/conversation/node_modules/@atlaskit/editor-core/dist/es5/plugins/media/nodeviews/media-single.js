"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var editor_common_1 = require("@atlaskit/editor-common");
var main_1 = require("../pm-plugins/main");
var DEFAULT_WIDTH = 250;
var DEFAULT_HEIGHT = 200;
var MediaSingleNode = /** @class */ (function (_super) {
    tslib_1.__extends(MediaSingleNode, _super);
    function MediaSingleNode(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            progress: 0,
        };
        _this.handleMediaUpdate = function (state) {
            _this.setState({
                progress: state.progress || 0,
            });
        };
        _this.getChild = function (props) {
            return React.Children.only(React.Children.toArray(props.children)[0]);
        };
        _this.onExternalImageLoaded = function (_a) {
            var width = _a.width, height = _a.height;
            _this.setState({
                width: width,
                height: height,
            }, function () {
                _this.forceUpdate();
            });
        };
        _this.child = _this.getChild(props);
        _this.mediaPluginState = main_1.stateKey.getState(_this.props.view.state);
        return _this;
    }
    MediaSingleNode.prototype.componentWillReceiveProps = function (props) {
        this.child = this.getChild(props);
    };
    MediaSingleNode.prototype.componentDidMount = function () {
        var __key = this.child.props.node.attrs.__key;
        this.mediaPluginState.stateManager.on(__key, this.handleMediaUpdate);
    };
    MediaSingleNode.prototype.componentWillUnmount = function () {
        var __key = this.child.props.node.attrs.__key;
        this.mediaPluginState.stateManager.off(__key, this.handleMediaUpdate);
    };
    MediaSingleNode.prototype.componentDidUpdate = function () {
        var layout = this.props.node.attrs.layout;
        this.mediaPluginState.updateLayout(layout);
    };
    MediaSingleNode.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var nextChild = this.getChild(nextProps);
        var width = this.child.props.node.attrs.width;
        var nextWidth = nextChild.props.node.attrs.width;
        var node = this.props.node;
        var layout = node.attrs.layout;
        return (layout === 'wide' ||
            layout === 'full-width' ||
            this.state.progress !== nextState.progress ||
            node !== nextProps.node ||
            width !== nextWidth);
    };
    MediaSingleNode.prototype.render = function () {
        var layout = this.props.node.attrs.layout;
        var progress = this.state.progress;
        var _a = this.child.props.node.attrs, width = _a.width, height = _a.height, type = _a.type;
        if (type === 'external') {
            var _b = this.state, stateWidth = _b.width, stateHeight = _b.height;
            if (width === null) {
                width = stateWidth || DEFAULT_WIDTH;
            }
            if (height === null) {
                height = stateHeight || DEFAULT_HEIGHT;
            }
        }
        return (React.createElement(editor_common_1.MediaSingle, { layout: layout, width: width, height: height, containerWidth: this.props.width, isLoading: !width }, React.cloneElement(this.child, {
            cardDimensions: {
                width: '100%',
                height: '100%',
            },
            isMediaSingle: true,
            progress: progress,
            onExternalImageLoaded: this.onExternalImageLoaded,
        })));
    };
    return MediaSingleNode;
}(react_1.Component));
exports.default = MediaSingleNode;
//# sourceMappingURL=media-single.js.map