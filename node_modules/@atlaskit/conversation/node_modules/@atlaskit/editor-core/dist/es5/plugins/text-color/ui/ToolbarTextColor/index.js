"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var prosemirror_state_1 = require("prosemirror-state");
var chevron_down_1 = require("@atlaskit/icon/glyph/chevron-down");
var text_color_1 = require("@atlaskit/icon/glyph/editor/text-color");
var analytics_1 = require("../../../../analytics");
var ToolbarButton_1 = require("../../../../ui/ToolbarButton");
var ColorPalette_1 = require("../../../../ui/ColorPalette");
var Dropdown_1 = require("../../../../ui/Dropdown");
var styles_1 = require("./styles");
exports.stateKey = new prosemirror_state_1.PluginKey('textColorPlugin');
var ToolbarTextColor = /** @class */ (function (_super) {
    tslib_1.__extends(ToolbarTextColor, _super);
    function ToolbarTextColor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isOpen: false,
        };
        _this.toggleTextColor = function (color) {
            var _a = _this.props, pluginState = _a.pluginState, editorView = _a.editorView;
            if (!_this.state.disabled) {
                _this.toggleOpen();
                if (color === pluginState.defaultColor) {
                    return pluginState.removeTextColor(editorView.state, editorView.dispatch);
                }
                return pluginState.toggleTextColor(editorView.state, editorView.dispatch, color);
            }
            return false;
        };
        _this.toggleOpen = function () {
            _this.handleOpenChange({ isOpen: !_this.state.isOpen });
        };
        _this.handleOpenChange = function (_a) {
            var isOpen = _a.isOpen;
            _this.setState({ isOpen: isOpen });
        };
        _this.handlePluginStateChange = function (pluginState) {
            var color = pluginState.color, disabled = pluginState.disabled;
            _this.setState({ color: color, disabled: disabled });
        };
        _this.getIconColor = function () {
            var _a = _this.state, isOpen = _a.isOpen, color = _a.color;
            var isDefaultColor = _this.props.pluginState.defaultColor === color;
            return isOpen || isDefaultColor ? undefined : color;
        };
        return _this;
    }
    ToolbarTextColor.prototype.componentDidMount = function () {
        this.props.pluginState.subscribe(this.handlePluginStateChange);
    };
    ToolbarTextColor.prototype.componentWillUnmount = function () {
        this.props.pluginState.unsubscribe(this.handlePluginStateChange);
    };
    ToolbarTextColor.prototype.render = function () {
        var _a = this.state, disabled = _a.disabled, isOpen = _a.isOpen, color = _a.color;
        var _b = this.props, popupsMountPoint = _b.popupsMountPoint, popupsBoundariesElement = _b.popupsBoundariesElement, popupsScrollableElement = _b.popupsScrollableElement, isReducedSpacing = _b.isReducedSpacing, _c = _b.pluginState, palette = _c.palette, borderColorPalette = _c.borderColorPalette;
        return (React.createElement(styles_1.Wrapper, null,
            React.createElement(Dropdown_1.default, { mountTo: popupsMountPoint, boundariesElement: popupsBoundariesElement, scrollableElement: popupsScrollableElement, isOpen: isOpen && !disabled && !this.props.disabled, onOpenChange: this.handleOpenChange, fitWidth: 242, fitHeight: 80, trigger: React.createElement(ToolbarButton_1.default, { spacing: isReducedSpacing ? 'none' : 'default', disabled: disabled || this.props.disabled, selected: isOpen, title: "Text color", onClick: this.toggleOpen, iconBefore: React.createElement(styles_1.TriggerWrapper, null,
                        React.createElement(text_color_1.default, { primaryColor: this.getIconColor(), label: "Text color" }),
                        React.createElement(styles_1.ExpandIconWrapper, null,
                            React.createElement(chevron_down_1.default, { label: "expand-dropdown-menu" }))) }) },
                React.createElement(ColorPalette_1.default, { palette: palette, onClick: this.toggleTextColor, selectedColor: color, borderColors: borderColorPalette })),
            React.createElement(styles_1.Separator, null)));
    };
    tslib_1.__decorate([
        analytics_1.analyticsDecorator('atlassian.editor.format.textcolor.button')
    ], ToolbarTextColor.prototype, "toggleTextColor", void 0);
    return ToolbarTextColor;
}(react_1.PureComponent));
exports.default = ToolbarTextColor;
//# sourceMappingURL=index.js.map