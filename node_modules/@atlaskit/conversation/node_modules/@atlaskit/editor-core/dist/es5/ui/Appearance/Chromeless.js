"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var styled_components_1 = require("styled-components");
var util_shared_styles_1 = require("@atlaskit/util-shared-styles");
var PluginSlot_1 = require("../PluginSlot");
var WithPluginState_1 = require("../WithPluginState");
var ContentStyles_1 = require("../ContentStyles");
var max_content_size_1 = require("../../plugins/max-content-size");
var pulseBackground = styled_components_1.keyframes(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  50% {\n    background-color: ", ";\n  }\n"], ["\n  50% {\n    background-color: ", ";\n  }\n"])), util_shared_styles_1.akColorR100);
var pulseBackgroundReverse = styled_components_1.keyframes(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["\n  0% {\n    background-color: ", ";\n  }\n  50% {\n    background-color: auto;\n  }\n  100% {\n    background-color: ", ";\n  }\n"], ["\n  0% {\n    background-color: ", ";\n  }\n  50% {\n    background-color: auto;\n  }\n  100% {\n    background-color: ", ";\n  }\n"])), util_shared_styles_1.akColorR100, util_shared_styles_1.akColorR100);
// tslint:disable-next-line:variable-name
var ChromelessEditor = styled_components_1.default.div(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["\n  line-height: 20px;\n  height: auto;\n  min-height: 30px;\n  ", " overflow-x: hidden;\n  overflow-y: auto;\n\n  max-width: inherit;\n  box-sizing: border-box;\n  word-wrap: break-word;\n  animation: ", ";\n\n  &.-flash {\n    animation: 0.25s ease-in-out ", ";\n  }\n\n  div > .ProseMirror {\n    outline: none;\n    white-space: pre-wrap;\n    padding: 0;\n    margin: 0;\n  }\n"], ["\n  line-height: 20px;\n  height: auto;\n  min-height: 30px;\n  ",
    " overflow-x: hidden;\n  overflow-y: auto;\n\n  max-width: inherit;\n  box-sizing: border-box;\n  word-wrap: break-word;\n  animation: ",
    ";\n\n  &.-flash {\n    animation: 0.25s ease-in-out ", ";\n  }\n\n  div > .ProseMirror {\n    outline: none;\n    white-space: pre-wrap;\n    padding: 0;\n    margin: 0;\n  }\n"])), function (props) {
    return props.maxHeight
        ? 'max-height: ' + props.maxHeight + 'px;'
        : '';
}, function (props) {
    return props.isMaxContentSizeReached
        ? ".25s ease-in-out " + pulseBackground
        : 'none';
}, pulseBackgroundReverse);
ChromelessEditor.displayName = 'ChromelessEditor';
// tslint:disable-next-line:variable-name
var ContentArea = styled_components_1.default(ContentStyles_1.default)(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject([""], [""])));
ContentArea.displayName = 'ContentArea';
var Editor = /** @class */ (function (_super) {
    tslib_1.__extends(Editor, _super);
    function Editor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.flashToggle = false;
        _this.appearance = 'chromeless';
        _this.renderChrome = function (_a) {
            var maxContentSize = _a.maxContentSize;
            var _b = _this.props, editorDOMElement = _b.editorDOMElement, editorView = _b.editorView, editorActions = _b.editorActions, eventDispatcher = _b.eventDispatcher, providerFactory = _b.providerFactory, contentComponents = _b.contentComponents, customContentComponents = _b.customContentComponents, maxHeight = _b.maxHeight, popupsMountPoint = _b.popupsMountPoint, popupsBoundariesElement = _b.popupsBoundariesElement, popupsScrollableElement = _b.popupsScrollableElement, disabled = _b.disabled;
            var maxContentSizeReached = maxContentSize && maxContentSize.maxContentSizeReached;
            _this.flashToggle = maxContentSizeReached && !_this.flashToggle;
            return (React.createElement(ChromelessEditor, { className: _this.flashToggle ? '-flash' : '', isMaxContentSizeReached: maxContentSizeReached, maxHeight: maxHeight },
                React.createElement(ContentArea, null,
                    customContentComponents,
                    React.createElement(PluginSlot_1.default, { editorView: editorView, editorActions: editorActions, eventDispatcher: eventDispatcher, providerFactory: providerFactory, appearance: _this.appearance, items: contentComponents, popupsMountPoint: popupsMountPoint, popupsBoundariesElement: popupsBoundariesElement, popupsScrollableElement: popupsScrollableElement, disabled: !!disabled }),
                    editorDOMElement)));
        };
        return _this;
    }
    Editor.prototype.render = function () {
        return (React.createElement(WithPluginState_1.default, { plugins: { maxContentSize: max_content_size_1.pluginKey }, render: this.renderChrome }));
    };
    Editor.displayName = 'ChromelessEditorAppearance';
    return Editor;
}(React.Component));
exports.default = Editor;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=Chromeless.js.map