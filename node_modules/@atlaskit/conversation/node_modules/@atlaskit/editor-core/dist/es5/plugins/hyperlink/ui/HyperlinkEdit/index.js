"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var open_1 = require("@atlaskit/icon/glyph/editor/open");
var unlink_1 = require("@atlaskit/icon/glyph/editor/unlink");
var React = require("react");
var react_1 = require("react");
var cursor_1 = require("../../../fake-text-cursor/cursor");
var PanelTextInput_1 = require("../../../../ui/PanelTextInput");
var ToolbarButton_1 = require("../../../../ui/ToolbarButton");
var FloatingToolbar_1 = require("../../../../ui/FloatingToolbar");
var Separator_1 = require("../../../../ui/Separator");
var utils_1 = require("../../utils");
var RecentSearch_1 = require("../RecentSearch");
var TEXT_NODE = 3;
var floatingStyleOverride = {
    minHeight: '40px',
    height: 'initial',
    'margin-top': '6px',
};
var HyperlinkEdit = /** @class */ (function (_super) {
    tslib_1.__extends(HyperlinkEdit, _super);
    function HyperlinkEdit() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            unlinkable: true,
            editorFocused: false,
            inputActive: false,
            active: false,
            showToolbarPanel: false,
        };
        _this.setInputActive = function () {
            _this.setState({
                inputActive: true,
            });
            if (_this.state.editorFocused) {
                var editorView = _this.props.editorView;
                cursor_1.addFakeTextCursor(editorView.state, editorView.dispatch);
            }
        };
        _this.resetInputActive = function () {
            _this.setState({
                inputActive: false,
            });
            if (!_this.state.editorFocused) {
                var editorView = _this.props.editorView;
                cursor_1.removeFakeTextCursor(editorView.state, editorView.dispatch);
            }
        };
        _this.posHasMark = function (pos, markType) {
            return pos.marks().some(function (mark) { return mark.type === markType; });
        };
        /**
         * Dynamic offsets for hyperlink editing popup
         * because we need to show it next to cursor even without clear target for popup.
         */
        _this.adjustPosition = function (position) {
            var inputActive = _this.state.inputActive;
            var pluginState = _this.props.pluginState;
            if (!pluginState.active || inputActive) {
                var editorRoot = _this.getOffsetParent();
                if (!editorRoot) {
                    return position;
                }
                var coordinates = pluginState.getCoordinates(_this.props.editorView, editorRoot);
                if (position.left) {
                    position.left = Math.round(coordinates.left);
                }
                if (position.top) {
                    position.top = Math.round(coordinates.top);
                }
                if (position.bottom) {
                    position.bottom = Math.round(coordinates.bottom);
                }
                if (position.right) {
                    position.right = Math.round(coordinates.right);
                }
            }
            return position;
        };
        // ED-1323 `onBlur` covers all the use cases (click outside, tab, etc) for this issue
        _this.handleOnBlur = function () {
            var _a = _this.props, editorView = _a.editorView, pluginState = _a.pluginState;
            var _b = _this.state, href = _b.href, text = _b.text;
            if (editorView.state.selection.empty && !pluginState.active) {
                pluginState.hideLinkPanel(editorView.state, editorView.dispatch);
            }
            else if (!href || href.length === 0) {
                pluginState.removeLink(editorView);
            }
            else {
                if (text && pluginState.text !== text) {
                    pluginState.updateLinkText(text, editorView);
                    _this.setState({ text: '' });
                }
                if (href && pluginState.href !== href) {
                    pluginState.updateLink({ href: href }, editorView);
                }
            }
            _this.resetInputActive();
        };
        _this.handleUnlink = function () {
            _this.props.pluginState.removeLink(_this.props.editorView);
        };
        _this.handlePluginStateChange = function (pluginState) {
            var inputActive = _this.state.inputActive;
            var hrefNotPreset = pluginState.active &&
                (!pluginState.href || pluginState.href.length === 0);
            _this.setState({
                active: pluginState.active,
                target: pluginState.element,
                activeElement: pluginState.activeElement,
                href: pluginState.href,
                oldText: pluginState.text,
                oldHref: pluginState.href,
                textInputValue: pluginState.text,
                editorFocused: pluginState.editorFocused,
                inputActive: hrefNotPreset || inputActive,
                showToolbarPanel: pluginState.showToolbarPanel,
            });
        };
        _this.updateHref = function (href) {
            _this.setState({ href: href });
        };
        _this.updateText = function (text) {
            _this.setState({ text: text });
        };
        _this.updateLinkText = function (text) {
            if (text && text.length > 0 && text !== _this.state.oldText) {
                var _a = _this.props, editorView = _a.editorView, pluginState = _a.pluginState;
                pluginState.updateLinkText(text, editorView);
                _this.setState({ text: '' });
            }
        };
        _this.updateLinkHref = function (href) {
            var _a = _this.props, editorView = _a.editorView, pluginState = _a.pluginState;
            if (_this.state.oldHref) {
                pluginState.updateLink({ href: href }, editorView);
            }
            else {
                pluginState.addLink({ href: href }, editorView);
            }
            editorView.focus();
        };
        return _this;
    }
    HyperlinkEdit.prototype.componentDidMount = function () {
        this.props.pluginState.subscribe(this.handlePluginStateChange);
    };
    HyperlinkEdit.prototype.componentWillUnmount = function () {
        this.props.pluginState.unsubscribe(this.handlePluginStateChange);
    };
    HyperlinkEdit.prototype.getOffsetParent = function () {
        return this.props.popupsMountPoint
            ? this.props.popupsMountPoint.offsetParent
            : this.props.editorView.dom.offsetParent;
    };
    HyperlinkEdit.prototype.getPopupTarget = function () {
        var editorView = this.props.editorView;
        var state = editorView.state;
        var node;
        var _a = state.selection, empty = _a.empty, $from = _a.$from, $to = _a.$to;
        var link = state.schema.marks.link;
        if (!empty && !this.posHasMark($from, link)) {
            for (var i = $from.pos; i <= $to.pos; i++) {
                if (this.posHasMark(state.doc.resolve(i), link)) {
                    node = editorView.domAtPos(i).node;
                }
            }
        }
        if (!node) {
            node = editorView.domAtPos(state.selection.$from.pos).node;
        }
        var activeElement = node;
        return activeElement.nodeType === TEXT_NODE
            ? activeElement.parentElement
            : activeElement;
    };
    HyperlinkEdit.prototype.render = function () {
        var _a = this.state, href = _a.href, oldHref = _a.oldHref, unlinkable = _a.unlinkable, active = _a.active, editorFocused = _a.editorFocused, inputActive = _a.inputActive, showToolbarPanel = _a.showToolbarPanel;
        var _b = this.props, popupsBoundariesElement = _b.popupsBoundariesElement, popupsMountPoint = _b.popupsMountPoint, activityProvider = _b.activityProvider;
        var renderRecentSearch = activityProvider && !oldHref;
        if ((active || showToolbarPanel) && (editorFocused || inputActive)) {
            var popupTarget = this.getPopupTarget();
            if (!popupTarget) {
                return null;
            }
            var showOpenButton = !!oldHref;
            var showUnlinkButton = unlinkable && active && oldHref;
            return (React.createElement(FloatingToolbar_1.default, { target: popupTarget, offset: [0, 3], fitHeight: renderRecentSearch ? 284 : 40, onPositionCalculated: this.adjustPosition, popupsBoundariesElement: popupsBoundariesElement, popupsMountPoint: popupsMountPoint, stylesOverride: floatingStyleOverride },
                showOpenButton && (React.createElement(ToolbarButton_1.default, { href: href, target: "_blank", iconBefore: React.createElement(open_1.default, { label: "Open link" }) })),
                showUnlinkButton && (React.createElement(ToolbarButton_1.default, { onClick: this.handleUnlink, iconBefore: React.createElement(unlink_1.default, { label: "Unlink" }) })),
                showUnlinkButton && React.createElement(Separator_1.default, null),
                this.renderInput()));
        }
        else {
            return null;
        }
    };
    HyperlinkEdit.prototype.renderInput = function () {
        var _a = this.state, href = _a.href, oldHref = _a.oldHref, text = _a.text, oldText = _a.oldText;
        var _b = this.props, editorView = _b.editorView, pluginState = _b.pluginState, activityProvider = _b.activityProvider;
        var normalizedOldText = oldText && utils_1.normalizeUrl(oldText);
        // insert new link with recently viewed dropdown
        if (activityProvider && !oldHref) {
            return (React.createElement(RecentSearch_1.default, { editorView: editorView, pluginState: pluginState, activityProvider: activityProvider }));
        }
        // edit link text
        if (normalizedOldText && href === normalizedOldText) {
            return (React.createElement(PanelTextInput_1.default, { placeholder: "Text to display", defaultValue: !text && href === normalizedOldText ? '' : text, onSubmit: this.updateLinkText, onChange: this.updateText, onMouseDown: this.setInputActive, onBlur: this.handleOnBlur, onCancel: this.handleOnBlur }));
        }
        // edit link href when text has not been set
        return (React.createElement(PanelTextInput_1.default, { placeholder: "Paste link", autoFocus: !href || href.length === 0, defaultValue: href, onSubmit: this.updateLinkHref, onChange: this.updateHref, onMouseDown: this.setInputActive, onBlur: this.handleOnBlur, onCancel: this.handleOnBlur }));
    };
    return HyperlinkEdit;
}(react_1.PureComponent));
exports.default = HyperlinkEdit;
//# sourceMappingURL=index.js.map