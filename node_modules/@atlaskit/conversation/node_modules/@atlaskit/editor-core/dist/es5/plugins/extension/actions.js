"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prosemirror_state_1 = require("prosemirror-state");
var prosemirror_model_1 = require("prosemirror-model");
var prosemirror_utils_1 = require("prosemirror-utils");
var plugin_1 = require("./plugin");
var macro_1 = require("../macro");
var utils_1 = require("./utils");
exports.setExtensionElement = function (element) { return function (state, dispatch) {
    var tr = state.tr.setMeta(plugin_1.pluginKey, { element: element });
    if (!element) {
        tr = tr.setSelection(prosemirror_state_1.TextSelection.create(state.doc, state.selection.$from.pos));
    }
    dispatch(tr);
    return true;
}; };
exports.editExtension = function (macroProvider) { return function (view) {
    var state = view.state, dispatch = view.dispatch;
    // insert macro if there's macroProvider available
    if (macroProvider) {
        var node = utils_1.getExtensionNode(state);
        if (node) {
            var bodiedExtension = state.schema.nodes.bodiedExtension;
            var tr = state.tr.setMeta(plugin_1.pluginKey, { element: null });
            if (prosemirror_utils_1.hasParentNodeOfType(bodiedExtension)(tr.selection)) {
                dispatch(prosemirror_utils_1.selectParentNodeOfType(bodiedExtension)(tr));
            }
            macro_1.insertMacroFromMacroBrowser(macroProvider, node)(view);
            return true;
        }
    }
    return false;
}; };
exports.removeExtension = function (state, dispatch) {
    var schema = state.schema, selection = state.selection;
    var tr = state.tr.setMeta(plugin_1.pluginKey, { element: null });
    if (selection instanceof prosemirror_state_1.NodeSelection) {
        tr = prosemirror_utils_1.removeSelectedNode(tr);
    }
    else {
        tr = prosemirror_utils_1.removeParentNodeOfType(schema.nodes.bodiedExtension)(tr);
    }
    dispatch(tr);
    return true;
};
exports.removeBodiedExtensionWrapper = function (state, slice) {
    var bodiedExtension = state.schema.nodes.bodiedExtension;
    var wrapper = slice.content.firstChild;
    if (wrapper.type !== bodiedExtension || slice.content.childCount > 1) {
        return slice;
    }
    return new prosemirror_model_1.Slice(prosemirror_model_1.Fragment.from(wrapper.content), Math.max(0, slice.openStart - 1), Math.max(0, slice.openEnd - 1));
};
exports.removeBodiedExtensionsIfSelectionIsInBodiedExtension = function (slice, state) {
    var selection = state.selection, bodiedExtension = state.schema.nodes.bodiedExtension;
    if (prosemirror_utils_1.hasParentNodeOfType(bodiedExtension)(selection)) {
        var nodes_1 = [];
        slice.content.forEach(function (child) {
            if (child.type !== bodiedExtension) {
                nodes_1.push(child);
            }
        });
        return new prosemirror_model_1.Slice(prosemirror_model_1.Fragment.from(nodes_1), slice.openStart, slice.openEnd);
    }
    return slice;
};
//# sourceMappingURL=actions.js.map