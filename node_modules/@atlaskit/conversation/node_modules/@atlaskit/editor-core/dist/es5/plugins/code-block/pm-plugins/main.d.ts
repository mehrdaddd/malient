import { Node, Schema } from 'prosemirror-model';
import { EditorState, Plugin, PluginKey } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
export declare type CodeMirrorFocusSubscriber = (uniqueId: string | undefined) => any;
export declare type CodeBlockStateSubscriber = (state: CodeBlockState) => any;
export declare type StateChangeHandler = (state: CodeBlockState) => any;
export declare type DomAtPos = (pos: number) => {
    node: HTMLElement;
    offset: number;
};
export declare class CodeBlockState {
    element?: HTMLElement;
    language: string | undefined;
    supportedLanguages: string[];
    toolbarVisible: boolean;
    domEvent: boolean;
    uniqueId: string | undefined;
    activeCodeBlock?: Node;
    editorFocused: boolean;
    private state;
    private changeHandlers;
    private focusHandlers;
    constructor(state: EditorState);
    subscribe(cb: CodeBlockStateSubscriber): void;
    unsubscribe(cb: CodeBlockStateSubscriber): void;
    subscribeFocusHandlers(cb: CodeMirrorFocusSubscriber): void;
    unsubscribeFocusHandlers(cb: CodeMirrorFocusSubscriber): void;
    updateLanguage(language: string | undefined, view: EditorView): void;
    removeCodeBlock(view: EditorView): void;
    updateEditorFocused(editorFocused: boolean): void;
    setLanguages(supportedLanguages: string[]): void;
    update(state: EditorState, domAtPos: DomAtPos, domEvent?: boolean): void;
    private triggerOnChange();
    private triggerFocus();
    private activeCodeBlockElement(domAtPos);
    private activeCodeBlockNode();
}
export declare const stateKey: PluginKey;
export declare const plugin: Plugin;
declare const plugins: (schema: Schema) => Plugin[];
export default plugins;
