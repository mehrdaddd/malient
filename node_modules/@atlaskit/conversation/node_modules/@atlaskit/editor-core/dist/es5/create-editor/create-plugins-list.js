"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var plugins_1 = require("../plugins");
/**
 * Returns list of plugins that are absolutely necessary for editor to work
 */
function getDefaultPluginsList(props) {
    if (props === void 0) { props = {}; }
    var textFormattingOptions = props.textFormatting
        ? props.textFormatting
        : typeof props.allowTextFormatting === 'object'
            ? props.allowTextFormatting
            : {};
    return [
        plugins_1.pastePlugin,
        plugins_1.basePlugin,
        plugins_1.blockTypePlugin,
        plugins_1.placeholderPlugin,
        plugins_1.clearMarksOnChangeToEmptyDocumentPlugin,
        plugins_1.hyperlinkPlugin,
        plugins_1.textFormattingPlugin(textFormattingOptions),
        plugins_1.widthPlugin,
        plugins_1.typeAheadPlugin,
    ];
}
exports.getDefaultPluginsList = getDefaultPluginsList;
/**
 * Maps EditorProps to EditorPlugins
 */
function createPluginsList(props) {
    var plugins = getDefaultPluginsList(props);
    if (props.UNSAFE_allowQuickInsert) {
        plugins.push(plugins_1.quickInsertPlugin);
    }
    if (props.allowInlineAction) {
        plugins.push(plugins_1.inlineActionPlugin);
    }
    if (props.allowTextColor) {
        plugins.push(plugins_1.textColorPlugin);
    }
    if (props.allowLists) {
        plugins.push(plugins_1.listsPlugin);
    }
    if (props.allowRule) {
        plugins.push(plugins_1.rulePlugin);
    }
    if (props.media || props.mediaProvider) {
        plugins.push(plugins_1.mediaPlugin(props.media));
    }
    if (props.allowCodeBlocks) {
        plugins.push(plugins_1.codeBlockPlugin);
    }
    if (props.mentionProvider) {
        plugins.push(plugins_1.mentionsPlugin);
    }
    if (props.emojiProvider) {
        plugins.push(plugins_1.emojiPlugin);
    }
    if (props.allowTables) {
        plugins.push(plugins_1.tablesPlugin);
    }
    if (props.allowTasksAndDecisions) {
        plugins.push(plugins_1.tasksAndDecisionsPlugin);
    }
    if (props.allowHelpDialog) {
        plugins.push(plugins_1.helpDialogPlugin);
    }
    if (props.saveOnEnter) {
        plugins.push(plugins_1.saveOnEnterPlugin);
    }
    if (props.legacyImageUploadProvider) {
        plugins.push(plugins_1.imageUploadPlugin);
        if (!props.media && !props.mediaProvider) {
            plugins.push(plugins_1.mediaPlugin({
                allowMediaSingle: { disableLayout: true },
                allowMediaGroup: false,
            }));
        }
    }
    if (props.collabEdit || props.collabEditProvider) {
        plugins.push(plugins_1.collabEditPlugin);
    }
    if (props.maxContentSize) {
        plugins.push(plugins_1.maxContentSizePlugin);
    }
    if (props.allowJiraIssue) {
        plugins.push(plugins_1.jiraIssuePlugin);
    }
    if (props.allowUnsupportedContent) {
        plugins.push(plugins_1.unsupportedContentPlugin);
    }
    if (props.allowPanel) {
        plugins.push(plugins_1.panelPlugin);
    }
    if (props.allowExtension) {
        plugins.push(plugins_1.extensionPlugin);
    }
    if (props.macroProvider) {
        plugins.push(plugins_1.macroPlugin);
    }
    if (props.allowConfluenceInlineComment) {
        plugins.push(plugins_1.confluenceInlineComment);
    }
    if (props.allowDate) {
        plugins.push(plugins_1.datePlugin);
    }
    if (props.allowTemplatePlaceholders) {
        var options = props.allowTemplatePlaceholders === true
            ? {}
            : props.allowTemplatePlaceholders;
        plugins.push(plugins_1.placeholderTextPlugin(options));
    }
    if (props.UNSAFE_allowLayouts) {
        plugins.push(plugins_1.layoutPlugin);
    }
    if (props.allowGapCursor) {
        plugins.push(plugins_1.gapCursorPlugin);
    }
    // UI only plugins
    plugins.push(plugins_1.insertBlockPlugin({
        insertMenuItems: props.insertMenuItems,
        horizontalRuleEnabled: props.allowRule,
    }));
    plugins.push(plugins_1.submitEditorPlugin);
    plugins.push(plugins_1.fakeTextCursorPlugin);
    if (props.appearance === 'message') {
        plugins.push(plugins_1.isMultilineContentPlugin);
    }
    return plugins;
}
exports.default = createPluginsList;
//# sourceMappingURL=create-plugins-list.js.map