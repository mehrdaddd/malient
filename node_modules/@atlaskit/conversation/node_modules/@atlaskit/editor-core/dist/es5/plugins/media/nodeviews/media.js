"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var Media_1 = require("../ui/Media");
var main_1 = require("../pm-plugins/main");
var editor_common_1 = require("@atlaskit/editor-common");
var ProgressLoader_1 = require("../../../ui/ProgressLoader");
var getId = function (props) { return props.node.attrs.__key; };
var MediaNode = /** @class */ (function (_super) {
    tslib_1.__extends(MediaNode, _super);
    function MediaNode(props) {
        var _this = _super.call(this, props) || this;
        _this.cancelProgress = function () {
            var __key = _this.props.node.attrs.__key;
            _this.pluginState.removeNodeById(__key);
        };
        _this.handleRemove = function (item, event) {
            var _a = _this.props, getPos = _a.getPos, node = _a.node;
            _this.pluginState.handleMediaNodeRemoval(node, getPos);
            if (event) {
                event.stopPropagation();
            }
        };
        _this.handleNewNode = function (props) {
            var getPos = props.getPos, node = props.node;
            _this.pluginState.handleMediaNodeMount(node, getPos);
        };
        var view = _this.props.view;
        _this.pluginState = main_1.stateKey.getState(view.state);
        return _this;
    }
    MediaNode.prototype.componentDidMount = function () {
        this.handleNewNode(this.props);
    };
    MediaNode.prototype.componentWillUnmount = function () {
        var node = this.props.node;
        this.pluginState.handleMediaNodeUnmount(node);
    };
    MediaNode.prototype.shouldComponentUpdate = function (nextProps) {
        return (getId(nextProps) !== getId(this.props) ||
            nextProps.selected !== this.props.selected ||
            this.props.progress !== nextProps.progress ||
            this.props.node.attrs.width !== nextProps.node.attrs.width);
    };
    MediaNode.prototype.render = function () {
        var _a = this.props, node = _a.node, providerFactory = _a.providerFactory, selected = _a.selected, view = _a.view, cardDimensions = _a.cardDimensions, isMediaSingle = _a.isMediaSingle, _b = _a.progress, progress = _b === void 0 ? 0 : _b, onExternalImageLoaded = _a.onExternalImageLoaded;
        var _c = node.attrs, id = _c.id, type = _c.type, collection = _c.collection, url = _c.url, __key = _c.__key, width = _c.width;
        var deleteEventHandler = isMediaSingle ? undefined : this.handleRemove;
        if (!width &&
            this.pluginState.editorAppearance !== 'message' &&
            isMediaSingle &&
            type !== 'external') {
            return (React.createElement(ProgressLoader_1.default, { progress: progress, maxWidth: editor_common_1.akEditorFullPageMaxWidth, onCancel: this.cancelProgress, cancelLabel: "Cancel upload" }));
        }
        return (React.createElement(Media_1.default, { key: "media-node-" + __key, editorView: view, id: id, tempId: __key, type: type, collection: collection, providers: providerFactory, cardDimensions: cardDimensions, onDelete: deleteEventHandler, selected: selected, url: url, onExternalImageLoaded: onExternalImageLoaded, disableOverlay: isMediaSingle }));
    };
    return MediaNode;
}(react_1.Component));
exports.default = MediaNode;
//# sourceMappingURL=media.js.map