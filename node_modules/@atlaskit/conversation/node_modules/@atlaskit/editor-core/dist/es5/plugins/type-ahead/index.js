"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var editor_common_1 = require("@atlaskit/editor-common");
var WithPluginState_1 = require("../../ui/WithPluginState");
var main_1 = require("./pm-plugins/main");
var input_rules_1 = require("./pm-plugins/input-rules");
var keymap_1 = require("./pm-plugins/keymap");
var TypeAhead_1 = require("./ui/TypeAhead");
var typeAheadPlugin = {
    name: 'typeAhead',
    marks: function () {
        return [{ name: 'typeAheadQuery', mark: editor_common_1.typeAheadQuery, rank: 1300 }];
    },
    pmPlugins: function (typeAhead) {
        if (typeAhead === void 0) { typeAhead = []; }
        return [
            {
                rank: 600,
                plugin: function (_a) {
                    var dispatch = _a.dispatch;
                    return main_1.createPlugin(dispatch, typeAhead);
                },
            },
            {
                rank: 620,
                plugin: function (_a) {
                    var schema = _a.schema;
                    return input_rules_1.inputRulePlugin(schema, typeAhead);
                },
            },
            {
                rank: 640,
                plugin: function () { return keymap_1.keymapPlugin(); },
            },
        ];
    },
    contentComponent: function (_a) {
        var editorView = _a.editorView, popupsMountPoint = _a.popupsMountPoint, popupsBoundariesElement = _a.popupsBoundariesElement, popupsScrollableElement = _a.popupsScrollableElement;
        return (React.createElement(WithPluginState_1.default, { plugins: {
                typeAhead: main_1.pluginKey,
            }, render: function (_a) {
                var _b = _a.typeAhead, typeAhead = _b === void 0 ? {
                    active: false,
                    items: [],
                    currentIndex: 0,
                    itemsLoader: null,
                } : _b;
                var anchorElement = editorView.dom.querySelector('[data-type-ahead-query]');
                return (React.createElement(TypeAhead_1.TypeAhead, { editorView: editorView, popupsMountPoint: popupsMountPoint, popupsBoundariesElement: popupsBoundariesElement, popupsScrollableElement: popupsScrollableElement, anchorElement: anchorElement, active: typeAhead.active, isLoading: !!typeAhead.itemsLoader, items: typeAhead.items, currentIndex: typeAhead.currentIndex }));
            } }));
    },
};
exports.default = typeAheadPlugin;
//# sourceMappingURL=index.js.map