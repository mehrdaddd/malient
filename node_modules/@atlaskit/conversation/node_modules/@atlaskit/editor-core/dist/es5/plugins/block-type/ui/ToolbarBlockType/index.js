"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var chevron_down_1 = require("@atlaskit/icon/glyph/chevron-down");
var text_style_1 = require("@atlaskit/icon/glyph/editor/text-style");
var analytics_1 = require("../../../../analytics");
var ToolbarButton_1 = require("../../../../ui/ToolbarButton");
var DropdownMenu_1 = require("../../../../ui/DropdownMenu");
var styles_1 = require("../../../../ui/styles");
var ToolbarBlockType = /** @class */ (function (_super) {
    tslib_1.__extends(ToolbarBlockType, _super);
    function ToolbarBlockType(props) {
        var _this = _super.call(this, props) || this;
        _this.onOpenChange = function (attrs) {
            _this.setState({
                active: attrs.isOpen,
            });
        };
        _this.handleTriggerClick = function () {
            _this.onOpenChange({ isOpen: !_this.state.active });
        };
        _this.createItems = function () {
            var _a = _this.state, currentBlockType = _a.currentBlockType, availableBlockTypes = _a.availableBlockTypes;
            var items = [];
            availableBlockTypes.forEach(function (blockType, blockTypeNo) {
                items.push({
                    content: blockType.title,
                    value: blockType,
                    // ED-2853, hiding tooltips as shortcuts are not working atm.
                    // tooltipDescription: tooltip(findKeymapByDescription(blockType.title)),
                    // tooltipPosition: 'right',
                    isActive: currentBlockType === blockType,
                });
            });
            return [
                {
                    items: items,
                },
            ];
        };
        _this.handlePluginStateChange = function (pluginState) {
            _this.setState({
                active: _this.state.active,
                availableBlockTypes: pluginState.availableBlockTypes,
                currentBlockType: pluginState.currentBlockType,
                blockTypesDisabled: pluginState.blockTypesDisabled,
            });
        };
        _this.handleSelectBlockType = function (_a) {
            var item = _a.item;
            var blockType = item.value;
            var availableBlockTypes = _this.state.availableBlockTypes;
            _this.props.pluginState.setBlockType(blockType.name, _this.props.editorView);
            _this.setState({
                active: false,
                availableBlockTypes: availableBlockTypes,
                currentBlockType: blockType,
            });
            analytics_1.analyticsService.trackEvent("atlassian.editor.format." + blockType.name + ".button");
        };
        var pluginState = props.pluginState;
        _this.state = {
            active: false,
            availableBlockTypes: pluginState.availableBlockTypes,
            currentBlockType: pluginState.currentBlockType,
            blockTypesDisabled: pluginState.blockTypesDisabled,
        };
        return _this;
    }
    ToolbarBlockType.prototype.componentDidMount = function () {
        this.props.pluginState.subscribe(this.handlePluginStateChange);
    };
    ToolbarBlockType.prototype.componentWillUnmount = function () {
        this.props.pluginState.unsubscribe(this.handlePluginStateChange);
    };
    ToolbarBlockType.prototype.render = function () {
        var _this = this;
        var _a = this.state, active = _a.active, currentBlockType = _a.currentBlockType, blockTypesDisabled = _a.blockTypesDisabled, availableBlockTypes = _a.availableBlockTypes;
        var _b = this.props, popupsMountPoint = _b.popupsMountPoint, popupsBoundariesElement = _b.popupsBoundariesElement, popupsScrollableElement = _b.popupsScrollableElement, isSmall = _b.isSmall;
        var blockTypeTitles = availableBlockTypes
            .filter(function (blockType) { return blockType.name === currentBlockType.name; })
            .map(function (blockType) { return blockType.title; });
        var toolbarButtonFactory = function (disabled) { return (React.createElement(ToolbarButton_1.default, { spacing: "none", selected: active, disabled: disabled, onClick: _this.handleTriggerClick, iconAfter: React.createElement(styles_1.Wrapper, { isSmall: isSmall },
                isSmall && React.createElement(text_style_1.default, { label: "Change formatting" }),
                React.createElement(styles_1.ExpandIconWrapper, null,
                    React.createElement(chevron_down_1.default, { label: "Change formatting" }))) }, !isSmall && (React.createElement(styles_1.ButtonContent, null, blockTypeTitles[0] || 'Normal text')))); };
        if (!this.props.isDisabled && !blockTypesDisabled) {
            var items = this.createItems();
            return (React.createElement(styles_1.MenuWrapper, null,
                React.createElement(DropdownMenu_1.default, { items: items, onOpenChange: this.onOpenChange, onItemActivated: this.handleSelectBlockType, isOpen: active, mountTo: popupsMountPoint, boundariesElement: popupsBoundariesElement, scrollableElement: popupsScrollableElement, fitHeight: 360, fitWidth: 106 }, toolbarButtonFactory(false)),
                React.createElement(styles_1.Separator, null)));
        }
        return (React.createElement(styles_1.Wrapper, null,
            toolbarButtonFactory(true),
            React.createElement(styles_1.Separator, null)));
    };
    return ToolbarBlockType;
}(React.PureComponent));
exports.default = ToolbarBlockType;
//# sourceMappingURL=index.js.map