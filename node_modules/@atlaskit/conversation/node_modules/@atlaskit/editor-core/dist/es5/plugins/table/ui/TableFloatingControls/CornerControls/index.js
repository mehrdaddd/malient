"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var prosemirror_utils_1 = require("prosemirror-utils");
var styles_1 = require("../styles");
var styles_2 = require("./styles");
var InsertColumnButton_1 = require("../ColumnControls/InsertColumnButton");
var InsertRowButton_1 = require("../RowControls/InsertRowButton");
var utils_1 = require("../utils");
var utils_2 = require("../../../utils");
var CornerControls = /** @class */ (function (_super) {
    tslib_1.__extends(CornerControls, _super);
    function CornerControls() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectTable = function () {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            dispatch(prosemirror_utils_1.selectTable(state.tr));
        };
        _this.hoverTable = function () {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            _this.props.hoverTable()(state, dispatch);
        };
        _this.resetHoverSelection = function () {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            _this.props.resetHoverSelection(state, dispatch);
        };
        _this.insertColumn = function () {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            _this.props.insertColumn(0)(state, dispatch);
        };
        _this.insertRow = function () {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            _this.props.insertRow(0)(state, dispatch);
        };
        return _this;
    }
    CornerControls.prototype.render = function () {
        var _a = this.props, tableElement = _a.tableElement, state = _a.editorView.state, scroll = _a.scroll, isTableInDanger = _a.isTableInDanger;
        var tableHeight = tableElement.offsetHeight;
        var lineMarkerWidth = utils_1.getLineMarkerWidth(tableElement, scroll);
        return (React.createElement(styles_2.CornerContainer, { className: prosemirror_utils_1.isTableSelected(state.selection) ? 'active' : '' },
            React.createElement(styles_2.CornerButton, { onClick: this.selectTable, onMouseOver: this.hoverTable, onMouseOut: this.resetHoverSelection, className: isTableInDanger ? 'danger' : '' }),
            !utils_2.checkIfHeaderColumnEnabled(state) &&
                !utils_2.checkIfNumberColumnEnabled(state) && (React.createElement(InsertColumnButton_1.default, { onClick: this.insertColumn, lineMarkerHeight: tableHeight + styles_1.toolbarSize })),
            !utils_2.checkIfHeaderRowEnabled(state) && (React.createElement(InsertRowButton_1.default, { style: { top: 2 }, onClick: this.insertRow, lineMarkerWidth: lineMarkerWidth, onMouseOver: this.props.updateScroll }))));
    };
    return CornerControls;
}(react_1.Component));
exports.default = CornerControls;
//# sourceMappingURL=index.js.map