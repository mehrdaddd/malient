"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prosemirror_keymap_1 = require("prosemirror-keymap");
var keymaps = require("../../../keymaps");
var main_1 = require("./main");
function keymapPlugin(schema) {
    var list = {};
    keymaps.bindKeymapWithCommand(keymaps.moveUp.common, function (state, dispatch) {
        var mentionsPlugin = main_1.mentionPluginKey.getState(state);
        if (!mentionsPlugin.queryActive) {
            return false;
        }
        return mentionsPlugin.onSelectPrevious();
    }, list);
    keymaps.bindKeymapWithCommand(keymaps.moveDown.common, function (state, dispatch) {
        var mentionsPlugin = main_1.mentionPluginKey.getState(state);
        if (!mentionsPlugin.queryActive) {
            return false;
        }
        return mentionsPlugin.onSelectNext();
    }, list);
    keymaps.bindKeymapWithCommand(keymaps.enter.common, function (state, dispatch) {
        var mentionsPlugin = main_1.mentionPluginKey.getState(state);
        if (!mentionsPlugin.queryActive) {
            return false;
        }
        return mentionsPlugin.onSelectCurrent(keymaps.enter.common);
    }, list);
    keymaps.bindKeymapWithCommand(keymaps.insertNewLine.common, function (state, dispatch) {
        var mentionsPlugin = main_1.mentionPluginKey.getState(state);
        if (!mentionsPlugin.queryActive) {
            return false;
        }
        mentionsPlugin.onSelectCurrent(keymaps.insertNewLine.common);
        return false;
    }, list);
    keymaps.bindKeymapWithCommand(keymaps.tab.common, function (state, dispatch) {
        var mentionsPlugin = main_1.mentionPluginKey.getState(state);
        if (!mentionsPlugin.queryActive) {
            return false;
        }
        return mentionsPlugin.onSelectCurrent(keymaps.tab.common);
    }, list);
    keymaps.bindKeymapWithCommand(keymaps.escape.common, function (state, dispatch) {
        var mentionsPlugin = main_1.mentionPluginKey.getState(state);
        if (!mentionsPlugin.queryActive) {
            return false;
        }
        return mentionsPlugin.dismiss();
    }, list);
    keymaps.bindKeymapWithCommand(keymaps.space.common, function (state, dispatch) {
        var mentionsPlugin = main_1.mentionPluginKey.getState(state);
        if (!mentionsPlugin.queryActive) {
            return false;
        }
        return mentionsPlugin.trySelectCurrent(keymaps.space.common);
    }, list);
    return prosemirror_keymap_1.keymap(list);
}
exports.keymapPlugin = keymapPlugin;
exports.default = keymapPlugin;
//# sourceMappingURL=keymap.js.map