import { Schema, Node } from 'prosemirror-model';
import { EditorState, Plugin, PluginKey } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { ProviderFactory } from '@atlaskit/editor-common';
export declare type StateChangeHandler = (state: ImageUploadState) => any;
export interface ImageUploadPluginOptions {
    defaultHandlersEnabled?: boolean;
    supportedImageTypes?: string[];
    maxFileSizeInBytes?: number;
    providerFactory?: ProviderFactory;
}
export declare type ImageUploadHandler = (e: any, insertImageFn: any) => void;
export declare const createMediaNode: (url: string, schema: Schema) => Node | null;
export declare class ImageUploadState {
    active: boolean;
    enabled: boolean;
    hidden: boolean;
    src?: string;
    element?: HTMLElement;
    changeHandlers: StateChangeHandler[];
    private state;
    private config;
    private uploadHandler?;
    constructor(state: EditorState, options?: ImageUploadPluginOptions);
    handleProvider: (name: string, provider?: Promise<ImageUploadHandler> | undefined) => Promise<void>;
    subscribe(cb: StateChangeHandler): void;
    unsubscribe(cb: StateChangeHandler): void;
    update(state: EditorState, docView: any, dirty?: boolean): void;
    handleImageUpload(view: EditorView, event?: Event): boolean;
    addImage(view: EditorView): Function;
    private getActiveImageElement(docView);
    private canInsertImage();
    private isImageSelected();
}
export declare const stateKey: PluginKey;
export declare const createPlugin: (schema: Schema, options: ImageUploadPluginOptions) => Plugin;
