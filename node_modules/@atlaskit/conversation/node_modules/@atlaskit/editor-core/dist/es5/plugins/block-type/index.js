"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var editor_common_1 = require("@atlaskit/editor-common");
var Toolbar_1 = require("../../ui/Toolbar");
var main_1 = require("./pm-plugins/main");
var keymap_1 = require("./pm-plugins/keymap");
var input_rule_1 = require("./pm-plugins/input-rule");
var ToolbarBlockType_1 = require("./ui/ToolbarBlockType");
var blockType = {
    nodes: function (_a) {
        var allowBlockType = _a.allowBlockType;
        var nodes = [
            { name: 'heading', node: editor_common_1.heading, rank: 600 },
            { name: 'blockquote', node: editor_common_1.blockquote, rank: 700 },
            { name: 'hardBreak', node: editor_common_1.hardBreak, rank: 1500 },
        ];
        if (allowBlockType) {
            var exclude_1 = allowBlockType.exclude ? allowBlockType.exclude : [];
            return nodes.filter(function (node) { return exclude_1.indexOf(node.name) === -1; });
        }
        return nodes;
    },
    pmPlugins: function () {
        return [
            {
                rank: 500,
                plugin: function (_a) {
                    var props = _a.props;
                    return main_1.createPlugin(props.appearance);
                },
            },
            { rank: 510, plugin: function (_a) {
                    var schema = _a.schema;
                    return input_rule_1.default(schema);
                } },
            // Needs to be lower priority than prosemirror-tables.tableEditing
            // plugin as it is currently swallowing right/down arrow events inside tables
            { rank: 925, plugin: function (_a) {
                    var schema = _a.schema;
                    return keymap_1.default(schema);
                } },
        ];
    },
    primaryToolbarComponent: function (_a) {
        var editorView = _a.editorView, popupsMountPoint = _a.popupsMountPoint, popupsBoundariesElement = _a.popupsBoundariesElement, popupsScrollableElement = _a.popupsScrollableElement, toolbarSize = _a.toolbarSize, disabled = _a.disabled, isToolbarReducedSpacing = _a.isToolbarReducedSpacing;
        var pluginState = main_1.stateKey.getState(editorView.state);
        var isSmall = toolbarSize < Toolbar_1.ToolbarSize.XL;
        return (React.createElement(ToolbarBlockType_1.default, { isSmall: isSmall, isDisabled: disabled, isReducedSpacing: isToolbarReducedSpacing, editorView: editorView, pluginState: pluginState, popupsMountPoint: popupsMountPoint, popupsBoundariesElement: popupsBoundariesElement, popupsScrollableElement: popupsScrollableElement }));
    },
};
exports.default = blockType;
//# sourceMappingURL=index.js.map