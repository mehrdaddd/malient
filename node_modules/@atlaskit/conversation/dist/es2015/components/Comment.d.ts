/// <reference types="react" />
import * as React from 'react';
import { Editor as AkEditor, EditorProps } from '@atlaskit/editor-core';
import { ProviderFactory } from '@atlaskit/editor-common';
import { Comment as CommentType, User } from '../model';
/**
 * Props which are passed down from the parent Conversation/Comment
 */
export interface SharedProps {
    user?: User;
    comments?: CommentType[];
    onAddComment?: (conversationId: string, parentId: string, value: any, localId?: string) => void;
    onUpdateComment?: (conversationId: string, commentId: string, value: any) => void;
    onDeleteComment?: (conversationId: string, commentId: string) => void;
    onRevertComment?: (conversationId: string, commentId: string) => void;
    onCancelComment?: (conversationId: string, commentId: string) => void;
    onCancel?: () => void;
    onHighlightComment?: (commentId: string) => void;
    dataProviders?: ProviderFactory;
    onUserClick?: (user: User) => void;
    onRetry?: (localId?: string) => void;
    renderEditor?: (Editor: typeof AkEditor, props: EditorProps) => JSX.Element;
    containerId?: string;
    isHighlighted?: boolean;
    placeholder?: string;
    disableScrollTo?: boolean;
    allowFeedbackAndHelpButtons?: boolean;
}
export interface Props extends SharedProps {
    conversationId: string;
    comment: CommentType;
}
export interface State {
    isEditing?: boolean;
    isReplying?: boolean;
    lastDispatch?: {
        handler: any;
        args: any[];
    };
}
export declare const DeletedMessage: () => JSX.Element;
export default class Comment extends React.Component<Props, State> {
    constructor(props: any);
    shouldComponentUpdate(nextProps: Props, nextState: State): boolean;
    private dispatch;
    private onReply;
    private onSaveReply;
    private onCancelReply;
    private onDelete;
    private onEdit;
    private onSaveEdit;
    private onCancelEdit;
    private onRequestCancel;
    private onRequestRetry;
    /**
     * Username click handler - pass a User object, returns a handler which will invoke onUserClick with it
     * @param {User} user
     */
    private handleUserClick;
    private getContent();
    private renderComments();
    private renderEditor();
    private getActions();
    private handleTimeClick;
    render(): any;
}
