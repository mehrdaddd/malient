"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var Comment_1 = require("../containers/Comment");
var Comment_2 = require("../components/Comment");
var Editor_1 = require("./Editor");
var Conversation = /** @class */ (function (_super) {
    tslib_1.__extends(Conversation, _super);
    function Conversation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onRetry = function (document) { return function (commentLocalId) {
            _this.onSave(document, commentLocalId);
        }; };
        _this.onSave = function (value, commentLocalId) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, containerId, id, localId, meta, onAddComment, onCreateConversation, conversation, conversationId;
            return tslib_1.__generator(this, function (_b) {
                _a = this.props, containerId = _a.containerId, id = _a.id, localId = _a.localId, meta = _a.meta, onAddComment = _a.onAddComment, onCreateConversation = _a.onCreateConversation, conversation = _a.conversation;
                if (!id && !commentLocalId) {
                    if (onCreateConversation) {
                        onCreateConversation(localId, containerId, value, meta);
                    }
                }
                else {
                    if (onAddComment) {
                        conversationId = id || conversation.conversationId;
                        onAddComment(conversationId, conversationId, value, commentLocalId);
                    }
                }
                return [2 /*return*/];
            });
        }); };
        return _this;
    }
    Conversation.prototype.renderComments = function () {
        var _this = this;
        var _a = this.props, comments = _a.comments, conversation = _a.conversation, onAddComment = _a.onAddComment, onUpdateComment = _a.onUpdateComment, onDeleteComment = _a.onDeleteComment, onRevertComment = _a.onRevertComment, onHighlightComment = _a.onHighlightComment, onUserClick = _a.onUserClick, onCancel = _a.onCancel, user = _a.user, dataProviders = _a.dataProviders, renderEditor = _a.renderEditor, containerId = _a.containerId, placeholder = _a.placeholder, disableScrollTo = _a.disableScrollTo;
        if (!conversation) {
            return;
        }
        var conversationId = conversation.conversationId;
        return (comments || []).map(function (comment) { return (React.createElement(Comment_1.default, { key: comment.commentId, conversationId: conversationId, comment: comment, user: user, onAddComment: onAddComment, onUpdateComment: onUpdateComment, onDeleteComment: onDeleteComment, onRevertComment: onRevertComment, onHighlightComment: onHighlightComment, onRetry: _this.onRetry(comment.document), onCancel: onCancel, onUserClick: onUserClick, dataProviders: dataProviders, renderComment: function (props) { return React.createElement(Comment_2.default, tslib_1.__assign({}, props)); }, renderEditor: renderEditor, containerId: containerId, placeholder: placeholder, disableScrollTo: disableScrollTo })); });
    };
    Conversation.prototype.renderEditor = function () {
        var _a = this.props, isExpanded = _a.isExpanded, onCancel = _a.onCancel, meta = _a.meta, dataProviders = _a.dataProviders, user = _a.user, conversation = _a.conversation, renderEditor = _a.renderEditor, placeholder = _a.placeholder, disableScrollTo = _a.disableScrollTo, allowFeedbackAndHelpButtons = _a.allowFeedbackAndHelpButtons;
        var isInline = !!meta;
        var hasConversation = !!conversation;
        var canReply = !!user && (!isInline || (isExpanded && !hasConversation));
        if (canReply) {
            return (React.createElement(Editor_1.default, { isExpanded: isExpanded, onSave: this.onSave, onCancel: onCancel, dataProviders: dataProviders, user: user, renderEditor: renderEditor, placeholder: placeholder, disableScrollTo: disableScrollTo, allowFeedbackAndHelpButtons: allowFeedbackAndHelpButtons }));
        }
    };
    Conversation.prototype.render = function () {
        return (React.createElement("div", null,
            this.renderComments(),
            this.renderEditor()));
    };
    Conversation.defaultProps = {
        placeholder: 'What do you want to say?',
    };
    return Conversation;
}(React.PureComponent));
exports.default = Conversation;
//# sourceMappingURL=Conversation.js.map