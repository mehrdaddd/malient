'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _calendarBase = require('calendar-base');

var _lodash = require('lodash.pick');

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _v = require('uuid/v1');

var _v2 = _interopRequireDefault(_v);

var _util = require('../util');

var _Date = require('./Date');

var _Date2 = _interopRequireDefault(_Date);

var _Heading = require('./Heading');

var _Heading2 = _interopRequireDefault(_Heading);

var _Calendar = require('../styled/Calendar');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var arrowKeys = {
  ArrowDown: 'down',
  ArrowLeft: 'left',
  ArrowRight: 'right',
  ArrowUp: 'up'
};
var daysPerWeek = 7;
var monthsPerYear = 12;

function getUniqueId(prefix) {
  return prefix + '-' + (0, _v2.default)();
}

function padToTwo(number) {
  return number <= 99 ? ('0' + number).slice(-2) : '' + number;
}

var Calendar = function (_Component) {
  (0, _inherits3.default)(Calendar, _Component);

  function Calendar(props) {
    (0, _classCallCheck3.default)(this, Calendar);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Calendar.__proto__ || (0, _getPrototypeOf2.default)(Calendar)).call(this, props));

    _this.getState = function () {
      return (0, _extends3.default)({}, _this.state, (0, _lodash2.default)(_this.props, ['day', 'disabled', 'selected', 'month', 'previouslySelected', 'year', 'today']));
    };

    _this.handleContainerKeyDown = function (e) {
      var key = e.key;

      var arrowKey = arrowKeys[key];

      if (key === 'Enter' || key === ' ') {
        var _this$getState = _this.getState(),
            selectDay = _this$getState.day,
            selectMonth = _this$getState.month,
            selectYear = _this$getState.year;

        e.preventDefault();
        _this.triggerOnSelect({
          day: selectDay,
          year: selectYear,
          month: selectMonth
        });
      } else if (arrowKey) {
        e.preventDefault();
        _this.navigate(arrowKey);
      }
    };

    _this.handleClickDay = function (_ref) {
      var year = _ref.year,
          month = _ref.month,
          day = _ref.day;

      _this.triggerOnSelect({ year: year, month: month, day: day });
    };

    _this.handleClickNext = function () {
      var _this$getState$_this$ = (0, _extends3.default)({}, _this.getState(), _this.getNextMonth()),
          day = _this$getState$_this$.day,
          month = _this$getState$_this$.month,
          year = _this$getState$_this$.year;

      _this.triggerOnChange({ day: day, month: month, year: year, type: 'next' });
    };

    _this.handleClickPrev = function () {
      var _this$getState$_this$2 = (0, _extends3.default)({}, _this.getState(), _this.getPrevMonth()),
          day = _this$getState$_this$2.day,
          month = _this$getState$_this$2.month,
          year = _this$getState$_this$2.year;

      _this.triggerOnChange({ day: day, month: month, year: year, type: 'prev' });
    };

    _this.handleContainerBlur = function () {
      _this.setState({ day: 0 });
      _this.props.onBlur();
    };

    _this.handleContainerFocus = function () {
      _this.setState({ day: _this.getState().day || 1 });
      _this.props.onFocus();
    };

    _this.refContainer = function (e) {
      _this.container = e;
    };

    _this.triggerOnChange = function (_ref2) {
      var year = _ref2.year,
          month = _ref2.month,
          day = _ref2.day,
          type = _ref2.type;

      var iso = (0, _util.dateToString)({ year: year, month: month, day: day });
      _this.props.onChange({ day: day, month: month, year: year, iso: iso, type: type });
      _this.setState({
        day: day,
        month: month,
        year: year
      });
    };

    _this.triggerOnSelect = function (_ref3) {
      var year = _ref3.year,
          month = _ref3.month,
          day = _ref3.day;

      var iso = (0, _util.dateToString)({ year: year, month: month, day: day });
      _this.props.onSelect({ day: day, month: month, year: year, iso: iso });
      _this.setState({
        previouslySelected: _this.getState().selected,
        selected: [iso]
      });
    };

    _this.getCalendarWeeks = function (mappedState) {
      var day = mappedState.day,
          year = mappedState.year,
          month = mappedState.month,
          disabled = mappedState.disabled,
          previouslySelected = mappedState.previouslySelected,
          selected = mappedState.selected,
          today = mappedState.today;

      var calendar = _this.calendar.getCalendar(year, month - 1);
      var weeks = [];
      var shouldDisplaySixthWeek = calendar.length % 6;

      // Some months jump between 5 and 6 weeks to display. In some cases 4 (Feb
      // with the 1st on a Monday etc). This ensures the UI doesn't jump around by
      // catering to always showing 6 weeks.
      if (shouldDisplaySixthWeek) {
        var lastDayIsSibling = calendar[calendar.length - 1].siblingMonth;
        var sliceStart = lastDayIsSibling ? daysPerWeek : 0;

        calendar.push.apply(calendar, (0, _toConsumableArray3.default)(_this.calendar.getCalendar(year, month).slice(sliceStart, sliceStart + daysPerWeek).map(function (e) {
          return (0, _extends3.default)({}, e, { siblingMonth: true });
        })));
      }

      calendar.forEach(function (date) {
        var dateAsString = (0, _util.dateToString)(date, { fixMonth: true });

        var week = void 0;
        if (date.weekDay === 0) {
          week = { key: dateAsString, components: [] };
          weeks.push(week);
        } else {
          week = weeks[weeks.length - 1];
        }

        var isDisabled = disabled.indexOf(dateAsString) > -1;
        var isFocused = day === date.day && !date.siblingMonth;
        var isPreviouslySelected = !isDisabled && previouslySelected.indexOf(dateAsString) > -1;
        var isSelected = !isDisabled && selected.indexOf(dateAsString) > -1;
        var isSiblingMonth = date.siblingMonth;
        var isToday = today === dateAsString;

        week.components.push(_react2.default.createElement(
          _Date2.default,
          {
            disabled: isDisabled,
            focused: isFocused,
            isToday: isToday,
            key: dateAsString,
            month: date.month + 1,
            onClick: _this.handleClickDay,
            previouslySelected: isPreviouslySelected,
            selected: isSelected,
            sibling: isSiblingMonth,
            year: date.year
          },
          date.day
        ));
      });

      return weeks;
    };

    var now = new Date();
    var thisDay = now.getDate();
    var thisMonth = now.getMonth() + 1;
    var thisYear = now.getFullYear();
    _this.state = {
      day: _this.props.defaultDay,
      disabled: _this.props.defaultDisabled,
      selected: _this.props.defaultSelected,
      month: _this.props.defaultMonth || thisMonth,
      previouslySelected: _this.props.defaultPreviouslySelected,
      year: _this.props.defaultYear || thisYear,
      today: _this.props.today || thisYear + '-' + padToTwo(thisMonth) + '-' + padToTwo(thisDay)
    };
    _this.calendar = new _calendarBase.Calendar({
      siblingMonths: true,
      weekNumbers: true
    });
    return _this;
  }

  // All state needs to be accessed via this function so that the state is mapped from props
  // correctly to allow controlled/uncontrolled usage.


  (0, _createClass3.default)(Calendar, [{
    key: 'getNextMonth',
    value: function getNextMonth() {
      var _getState = this.getState(),
          month = _getState.month,
          year = _getState.year;

      if (month === monthsPerYear) {
        month = 1;
        year += 1;
      } else {
        month += 1;
      }

      return { month: month, year: year };
    }
  }, {
    key: 'getPrevMonth',
    value: function getPrevMonth() {
      var _getState2 = this.getState(),
          month = _getState2.month,
          year = _getState2.year;

      if (month === 1) {
        month = monthsPerYear;
        year -= 1;
      } else {
        month -= 1;
      }

      return { month: month, year: year };
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (this.container) {
        this.container.focus();
      }
    }
  }, {
    key: 'navigate',
    value: function navigate(type) {
      var _getState3 = this.getState(),
          day = _getState3.day,
          month = _getState3.month,
          year = _getState3.year;

      if (type === 'down') {
        var next = day + daysPerWeek;
        var daysInMonth = _calendarBase.Calendar.daysInMonth(year, month - 1);

        if (next > daysInMonth) {
          var _getNextMonth = this.getNextMonth(),
              nextMonth = _getNextMonth.month,
              nextYear = _getNextMonth.year;

          this.triggerOnChange({
            year: nextYear,
            month: nextMonth,
            day: next - daysInMonth,
            type: type
          });
        } else {
          this.triggerOnChange({ year: year, month: month, day: next, type: type });
        }
      } else if (type === 'left') {
        var prev = day - 1;

        if (prev < 1) {
          var _getPrevMonth = this.getPrevMonth(),
              prevMonth = _getPrevMonth.month,
              prevYear = _getPrevMonth.year;

          var prevDay = _calendarBase.Calendar.daysInMonth(prevYear, prevMonth - 1);
          this.triggerOnChange({
            year: prevYear,
            month: prevMonth,
            day: prevDay,
            type: type
          });
        } else {
          this.triggerOnChange({ year: year, month: month, day: prev, type: type });
        }
      } else if (type === 'right') {
        var _next = day + 1;
        var _daysInMonth = _calendarBase.Calendar.daysInMonth(year, month - 1);

        if (_next > _daysInMonth) {
          var _getNextMonth2 = this.getNextMonth(),
              _nextMonth = _getNextMonth2.month,
              _nextYear = _getNextMonth2.year;

          this.triggerOnChange({
            year: _nextYear,
            month: _nextMonth,
            day: 1,
            type: type
          });
        } else {
          this.triggerOnChange({ year: year, month: month, day: _next, type: type });
        }
      } else if (type === 'up') {
        var _prev = day - daysPerWeek;

        if (_prev < 1) {
          var _getPrevMonth2 = this.getPrevMonth(),
              _prevMonth = _getPrevMonth2.month,
              _prevYear = _getPrevMonth2.year;

          var _prevDay = _calendarBase.Calendar.daysInMonth(_prevYear, _prevMonth - 1) + _prev;
          this.triggerOnChange({
            year: _prevYear,
            month: _prevMonth,
            day: _prevDay,
            type: type
          });
        } else {
          this.triggerOnChange({ year: year, month: month, day: _prev, type: type });
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var mappedState = this.getState();
      var innerProps = this.props.innerProps;


      var announceId = getUniqueId('announce');

      return _react2.default.createElement(
        'div',
        (0, _extends3.default)({}, innerProps, {
          onBlur: this.handleContainerBlur,
          onFocus: this.handleContainerFocus,
          onKeyDown: this.handleContainerKeyDown,
          role: 'presentation'
        }),
        _react2.default.createElement(
          _Calendar.Announcer,
          { id: announceId, 'aria-live': 'assertive', 'aria-relevant': 'text' },
          new Date(mappedState.year, mappedState.month, mappedState.day).toString()
        ),
        _react2.default.createElement(
          _Calendar.Wrapper,
          {
            'aria-describedby': announceId,
            'aria-label': 'calendar',
            innerRef: this.refContainer,
            role: 'grid',
            tabIndex: 0
          },
          _react2.default.createElement(_Heading2.default, {
            month: mappedState.month,
            year: mappedState.year,
            handleClickNext: this.handleClickNext,
            handleClickPrev: this.handleClickPrev
          }),
          _react2.default.createElement(
            _Calendar.CalendarTable,
            { role: 'presentation' },
            _react2.default.createElement(
              _Calendar.CalendarThead,
              null,
              _react2.default.createElement(
                'tr',
                null,
                (0, _util.makeArrayFromNumber)(daysPerWeek).map(function (i) {
                  return _react2.default.createElement(
                    _Calendar.CalendarTh,
                    { key: i },
                    (0, _util.getShortDayName)(i)
                  );
                })
              )
            ),
            _react2.default.createElement(
              _Calendar.CalendarTbody,
              null,
              this.getCalendarWeeks(mappedState).map(function (week) {
                return _react2.default.createElement(
                  'tr',
                  { key: week.key },
                  week.components
                );
              })
            )
          )
        )
      );
    }
  }]);
  return Calendar;
}(_react.Component);

Calendar.defaultProps = {
  onBlur: function onBlur() {},
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  onSelect: function onSelect() {},

  innerProps: {},
  defaultDay: 0,
  defaultDisabled: [],
  defaultSelected: [],
  defaultPreviouslySelected: []
};
exports.default = Calendar;