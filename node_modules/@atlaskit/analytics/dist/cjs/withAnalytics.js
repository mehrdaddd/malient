'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
The withAnalytics HOC wraps a component and provides the `fireAnalyticsEvent`
and `firePrivateAnalyticsEvent` methods to it as props. It contains the logic
for how to fire events, including handling the analyticsId and analyticsData
props. The `map` argument may be an object or a function that returns an object.
The properties of the `map` object/result can be strings (the name of the event
that will be fired) or functions (which are responsible for firing the event).
You can specify a default `analyticsId` and `analyticsData` with the `defaultProps`
param. Please be aware that specifying a default `analyticsId` will cause public
events to always fire for your component unless it has been set to a falsy by
the component consumer.
*/
var withAnalytics = function withAnalytics(WrappedComponent) {
  var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _class, _temp2;

  var defaultProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var withDelegation = arguments[3];
  return _temp2 = _class = function (_Component) {
    (0, _inherits3.default)(WithAnalytics, _Component);

    function WithAnalytics() {
      var _ref;

      var _temp, _this, _ret;

      (0, _classCallCheck3.default)(this, WithAnalytics);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = WithAnalytics.__proto__ || (0, _getPrototypeOf2.default)(WithAnalytics)).call.apply(_ref, [this].concat(args))), _this), _this.evaluatedMap = {}, _this.delegateAnalyticsEvent = function (analyticsId, data, isPrivate) {
        var onAnalyticsEvent = _this.context.onAnalyticsEvent;

        if (!onAnalyticsEvent) return;
        onAnalyticsEvent(analyticsId, data, isPrivate);
      }, _this.fireAnalyticsEvent = function (name, data) {
        var _this$props = _this.props,
            analyticsData = _this$props.analyticsData,
            analyticsId = _this$props.analyticsId;
        var onAnalyticsEvent = _this.context.onAnalyticsEvent;

        if (!analyticsId || !onAnalyticsEvent) return;
        var eventData = (0, _extends3.default)({}, analyticsData, data);
        onAnalyticsEvent(analyticsId + '.' + name, eventData, false);
      }, _this.privateAnalyticsEvent = function (name, data) {
        var onAnalyticsEvent = _this.context.onAnalyticsEvent;

        if (!onAnalyticsEvent) return;
        onAnalyticsEvent('' + name, data, true);
      }, _this.getParentAnalyticsData = function (name) {
        var getParentAnalyticsData = _this.context.getParentAnalyticsData;

        var parentData = {};
        if (typeof getParentAnalyticsData === 'function' && _this.props.analyticsId) {
          var _analyticsId = _this.props.analyticsId;

          parentData = getParentAnalyticsData(_analyticsId + '.' + name, false);
        }
        return parentData;
      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }
    // $FlowFixMe - type ComponentType does have property displayName. Unsure why this fails.


    (0, _createClass3.default)(WithAnalytics, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this.evaluatedMap = typeof map === 'function' ? map(this.fireAnalyticsEvent) : map;
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;

        /* eslint-disable no-unused-vars */
        var _props = this.props,
            analyticsId = _props.analyticsId,
            analyticsData = _props.analyticsData,
            componentProps = (0, _objectWithoutProperties3.default)(_props, ['analyticsId', 'analyticsData']);
        /* eslint-enable no-unused-vars */

        (0, _keys2.default)(this.evaluatedMap).forEach(function (prop) {
          var handler = _this2.evaluatedMap[prop]; // may be eventName or a function
          var originalProp = componentProps[prop];
          componentProps[prop] = function () {
            if (typeof handler === 'function') {
              handler.apply(undefined, arguments);
            } else {
              _this2.fireAnalyticsEvent(handler);
            }
            if (typeof originalProp === 'function') originalProp.apply(undefined, arguments);
          };
        });

        return _react2.default.createElement(WrappedComponent, (0, _extends3.default)({
          fireAnalyticsEvent: this.fireAnalyticsEvent,
          firePrivateAnalyticsEvent: this.privateAnalyticsEvent,
          getParentAnalyticsData: this.getParentAnalyticsData,
          delegateAnalyticsEvent: withDelegation ? this.delegateAnalyticsEvent : undefined,
          analyticsId: analyticsId,
          ref: this.props.innerRef
        }, componentProps));
      }
    }]);
    return WithAnalytics;
  }(_react.Component), _class.displayName = 'WithAnalytics(' + (WrappedComponent.displayName || WrappedComponent.name) + ')', _class.contextTypes = {
    onAnalyticsEvent: _propTypes2.default.func,
    getParentAnalyticsData: _propTypes2.default.func
  }, _class.defaultProps = {
    analyticsId: defaultProps.analyticsId,
    analyticsData: defaultProps.analyticsData
  }, _temp2;
};

exports.default = withAnalytics;