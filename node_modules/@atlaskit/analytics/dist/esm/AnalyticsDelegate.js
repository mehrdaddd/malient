import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

/* eslint-disable react/sort-comp */
import React, { Component } from 'react';
import PropTypes from 'prop-types';

/*
Listens to public and private events and delegates to an analytics
stack in a different React root.
*/

var ContextTypes = {
  onAnalyticsEvent: PropTypes.func
};

var AnalyticsDelegate = function (_Component) {
  _inherits(AnalyticsDelegate, _Component);

  function AnalyticsDelegate() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AnalyticsDelegate);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AnalyticsDelegate.__proto__ || _Object$getPrototypeOf(AnalyticsDelegate)).call.apply(_ref, [this].concat(args))), _this), _this.onAnalyticsEvent = function (name, data, isPrivate) {
      var delegateAnalyticsEvent = _this.props.delegateAnalyticsEvent;

      // send a clean data object so it can't be mutated between listeners

      var eventData = _extends({}, data);
      if (delegateAnalyticsEvent) {
        delegateAnalyticsEvent(name, eventData, isPrivate);
      }

      // Pass the event up the hierarchy
      var onAnalyticsEvent = _this.context.onAnalyticsEvent;

      if (typeof onAnalyticsEvent === 'function') {
        onAnalyticsEvent(name, data, isPrivate);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(AnalyticsDelegate, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        onAnalyticsEvent: this.onAnalyticsEvent
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children; // eslint-disable-line react/prop-types

      return React.Children.only(children);
    }
  }]);

  return AnalyticsDelegate;
}(Component);

AnalyticsDelegate.contextTypes = ContextTypes;
AnalyticsDelegate.childContextTypes = ContextTypes;


export default AnalyticsDelegate;