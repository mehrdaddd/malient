import _Object$assign from 'babel-runtime/core-js/object/assign';
import _typeof from 'babel-runtime/helpers/typeof';
import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

/* eslint-disable react/sort-comp */
import React, { Component } from 'react';
import PropTypes from 'prop-types';

import matchEvent from './matchEvent';

/* The Decorator component extends analytics event data for any events fired by
its descendents, then passes the event up the hierarchy */

var ContextTypes = {
  onAnalyticsEvent: PropTypes.func,
  getParentAnalyticsData: PropTypes.func
};

var AnalyticsDecorator = function (_Component) {
  _inherits(AnalyticsDecorator, _Component);

  function AnalyticsDecorator() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AnalyticsDecorator);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AnalyticsDecorator.__proto__ || _Object$getPrototypeOf(AnalyticsDecorator)).call.apply(_ref, [this].concat(args))), _this), _this.getDecoratedAnalyticsData = function (name, srcData, isPrivate) {
      // Decorate the event data if this decorator matches the event name
      var _this$props = _this.props,
          data = _this$props.data,
          getData = _this$props.getData,
          match = _this$props.match,
          matchPrivate = _this$props.matchPrivate;

      var decoratedData = _extends({}, srcData);
      if (matchPrivate === isPrivate && matchEvent(match, name)) {
        if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
          _Object$assign(decoratedData, data);
        }
        if (typeof getData === 'function') {
          _Object$assign(decoratedData, getData(name, decoratedData));
        }
      }
      return decoratedData;
    }, _this.onAnalyticsEvent = function (name, srcData, isPrivate) {
      // Check there is a listener to pass the event to, otherwise there's no need
      // to do any of this work
      var onAnalyticsEvent = _this.context.onAnalyticsEvent;

      if (typeof onAnalyticsEvent !== 'function') return;
      var decoratedData = _this.getDecoratedAnalyticsData(name, srcData, isPrivate);
      // Pass the decorated event data to the next listener up the hierarchy
      onAnalyticsEvent(name, decoratedData, isPrivate);
    }, _this.getParentAnalyticsData = function (name, isPrivate) {
      var parentData = _this.getDecoratedAnalyticsData(name, {}, isPrivate);
      // Get any analytics data from any decorators up the hierarchy
      var getParentAnalyticsData = _this.context.getParentAnalyticsData;

      if (typeof getParentAnalyticsData === 'function') {
        _Object$assign(parentData, getParentAnalyticsData(name, isPrivate));
      }
      return parentData;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(AnalyticsDecorator, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        onAnalyticsEvent: this.onAnalyticsEvent,
        getParentAnalyticsData: this.getParentAnalyticsData
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children; // eslint-disable-line react/prop-types

      return React.Children.only(children);
    }
  }]);

  return AnalyticsDecorator;
}(Component);

AnalyticsDecorator.defaultProps = {
  match: '*',
  matchPrivate: false
};
AnalyticsDecorator.contextTypes = ContextTypes;
AnalyticsDecorator.childContextTypes = ContextTypes;


export default AnalyticsDecorator;