import _Object$keys from 'babel-runtime/core-js/object/keys';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import PropTypes from 'prop-types';

/*
The withAnalytics HOC wraps a component and provides the `fireAnalyticsEvent`
and `firePrivateAnalyticsEvent` methods to it as props. It contains the logic
for how to fire events, including handling the analyticsId and analyticsData
props. The `map` argument may be an object or a function that returns an object.
The properties of the `map` object/result can be strings (the name of the event
that will be fired) or functions (which are responsible for firing the event).
You can specify a default `analyticsId` and `analyticsData` with the `defaultProps`
param. Please be aware that specifying a default `analyticsId` will cause public
events to always fire for your component unless it has been set to a falsy by
the component consumer.
*/
var withAnalytics = function withAnalytics(WrappedComponent) {
  var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _class, _temp2;

  var defaultProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var withDelegation = arguments[3];
  return _temp2 = _class = function (_Component) {
    _inherits(WithAnalytics, _Component);

    function WithAnalytics() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, WithAnalytics);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = WithAnalytics.__proto__ || _Object$getPrototypeOf(WithAnalytics)).call.apply(_ref, [this].concat(args))), _this), _this.evaluatedMap = {}, _this.delegateAnalyticsEvent = function (analyticsId, data, isPrivate) {
        var onAnalyticsEvent = _this.context.onAnalyticsEvent;

        if (!onAnalyticsEvent) return;
        onAnalyticsEvent(analyticsId, data, isPrivate);
      }, _this.fireAnalyticsEvent = function (name, data) {
        var _this$props = _this.props,
            analyticsData = _this$props.analyticsData,
            analyticsId = _this$props.analyticsId;
        var onAnalyticsEvent = _this.context.onAnalyticsEvent;

        if (!analyticsId || !onAnalyticsEvent) return;
        var eventData = _extends({}, analyticsData, data);
        onAnalyticsEvent(analyticsId + '.' + name, eventData, false);
      }, _this.privateAnalyticsEvent = function (name, data) {
        var onAnalyticsEvent = _this.context.onAnalyticsEvent;

        if (!onAnalyticsEvent) return;
        onAnalyticsEvent('' + name, data, true);
      }, _this.getParentAnalyticsData = function (name) {
        var getParentAnalyticsData = _this.context.getParentAnalyticsData;

        var parentData = {};
        if (typeof getParentAnalyticsData === 'function' && _this.props.analyticsId) {
          var _analyticsId = _this.props.analyticsId;

          parentData = getParentAnalyticsData(_analyticsId + '.' + name, false);
        }
        return parentData;
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }
    // $FlowFixMe - type ComponentType does have property displayName. Unsure why this fails.


    _createClass(WithAnalytics, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this.evaluatedMap = typeof map === 'function' ? map(this.fireAnalyticsEvent) : map;
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;

        /* eslint-disable no-unused-vars */
        var _props = this.props,
            analyticsId = _props.analyticsId,
            analyticsData = _props.analyticsData,
            componentProps = _objectWithoutProperties(_props, ['analyticsId', 'analyticsData']);
        /* eslint-enable no-unused-vars */


        _Object$keys(this.evaluatedMap).forEach(function (prop) {
          var handler = _this2.evaluatedMap[prop]; // may be eventName or a function
          var originalProp = componentProps[prop];
          componentProps[prop] = function () {
            if (typeof handler === 'function') {
              handler.apply(undefined, arguments);
            } else {
              _this2.fireAnalyticsEvent(handler);
            }
            if (typeof originalProp === 'function') originalProp.apply(undefined, arguments);
          };
        });

        return React.createElement(WrappedComponent, _extends({
          fireAnalyticsEvent: this.fireAnalyticsEvent,
          firePrivateAnalyticsEvent: this.privateAnalyticsEvent,
          getParentAnalyticsData: this.getParentAnalyticsData,
          delegateAnalyticsEvent: withDelegation ? this.delegateAnalyticsEvent : undefined,
          analyticsId: analyticsId,
          ref: this.props.innerRef
        }, componentProps));
      }
    }]);

    return WithAnalytics;
  }(Component), _class.displayName = 'WithAnalytics(' + (WrappedComponent.displayName || WrappedComponent.name) + ')', _class.contextTypes = {
    onAnalyticsEvent: PropTypes.func,
    getParentAnalyticsData: PropTypes.func
  }, _class.defaultProps = {
    analyticsId: defaultProps.analyticsId,
    analyticsData: defaultProps.analyticsData
  }, _temp2;
};

export default withAnalytics;