import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { PureComponent } from 'react';
import SyntaxHighlighter from 'react-syntax-highlighter';
import { normalizeLanguage } from './supportedLanguages';
import { applyTheme } from './themes/themeBuilder';

var CodeBlock = function (_PureComponent) {
  _inherits(CodeBlock, _PureComponent);

  function CodeBlock() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CodeBlock);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CodeBlock.__proto__ || _Object$getPrototypeOf(CodeBlock)).call.apply(_ref, [this].concat(args))), _this), _this.handleCopy = function (event) {
      /**
       * We don't want to copy the markup after highlighting, but rather the preformatted text in the selection
       */
      var data = event.nativeEvent.clipboardData;
      if (data) {
        event.preventDefault();
        var selectedText = window.getSelection().toString();
        var document = '<!doctype html><html><head></head><body><pre>' + selectedText + '</pre></body></html>';
        data.clearData();
        data.setData('text/html', document);
        data.setData('text/plain', selectedText);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CodeBlock, [{
    key: 'render',
    value: function render() {
      var language = this.props.language;

      var _applyTheme = applyTheme(this.props.theme),
          lineNumberContainerStyle = _applyTheme.lineNumberContainerStyle,
          codeBlockStyle = _applyTheme.codeBlockStyle,
          codeContainerStyle = _applyTheme.codeContainerStyle;

      var props = {
        language: normalizeLanguage(language),
        style: codeBlockStyle,
        showLineNumbers: this.props.showLineNumbers,
        PreTag: 'span',
        codeTagProps: { style: codeContainerStyle },
        lineNumberContainerStyle: lineNumberContainerStyle
      };
      var codeText = this.props.text.toString();

      return React.createElement(
        SyntaxHighlighter,
        _extends({}, props, { onCopy: this.handleCopy }),
        codeText
      );
    }
  }]);

  return CodeBlock;
}(PureComponent);

CodeBlock.displayName = 'CodeBlock';
CodeBlock.defaultProps = {
  showLineNumbers: true,
  language: '',
  theme: {}
};
export default CodeBlock;