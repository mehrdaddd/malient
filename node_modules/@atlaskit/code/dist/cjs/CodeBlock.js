'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactSyntaxHighlighter = require('react-syntax-highlighter');

var _reactSyntaxHighlighter2 = _interopRequireDefault(_reactSyntaxHighlighter);

var _supportedLanguages = require('./supportedLanguages');

var _themeBuilder = require('./themes/themeBuilder');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CodeBlock = function (_PureComponent) {
  (0, _inherits3.default)(CodeBlock, _PureComponent);

  function CodeBlock() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, CodeBlock);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = CodeBlock.__proto__ || (0, _getPrototypeOf2.default)(CodeBlock)).call.apply(_ref, [this].concat(args))), _this), _this.handleCopy = function (event) {
      /**
       * We don't want to copy the markup after highlighting, but rather the preformatted text in the selection
       */
      var data = event.nativeEvent.clipboardData;
      if (data) {
        event.preventDefault();
        var selectedText = window.getSelection().toString();
        var document = '<!doctype html><html><head></head><body><pre>' + selectedText + '</pre></body></html>';
        data.clearData();
        data.setData('text/html', document);
        data.setData('text/plain', selectedText);
      }
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(CodeBlock, [{
    key: 'render',
    value: function render() {
      var language = this.props.language;

      var _applyTheme = (0, _themeBuilder.applyTheme)(this.props.theme),
          lineNumberContainerStyle = _applyTheme.lineNumberContainerStyle,
          codeBlockStyle = _applyTheme.codeBlockStyle,
          codeContainerStyle = _applyTheme.codeContainerStyle;

      var props = {
        language: (0, _supportedLanguages.normalizeLanguage)(language),
        style: codeBlockStyle,
        showLineNumbers: this.props.showLineNumbers,
        PreTag: 'span',
        codeTagProps: { style: codeContainerStyle },
        lineNumberContainerStyle: lineNumberContainerStyle
      };
      var codeText = this.props.text.toString();

      return _react2.default.createElement(
        _reactSyntaxHighlighter2.default,
        (0, _extends3.default)({}, props, { onCopy: this.handleCopy }),
        codeText
      );
    }
  }]);
  return CodeBlock;
}(_react.PureComponent);

CodeBlock.displayName = 'CodeBlock';
CodeBlock.defaultProps = {
  showLineNumbers: true,
  language: '',
  theme: {}
};
exports.default = CodeBlock;