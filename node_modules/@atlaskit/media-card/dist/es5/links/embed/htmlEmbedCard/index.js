"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var uuid = require("uuid/v1");
var getCSSUnitValue_1 = require("../../../utils/getCSSUnitValue");
var styled_1 = require("./styled");
var HTMLEmbedCard = /** @class */ (function (_super) {
    tslib_1.__extends(HTMLEmbedCard, _super);
    function HTMLEmbedCard() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // this unique id is used to filter resize messages so that we only update the size of the iframe
        // mounted by this component
        _this.id = uuid();
        _this.state = {
            isLoading: true,
        };
        _this.handleIframeMount = function (element) {
            _this.iframe = element;
        };
        _this.handleIframeLoad = function () {
            var _a = _this, id = _a.id, iframe = _a.iframe;
            var html = _this.props.html;
            if (iframe) {
                iframe.contentWindow.postMessage({
                    type: 'embed',
                    id: id,
                    html: html,
                }, '*');
            }
        };
        _this.handleMessage = function (event) {
            var iframe = _this.iframe;
            if (!iframe) {
                return;
            }
            if (!event.data || event.data.type !== 'embed:resize') {
                return;
            }
            var _a = event.data, id = _a.id, width = _a.width, height = _a.height;
            // only resize the iframe when the message is for the iframe we're rendering
            if (id !== _this.id) {
                return;
            }
            _this.setState({
                width: width,
                height: height,
                isLoading: false,
            });
        };
        return _this;
    }
    HTMLEmbedCard.prototype.componentDidMount = function () {
        window.addEventListener('message', this.handleMessage);
    };
    HTMLEmbedCard.prototype.componentWillUnmount = function () {
        window.removeEventListener('message', this.handleMessage);
    };
    Object.defineProperty(HTMLEmbedCard.prototype, "style", {
        // using inline-styles instead of props on a styled-component for perf reasons since the iframe
        // (which we don't control) could trigger frequent size changes and the runtime overhead of
        // generating and applying new classes may affect perf if it happens frequently enough.
        // See https://github.com/styled-components/styled-components/issues/134
        get: function () {
            var _a = this.state, width = _a.width, height = _a.height;
            return {
                width: width ? getCSSUnitValue_1.getCSSUnitValue(width) : '',
                height: height ? getCSSUnitValue_1.getCSSUnitValue(height) : '',
            };
        },
        enumerable: true,
        configurable: true
    });
    HTMLEmbedCard.prototype.render = function () {
        var isLoading = this.state.isLoading;
        return (React.createElement(styled_1.Iframe, { innerRef: this.handleIframeMount, onLoad: this.handleIframeLoad, style: this.style, isLoading: isLoading, allowFullScreen: true, src: "https://media-embed-iframe.prod.atl-paas.net/1.0.0" }));
    };
    return HTMLEmbedCard;
}(React.Component));
exports.HTMLEmbedCard = HTMLEmbedCard;
//# sourceMappingURL=index.js.map