"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var cardImageView_1 = require("../cardImageView");
var cardGenericViewSmall_1 = require("../../utils/cardGenericViewSmall");
var utils_1 = require("../../utils");
var FileCard = /** @class */ (function (_super) {
    tslib_1.__extends(FileCard, _super);
    function FileCard() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FileCard.prototype.render = function () {
        return this.renderFile();
    };
    FileCard.prototype.renderFile = function () {
        var _a = this.props, status = _a.status, dimensions = _a.dimensions, selectable = _a.selectable, selected = _a.selected, details = _a.details, dataURI = _a.dataURI, progress = _a.progress, resizeMode = _a.resizeMode, onRetry = _a.onRetry, disableOverlay = _a.disableOverlay;
        var defaultDetails = {
            id: '',
            name: undefined,
            mediaType: undefined,
            size: undefined,
        };
        var _b = details || defaultDetails, name = _b.name, mediaType = _b.mediaType, size = _b.size;
        var errorMessage = this.isError ? 'Failed to load' : undefined;
        if (this._isSmall()) {
            var subtitle = utils_1.toHumanReadableMediaSize(size || 0);
            return (React.createElement(cardGenericViewSmall_1.CardGenericViewSmall, { error: errorMessage, type: "file", mediaType: mediaType, title: name, subtitle: subtitle, thumbnailUrl: dataURI, dimensions: dimensions, loading: this.isLoading, onRetry: onRetry, actions: this._getActions() }));
        }
        else {
            var fileSize = utils_1.toHumanReadableMediaSize(size || 0);
            return (React.createElement(cardImageView_1.FileCardImageView, { error: errorMessage, dimensions: dimensions, selectable: selectable, selected: selected, dataURI: dataURI, mediaName: name, mediaType: mediaType, fileSize: fileSize, status: status, progress: progress, resizeMode: resizeMode, onRetry: onRetry, actions: this._getActions(), disableOverlay: disableOverlay }));
        }
    };
    FileCard.prototype._getActions = function () {
        var details = this.props.details;
        if (!details) {
            return [];
        }
        var actions = this.props.actions || [];
        return actions.map(function (action) {
            return tslib_1.__assign({}, action, { handler: function () {
                    action.handler({ type: 'file', details: details });
                } });
        });
    };
    FileCard.prototype._isSmall = function () {
        return this.props.appearance === 'small';
    };
    Object.defineProperty(FileCard.prototype, "isLoading", {
        get: function () {
            var status = this.props.status;
            return status === 'loading' || status === 'processing';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileCard.prototype, "isError", {
        get: function () {
            var status = this.props.status;
            return status === 'error';
        },
        enumerable: true,
        configurable: true
    });
    FileCard.defaultProps = {
        actions: [],
    };
    return FileCard;
}(react_1.Component));
exports.FileCard = FileCard;
//# sourceMappingURL=index.js.map