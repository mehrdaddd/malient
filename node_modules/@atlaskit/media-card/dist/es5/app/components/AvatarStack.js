"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var avatar_1 = require("@atlaskit/avatar");
var AvatarStack_1 = require("../styled/AvatarStack");
exports.AvatarStack = function (props) {
    /* tslint:disable-line:variable-name */
    var avatars = props.avatars, _a = props.max, max = _a === void 0 ? 5 : _a, _b = props.size, size = _b === void 0 ? 'medium' : _b, _c = props.borderColor, borderColor = _c === void 0 ? 'white' : _c;
    var tooManyAvatars = avatars.length > max;
    var avatarsSubset = avatars.slice(0, tooManyAvatars ? max - 1 : max);
    // reverse the array so the ordering is maintained when using flex-direction: row-reverse
    // clone the array because .reverse() mutates the array rather than returning a copy
    var avatarsReversed = avatarsSubset.slice().reverse();
    return (React.createElement(AvatarStack_1.StackWrapper, null,
        tooManyAvatars && (React.createElement(AvatarStack_1.ItemWrapper, { key: "more-avatars", borderColor: borderColor },
            React.createElement(AvatarStack_1.MoreAvatar, { avatarSize: size },
                "+",
                avatars.length - max + 1))),
        avatarsReversed.map(function (avatar, index) { return (React.createElement(AvatarStack_1.ItemWrapper, { key: index, borderColor: borderColor },
            React.createElement(avatar_1.default, tslib_1.__assign({}, avatar, { appearance: "circle", size: size, presenceBorderColor: borderColor })))); })));
};
//# sourceMappingURL=AvatarStack.js.map