"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * Only used internally ATM
 */
var React = require("react");
var ReactDOM = require("react-dom");
var react_1 = require("react");
var styled_1 = require("./styled");
var MediaImage = /** @class */ (function (_super) {
    tslib_1.__extends(MediaImage, _super);
    function MediaImage(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            imgWidth: 0,
            imgHeight: 0,
            parentWidth: Infinity,
            parentHeight: Infinity,
        };
        return _this;
    }
    // TODO FIL-4060 we need to check whether the dataURI changes in componentWillReceiveProps()
    // and if it does recalculate the image height and width
    MediaImage.prototype.componentWillMount = function () {
        this.img = new Image();
        this.img.src = this.props.dataURI;
        this.img.onload = this.onImageLoad(this);
        if (this.props.onError) {
            this.img.onerror = this.props.onError;
        }
    };
    MediaImage.prototype.componentDidMount = function () {
        var parent = ReactDOM.findDOMNode(this).parentElement;
        if (!parent) {
            return;
        }
        var _a = parent.getBoundingClientRect(), width = _a.width, height = _a.height;
        this.setState({
            parentWidth: width,
            parentHeight: height,
        });
    };
    MediaImage.prototype.componentWillUnmount = function () {
        this.img.onload = null;
    };
    MediaImage.prototype.onImageLoad = function (component) {
        return function () {
            component.setState({
                imgWidth: this.width,
                imgHeight: this.height,
            });
        };
    };
    MediaImage.prototype.render = function () {
        var _a = this.props, transparentFallback = _a.transparentFallback, crop = _a.crop, dataURI = _a.dataURI, fadeIn = _a.fadeIn, className = _a.className;
        var _b = this, implicitNoCrop = _b.implicitNoCrop, backgroundSize = _b.backgroundSize;
        var transparentBg = transparentFallback
            ? ", " + styled_1.transparentFallbackBackground
            : '';
        var style = {
            backgroundSize: backgroundSize,
            backgroundImage: "url(" + dataURI + ")" + transparentBg,
        };
        var isCropped = crop && !implicitNoCrop;
        var classNames = "media-card " + className;
        return (React.createElement(styled_1.ImageViewWrapper, { fadeIn: fadeIn, isCropped: isCropped, className: classNames, style: style }));
    };
    Object.defineProperty(MediaImage.prototype, "isSmallerThanWrapper", {
        get: function () {
            var _a = this.state, imgWidth = _a.imgWidth, parentWidth = _a.parentWidth, imgHeight = _a.imgHeight, parentHeight = _a.parentHeight;
            return imgWidth < parentWidth && imgHeight < parentHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaImage.prototype, "implicitNoCrop", {
        // If users specifies a custom dimensions, we take that as a no-crop and prioritize it over the 'crop' property
        get: function () {
            return this.props.width !== '100%' || this.props.height !== '100%';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaImage.prototype, "backgroundSize", {
        get: function () {
            var _a = this.props, width = _a.width, height = _a.height;
            var _b = this.state, imgWidth = _b.imgWidth, imgHeight = _b.imgHeight;
            return this.implicitNoCrop
                ? width + " " + height + ", auto"
                : this.isSmallerThanWrapper
                    ? imgWidth + "px " + imgHeight + "px, auto"
                    : undefined;
        },
        enumerable: true,
        configurable: true
    });
    MediaImage.defaultProps = {
        fadeIn: true,
        crop: true,
        transparentFallback: false,
        width: '100%',
        height: '100%',
    };
    return MediaImage;
}(react_1.Component));
exports.MediaImage = MediaImage;
//# sourceMappingURL=index.js.map