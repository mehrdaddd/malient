"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var cardView_1 = require("./cardView");
var withDataURI_1 = require("./withDataURI");
var CardViewWithDataURI = withDataURI_1.withDataURI(cardView_1.CardView); // tslint:disable-line:variable-name
var MediaCard = /** @class */ (function (_super) {
    tslib_1.__extends(MediaCard, _super);
    function MediaCard() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            status: _this.props.preview ? 'complete' : 'loading',
        };
        _this.observable = function (props) {
            var provider = props.provider;
            return provider.observable().map(function (result) {
                if (_this.isMediaItem(result)) {
                    return result.details;
                }
                else {
                    return result;
                }
            });
        };
        // This method is called when card fails and user press 'Retry'
        _this.onRetry = function () {
            _this.updateState(_this.props);
        };
        return _this;
    }
    MediaCard.prototype.componentDidMount = function () {
        this.updateState(this.props);
    };
    MediaCard.prototype.componentWillReceiveProps = function (nextProps) {
        if (this.shouldUpdateState(nextProps)) {
            this.updateState(nextProps);
        }
    };
    MediaCard.prototype.componentWillUnmount = function () {
        this.unsubscribe();
    };
    MediaCard.prototype.shouldUpdateState = function (nextProps) {
        return nextProps.provider !== this.props.provider;
    };
    MediaCard.prototype.isMediaItem = function (mediaItem) {
        return mediaItem && mediaItem.details !== undefined;
    };
    MediaCard.prototype.stateToCardProcessingStatus = function () {
        var _a = this.state, status = _a.status, error = _a.error, metadata = _a.metadata;
        return {
            type: status,
            payload: error || metadata,
        };
    };
    MediaCard.prototype.onLoadingChange = function (loadingChange) {
        var _a = this.props.onLoadingChange, onLoadingChange = _a === void 0 ? function () {
            /* do nothing */
        } : _a;
        onLoadingChange(loadingChange);
    };
    MediaCard.prototype.updateState = function (props) {
        var _this = this;
        this.unsubscribe();
        var onLoadingChangeCallback = function () {
            return _this.onLoadingChange(_this.stateToCardProcessingStatus());
        };
        var preview = this.props.preview;
        var status = preview ? 'complete' : 'loading';
        this.setState({ status: status }, function () {
            return _this.setState({
                subscription: _this.observable(props).subscribe({
                    next: function (metadata) {
                        _this.setState({ metadata: metadata, error: undefined, status: 'processing' }, onLoadingChangeCallback);
                    },
                    complete: function () {
                        _this.setState({ error: undefined, status: 'complete' }, onLoadingChangeCallback);
                    },
                    error: function (error) {
                        _this.setState({ error: error, status: 'error' }, onLoadingChangeCallback);
                    },
                }),
            }, onLoadingChangeCallback);
        });
    };
    MediaCard.prototype.unsubscribe = function () {
        if (this.state && this.state.subscription) {
            this.state.subscription.unsubscribe();
        }
    };
    MediaCard.prototype.render = function () {
        var _a = this.props, mediaItemType = _a.mediaItemType, dataURIService = _a.dataURIService, resizeMode = _a.resizeMode, preview = _a.preview, onClick = _a.onClick, onMouseEnter = _a.onMouseEnter, onSelectChange = _a.onSelectChange, appearance = _a.appearance, dimensions = _a.dimensions, actions = _a.actions, selectable = _a.selectable, selected = _a.selected, disableOverlay = _a.disableOverlay;
        var _b = this.state, metadata = _b.metadata, status = _b.status;
        return (React.createElement(CardViewWithDataURI, { dataURIService: dataURIService, status: status, preview: preview, mediaItemType: mediaItemType, metadata: metadata, resizeMode: resizeMode, onRetry: this.onRetry, onClick: onClick, onMouseEnter: onMouseEnter, onSelectChange: onSelectChange, appearance: appearance, dimensions: dimensions, actions: actions, selectable: selectable, selected: selected, disableOverlay: disableOverlay }));
    };
    return MediaCard;
}(react_1.Component));
exports.MediaCard = MediaCard;
//# sourceMappingURL=mediaCard.js.map