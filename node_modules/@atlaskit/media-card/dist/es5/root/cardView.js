"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var analytics_next_1 = require("@atlaskit/analytics-next");
var links_1 = require("../links");
var files_1 = require("../files");
var isLinkDetails_1 = require("../utils/isLinkDetails");
var breakpoint_1 = require("../utils/breakpoint");
var cardDimensions_1 = require("../utils/cardDimensions");
var isValidPercentageUnit_1 = require("../utils/isValidPercentageUnit");
var getCSSUnitValue_1 = require("../utils/getCSSUnitValue");
var getElementDimension_1 = require("../utils/getElementDimension");
var styled_1 = require("./styled");
var withCardViewAnalyticsContext_1 = require("./withCardViewAnalyticsContext");
/**
 * This is classic vanilla CardView class. To create an instance of class one would need to supply
 * `createAnalyticsEvent` prop to satisfy it's Analytics Events needs.
 */
var CardViewBase = /** @class */ (function (_super) {
    tslib_1.__extends(CardViewBase, _super);
    function CardViewBase(props) {
        var _this = _super.call(this, props) || this;
        _this.fireOnSelectChangeToConsumer = function (newSelectedState) {
            var _a = _this.props, metadata = _a.metadata, selectable = _a.selectable, onSelectChange = _a.onSelectChange;
            if (selectable && onSelectChange) {
                onSelectChange({
                    selected: newSelectedState,
                    mediaItemDetails: metadata,
                });
            }
        };
        _this.renderLink = function () {
            var _a = _this.props, status = _a.status, metadata = _a.metadata, resizeMode = _a.resizeMode, onRetry = _a.onRetry, appearance = _a.appearance, dimensions = _a.dimensions, actions = _a.actions, selectable = _a.selectable, selected = _a.selected;
            return (React.createElement(links_1.LinkCard, { status: status, details: metadata, resizeMode: resizeMode, onRetry: onRetry, appearance: appearance, dimensions: dimensions, actions: actions, selectable: selectable, selected: selected }));
        };
        _this.renderFile = function () {
            var _a = _this.props, status = _a.status, metadata = _a.metadata, dataURI = _a.dataURI, progress = _a.progress, onRetry = _a.onRetry, resizeMode = _a.resizeMode, appearance = _a.appearance, dimensions = _a.dimensions, actions = _a.actions, selectable = _a.selectable, selected = _a.selected, disableOverlay = _a.disableOverlay;
            return (React.createElement(files_1.FileCard, { status: status, details: metadata, dataURI: dataURI, progress: progress, onRetry: onRetry, resizeMode: resizeMode, appearance: appearance, dimensions: dimensions, actions: actions, selectable: selectable, selected: selected, disableOverlay: disableOverlay }));
        };
        _this.onClick = function (event) {
            var _a = _this.props, onClick = _a.onClick, mediaItemDetails = _a.metadata;
            if (onClick) {
                onClick({ event: event, mediaItemDetails: mediaItemDetails });
            }
        };
        _this.onMouseEnter = function (event) {
            var _a = _this.props, onMouseEnter = _a.onMouseEnter, mediaItemDetails = _a.metadata;
            if (onMouseEnter) {
                onMouseEnter({ event: event, mediaItemDetails: mediaItemDetails });
            }
        };
        _this.state = {};
        return _this;
    }
    CardViewBase.prototype.componentDidMount = function () {
        this.saveElementWidth();
    };
    CardViewBase.prototype.componentWillReceiveProps = function (nextProps) {
        var currSelected = this.props.selected;
        var nextSelectable = nextProps.selectable, nextSelected = nextProps.selected;
        // need to coerce to booleans as both "undefined" and "false" are considered NOT selected
        var cs = !!currSelected;
        var ns = !!nextSelected;
        if (nextSelectable && cs !== ns) {
            this.fireOnSelectChangeToConsumer(ns);
        }
    };
    Object.defineProperty(CardViewBase.prototype, "width", {
        // This width is only used to calculate breakpoints, dimensions are passed down as
        // integrator pass it to the root component
        get: function () {
            var elementWidth = this.state.elementWidth;
            if (elementWidth) {
                return elementWidth;
            }
            var width = (this.props.dimensions || { width: undefined }).width;
            if (!width) {
                return cardDimensions_1.defaultImageCardDimensions.width;
            }
            return getCSSUnitValue_1.getCSSUnitValue(width);
        },
        enumerable: true,
        configurable: true
    });
    // If the dimensions.width is a percentage, we need to transform it
    // into a pixel value in order to get the right breakpoints applied.
    CardViewBase.prototype.saveElementWidth = function () {
        var dimensions = this.props.dimensions;
        if (!dimensions) {
            return;
        }
        var width = dimensions.width;
        if (width && isValidPercentageUnit_1.isValidPercentageUnit(width)) {
            var elementWidth = getElementDimension_1.getElementDimension(this, 'width');
            this.setState({ elementWidth: elementWidth });
        }
    };
    CardViewBase.prototype.render = function () {
        var _a = this, onClick = _a.onClick, onMouseEnter = _a.onMouseEnter;
        var _b = this.props, dimensions = _b.dimensions, appearance = _b.appearance, mediaItemType = _b.mediaItemType;
        var wrapperDimensions = dimensions
            ? dimensions
            : mediaItemType === 'file'
                ? cardDimensions_1.getDefaultCardDimensions(appearance)
                : undefined;
        var card;
        if (mediaItemType === 'link') {
            card = this.renderLink();
        }
        else if (mediaItemType === 'file') {
            card = this.renderFile();
        }
        return (React.createElement(styled_1.Wrapper, { mediaItemType: mediaItemType, breakpointSize: breakpoint_1.breakpointSize(this.width), appearance: appearance, dimensions: wrapperDimensions, onClick: onClick, onMouseEnter: onMouseEnter }, card));
    };
    return CardViewBase;
}(React.Component));
exports.CardViewBase = CardViewBase;
var createAndFireEventOnMedia = analytics_next_1.createAndFireEvent('media');
/**
 * With this CardView class constructor version `createAnalyticsEvent` props is supplied for you, so
 * when creating instance of that class you don't need to worry about it.
 */
exports.CardViewWithAnalyticsEvents = analytics_next_1.withAnalyticsEvents({
    onClick: createAndFireEventOnMedia({ action: 'clicked' }),
})(CardViewBase);
/**
 * This if final version of CardView that is exported to the consumer. This version wraps everything
 * with Analytics Context information so that all the Analytics Events created anywhere inside CardView
 * will have it automatically.
 */
var CardView = /** @class */ (function (_super) {
    tslib_1.__extends(CardView, _super);
    function CardView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(CardView.prototype, "mediaItemType", {
        get: function () {
            var _a = this.props, mediaItemType = _a.mediaItemType, metadata = _a.metadata;
            if (mediaItemType) {
                return mediaItemType;
            }
            return isLinkDetails_1.isLinkDetails(metadata) ? 'link' : 'file';
        },
        enumerable: true,
        configurable: true
    });
    CardView.prototype.render = function () {
        var mediaItemType = this.mediaItemType;
        return (React.createElement(withCardViewAnalyticsContext_1.WithCardViewAnalyticsContext, tslib_1.__assign({}, this.props, { mediaItemType: mediaItemType }),
            React.createElement(exports.CardViewWithAnalyticsEvents, tslib_1.__assign({}, this.props, { mediaItemType: mediaItemType }))));
    };
    CardView.defaultProps = {
        appearance: 'auto',
    };
    return CardView;
}(React.Component));
exports.CardView = CardView;
//# sourceMappingURL=cardView.js.map