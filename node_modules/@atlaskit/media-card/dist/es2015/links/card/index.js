import * as tslib_1 from "tslib";
import * as React from 'react';
import { Component } from 'react';
import { AppCardView } from '../../app';
import { LinkCardGenericView } from '../cardGenericView';
import { CardGenericViewSmall } from '../../utils/cardGenericViewSmall';
import { URLEmbedCard } from '../embed/urlEmbedCard';
import { HTMLEmbedCard } from '../embed/htmlEmbedCard';
import { A } from './styled';
export var defaultLinkCardAppearance = 'square';
var LinkCard = /** @class */ (function (_super) {
    tslib_1.__extends(LinkCard, _super);
    function LinkCard() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LinkCard.prototype.render = function () {
        var _a = this.resources, smartCard = _a.smartCard, app = _a.app, player = _a.player;
        var appearance = this.props.appearance;
        switch (appearance) {
            case 'small':
                return this.renderSmallCard();
            case 'horizontal':
                return this.renderGenericLink(appearance);
            case 'square':
                return this.renderGenericLink(appearance);
            default:
                if (smartCard) {
                    return this.renderSmartCard();
                }
                else if (app && this.isEmbed(app)) {
                    return this.renderEmbed(app);
                }
                else if (player && this.isEmbed(player)) {
                    return this.renderEmbed(player);
                }
                else {
                    return this.renderGenericLink(defaultLinkCardAppearance);
                }
        }
    };
    LinkCard.prototype.renderInLink = function (link, child) {
        var _a = this, isLoading = _a.isLoading, isError = _a.isError;
        if (link && !isLoading && !isError) {
            return (React.createElement(A, { linkUrl: link, className: "link-wrapper" }, child));
        }
        else {
            return child;
        }
    };
    LinkCard.prototype.isURLEmbed = function (embed) {
        var type = embed.type, url = embed.url, height = embed.height, aspect_ratio = embed.aspect_ratio;
        // we can only embed HTML pages in an iframe
        if (type !== 'text/html') {
            return false;
        }
        // we need a height to know how big to show the iframe, otherwise, for some embeds,
        // we will be cutting off the content, or showing too much whitespace around the content.
        // we don't care as much about the width - most will stretch content to the width, or center content
        return Boolean(url && (height || aspect_ratio));
    };
    LinkCard.prototype.isHTMLEmbed = function (embed) {
        var type = embed.type, html = embed.html;
        // we can only embed HTML pages in an iframe
        if (type !== 'text/html') {
            return false;
        }
        return Boolean(html);
    };
    LinkCard.prototype.isEmbed = function (embed) {
        return this.isURLEmbed(embed) || this.isHTMLEmbed(embed);
    };
    LinkCard.prototype.renderURLEmbed = function (embed) {
        var url = embed.url, width = embed.width, height = embed.height, aspect_ratio = embed.aspect_ratio;
        return (React.createElement(URLEmbedCard, { url: url || '', width: width, height: height, aspectRatio: aspect_ratio }));
    };
    LinkCard.prototype.renderHTMLEmbed = function (embed) {
        var html = embed.html;
        return React.createElement(HTMLEmbedCard, { html: html || '' });
    };
    LinkCard.prototype.renderEmbed = function (embed) {
        if (this.isURLEmbed(embed)) {
            return this.renderURLEmbed(embed);
        }
        if (this.isHTMLEmbed(embed)) {
            return this.renderHTMLEmbed(embed);
        }
        // this case should never occur provided we've called `isEmbed(embed)` before calling this method
        return null;
    };
    LinkCard.prototype.renderSmartCard = function () {
        var smartCard = this.resources.smartCard;
        // this check is just to silence TS - this method should never be called if we don't have
        // data for a smart-card
        if (!smartCard) {
            throw new Error('Must have smartCard data to render a smart card');
        }
        return this.renderInLink(smartCard.link ? smartCard.link.url : '', React.createElement(AppCardView, { model: smartCard }));
    };
    LinkCard.prototype.renderGenericLink = function (appearance) {
        var _a = this.urlPreview, url = _a.url, title = _a.title, site = _a.site, description = _a.description;
        var _b = this.props, dimensions = _b.dimensions, actions = _b.actions, onRetry = _b.onRetry;
        var errorMessage = this.errorMessage;
        return (React.createElement(LinkCardGenericView, { errorMessage: errorMessage, linkUrl: url, title: title, site: site, description: description, thumbnailUrl: this.thumbnailUrl, iconUrl: this.iconUrl, dimensions: dimensions, appearance: appearance, isLoading: this.isLoading, actions: actions, onRetry: onRetry }));
    };
    LinkCard.prototype.renderSmallCard = function () {
        var _a = this.urlPreview, url = _a.url, title = _a.title, site = _a.site;
        var _b = this.props, dimensions = _b.dimensions, actions = _b.actions, onRetry = _b.onRetry;
        var _c = this, iconUrl = _c.iconUrl, thumbnailUrl = _c.thumbnailUrl, isLoading = _c.isLoading, errorMessage = _c.errorMessage;
        return this.renderInLink(url, React.createElement(CardGenericViewSmall, { title: title, subtitle: site || url, iconUrl: iconUrl, thumbnailUrl: thumbnailUrl, dimensions: dimensions, loading: isLoading, actions: actions, error: errorMessage, type: "link", mediaType: "image", onRetry: onRetry }));
    };
    Object.defineProperty(LinkCard.prototype, "resources", {
        get: function () {
            var resources = this.urlPreview.resources;
            return resources || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkCard.prototype, "urlPreview", {
        get: function () {
            var defaultUrlPreview = { type: '', url: '', title: '' };
            var urlPreview = this.props.details;
            // We provide a defaultUrlPreview in order to conform what the card is expecting and show the right loading status
            return urlPreview || defaultUrlPreview;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkCard.prototype, "thumbnailUrl", {
        get: function () {
            var _a = this.resources, thumbnail = _a.thumbnail, image = _a.image;
            var imageUrl = image ? image.url : undefined;
            var thumbnailUrl = thumbnail ? thumbnail.url : undefined;
            // TODO: Should we default here to 'this.iconUrl'?
            return imageUrl || thumbnailUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkCard.prototype, "iconUrl", {
        get: function () {
            var icon = this.resources.icon;
            return icon ? icon.url : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkCard.prototype, "isLoading", {
        get: function () {
            var status = this.props.status;
            return status === 'loading' || status === 'processing';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkCard.prototype, "isError", {
        get: function () {
            var status = this.props.status;
            return status === 'error';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkCard.prototype, "errorMessage", {
        get: function () {
            return this.isError ? 'Loading failed' : undefined;
        },
        enumerable: true,
        configurable: true
    });
    return LinkCard;
}(Component));
export { LinkCard };
export default LinkCard;
//# sourceMappingURL=index.js.map