/// <reference types="react" />
import * as React from 'react';
export declare type ObjectType = {
    [key: string]: any;
};
export declare type AnalyticsEventPayload = {
    action: string;
    [key: string]: any;
};
export declare type AnalyticsEventUpdater = ObjectType | ((payload: AnalyticsEventPayload) => AnalyticsEventPayload);
export declare type AnalyticsEventProps = {
    action: string;
    payload: AnalyticsEventPayload;
};
export interface AnalyticsEventInterface {
    payload: AnalyticsEventPayload;
    clone: () => AnalyticsEventInterface;
    update(updater: AnalyticsEventUpdater): AnalyticsEventInterface;
}
export declare type ChannelIdentifier = string;
export interface UIAnalyticsEventHandlerSignature {
    (event: UIAnalyticsEventInterface, channel?: ChannelIdentifier): void;
}
export declare type UIAnalyticsEventProps = AnalyticsEventProps & {
    context?: Array<ObjectType>;
    handlers?: Array<UIAnalyticsEventHandlerSignature>;
};
export interface UIAnalyticsEventInterface {
    context: Array<ObjectType>;
    handlers?: Array<UIAnalyticsEventHandlerSignature>;
    hasFired: boolean;
    payload: AnalyticsEventPayload;
    clone: () => UIAnalyticsEventInterface | null;
    fire(channel?: ChannelIdentifier): void;
    update(updater: AnalyticsEventUpdater): UIAnalyticsEventInterface;
}
export interface AnalyticsListenerProps {
    children?: React.ReactNode;
    channel?: string;
    onEvent: (event: UIAnalyticsEventInterface, channel?: string) => void;
}
export declare class AnalyticsListener extends React.Component<AnalyticsListenerProps> {
}
export interface AnalyticsContextProps {
    children: React.ReactNode;
    data: ObjectType;
}
export declare class AnalyticsContext extends React.Component<AnalyticsContextProps> {
}
export declare type WithAnalyticsContextProps = {
    analyticsContext?: ObjectType;
};
export declare type WithAnalyticsContextFunction = <TOwnProps>(component: React.ComponentClass<TOwnProps>) => React.ComponentClass<TOwnProps & WithAnalyticsContextProps>;
export declare function withAnalyticsContext(defaultData?: any): WithAnalyticsContextFunction;
export declare type CreateUIAnalyticsEventSignature = (payload?: AnalyticsEventPayload) => UIAnalyticsEventInterface;
export interface EventMap<TOwnProps> {
    [k: string]: ObjectType | ((create: CreateUIAnalyticsEventSignature, props: TOwnProps) => UIAnalyticsEventInterface | void);
}
export interface WithAnalyticsEventProps {
    createAnalyticsEvent: CreateUIAnalyticsEventSignature;
}
export declare type WithAnalyticsEventFunction = <TOwnProps>(component: React.ComponentClass<WithAnalyticsEventProps & TOwnProps>) => React.ComponentClass<TOwnProps>;
export declare function withAnalyticsEvents<TOwnProps>(createEventMap?: EventMap<TOwnProps>): WithAnalyticsEventFunction;
export declare type CreateAndFireEventFunction = (payload: AnalyticsEventPayload) => (createAnalyticsEvent: CreateUIAnalyticsEventSignature) => UIAnalyticsEventInterface;
export declare function createAndFireEvent(channel?: string): CreateAndFireEventFunction;
