/// <reference types="react" />
import * as React from 'react';
import { ReactNode, MouseEvent } from 'react';
export declare const MUTATION_CONFIG: {
    attributes: boolean;
    childList: boolean;
    subtree: boolean;
    characterData: boolean;
};
export interface ChildOffset {
    left: number;
    right: number;
}
export interface SizeEvent {
    width: number;
    offset: number;
    offsets: ChildOffset[];
    minOffset: number;
    maxOffset: number;
}
export interface ScrollEvent {
    direction: 'left' | 'right';
    offset: number;
    animate: boolean;
}
export interface FilmstripViewProps {
    animate?: boolean;
    offset?: number;
    children?: ReactNode;
    onSize?: (event: SizeEvent) => void;
    onScroll?: (event: ScrollEvent) => void;
}
export interface FilmstripViewState {
    bufferWidth: number;
    windowWidth: number;
}
export interface ArrowProps {
    onClick: (event: MouseEvent<HTMLDivElement>) => void;
}
export declare const LeftArrow: React.SFC<ArrowProps>;
export declare const RightArrow: React.SFC<ArrowProps>;
export declare class FilmstripView extends React.Component<FilmstripViewProps, FilmstripViewState> {
    static defaultProps: Partial<FilmstripViewProps>;
    bufferElement: HTMLElement;
    windowElement: HTMLElement;
    mutationObserver: MutationObserver;
    childOffsets: ChildOffset[];
    previousOffset: number;
    state: {
        bufferWidth: number;
        windowWidth: number;
    };
    constructor(props: any);
    readonly offset: number;
    readonly minOffset: number;
    /**
     * The furthest we can scroll, where the end of the buffer is just in view
     */
    readonly maxOffset: number;
    readonly canGoLeft: boolean;
    readonly canGoRight: boolean;
    readonly transitionDuration: number;
    initMutationObserver(): void;
    triggerScrollEvent(): void;
    getClosestForLeft(offset: number): number;
    getClosestForRight(offset: number): number;
    handleSizeChange: () => void;
    handleWindowElementChange: (windowElement: any) => void;
    handleBufferElementChange: (bufferElement: any) => void;
    handleMutation: (mutationList: MutationRecord[]) => void;
    handleLeftClick: (event: any) => void;
    handleRightClick: (event: any) => void;
    handleScroll: (event: React.WheelEvent<HTMLDivElement>) => void;
    renderLeftArrow(): JSX.Element | null;
    renderRightArrow(): JSX.Element | null;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(): void;
    render(): JSX.Element;
}
