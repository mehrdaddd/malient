/// <reference types="react" />
import { PureComponent } from 'react';
import { Appearance } from '../types';
import { Item, OnUpdate, Query, RenderDocument, TaskDecisionProvider } from '../types';
export interface Props {
    taskDecisionProvider: Promise<TaskDecisionProvider>;
    initialQuery: Query;
    renderDocument: RenderDocument;
    onUpdate?: OnUpdate<Item>;
    groupItems?: boolean;
    /**
     * Infinite scrolling is only enabled when height has also been specified.
     *
     * Note infinite scrolling will not work if the initial data set does not fill the container.
     *
     * It's recommend to set the limit to at least 100 in the initialQuery (this is the default) to
     * workaround this limitation.
     */
    useInfiniteScroll?: boolean;
    height?: number | string;
    emptyComponent?: JSX.Element;
    errorComponent?: JSX.Element;
    appearance?: Appearance;
}
export interface State {
    items?: Item[];
    nextQuery?: Query;
    loading: boolean;
    error: boolean;
}
export default class ResourcedItemList extends PureComponent<Props, State> {
    static defaultProps: Partial<Props>;
    private mounted;
    private recentUpdatesId;
    constructor(props: Props);
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentWillReceiveProps(nextProps: any): void;
    private unsubscribeRecentUpdates();
    private loadLatest;
    private performInitialQuery(props);
    private performQuery(query, replaceAll, recentUpdatesListener?);
    private loadMore;
    private renderItems();
    private renderItemsUngrouped(items);
    private renderItemsGroupedByDate(items);
    private groupItemsByDate(items);
    render(): JSX.Element | null;
}
