import { Decision, Item, Query, RecentUpdateContext, Task, TaskDecisionProvider } from '../types';
/**
 * Grabs the latest Items from the service, deduplicating against existing items.
 */
export declare const loadLatestItems: (query: Query, existing: Item[], provider: TaskDecisionProvider, recentUpdateContext: RecentUpdateContext) => Promise<Item[]>;
/**
 * Grabs the latest Decisions from the service, deduplicating against existing Decisions.
 */
export declare const loadLatestDecisions: (query: Query, existing: Decision[], provider: TaskDecisionProvider) => Promise<Decision[]>;
/**
 * Grabs the latest Tasks from the service, deduplicating against existing Tasks.
 */
export declare const loadLatestTasks: (query: Query, existing: Task[], provider: TaskDecisionProvider) => Promise<Task[]>;
export interface ItemLoader<T> {
    (): Promise<T[]>;
}
export declare const retryIteration: <T extends Item>(loader: ItemLoader<T>, recentUpdateContext: RecentUpdateContext, retry?: number) => Promise<T[]>;
export declare const loadWithDelay: <T>(loader: ItemLoader<T>, delay: number) => Promise<T[]>;
export interface ItemLike {
    localId: string;
}
export declare const mergeItems: <I extends ItemLike>(existingItems: I[], newItems: I[]) => I[];
