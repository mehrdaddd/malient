"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var Participants_1 = require("./Participants");
var Item_1 = require("../styled/Item");
var Placeholder_1 = require("../styled/Placeholder");
var Item = /** @class */ (function (_super) {
    tslib_1.__extends(Item, _super);
    function Item() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Item.prototype.renderPlaceholder = function () {
        var _a = this.props, children = _a.children, placeholder = _a.placeholder, showPlaceholder = _a.showPlaceholder;
        if (!showPlaceholder || children) {
            return null;
        }
        return React.createElement(Placeholder_1.Placeholder, { contentEditable: false }, placeholder);
    };
    Item.prototype.renderParticipants = function () {
        var _a = this.props, appearance = _a.appearance, _b = _a.participants, participants = _b === void 0 ? [] : _b;
        if (appearance === 'inline' || !participants.length) {
            return null;
        }
        return (React.createElement(Item_1.ParticipantWrapper, null,
            React.createElement(Participants_1.default, { participants: participants })));
    };
    Item.prototype.renderAttribution = function () {
        var attribution = this.props.attribution;
        if (!attribution) {
            return null;
        }
        return React.createElement(Item_1.AttributionWrapper, null, attribution);
    };
    Item.prototype.renderCardAppearance = function () {
        var _a = this.props, appearance = _a.appearance, contentRef = _a.contentRef, children = _a.children, icon = _a.icon;
        return (React.createElement(Item_1.Wrapper, { theme: { appearance: appearance } },
            React.createElement(Item_1.CardHeadingWrapper, null,
                icon,
                this.renderParticipants(),
                this.renderPlaceholder()),
            React.createElement(Item_1.ContentWrapper, { innerRef: contentRef }, children),
            this.renderAttribution()));
    };
    Item.prototype.renderMessageAppearance = function () {
        var _a = this.props, appearance = _a.appearance, contentRef = _a.contentRef, children = _a.children, icon = _a.icon;
        return (React.createElement(Item_1.Wrapper, { theme: { appearance: appearance } },
            icon,
            this.renderPlaceholder(),
            React.createElement(Item_1.ContentWrapper, { innerRef: contentRef }, children)));
    };
    Item.prototype.render = function () {
        var appearance = this.props.appearance;
        if (appearance === 'card') {
            return this.renderCardAppearance();
        }
        return this.renderMessageAppearance();
    };
    Item.defaultProps = {
        appearance: 'inline',
    };
    return Item;
}(react_1.PureComponent));
exports.default = Item;
//# sourceMappingURL=Item.js.map