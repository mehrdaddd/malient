'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styledExpander = require('./styledExpander');

var _styledExpander2 = _interopRequireDefault(_styledExpander);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Expander = function (_Component) {
  (0, _inherits3.default)(Expander, _Component);

  function Expander() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Expander);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Expander.__proto__ || (0, _getPrototypeOf2.default)(Expander)).call.apply(_ref, [this].concat(args))), _this), _this.state = { isAnimating: false }, _this.handleTransitionEnd = function () {
      _this.setState({ isAnimating: false });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  } // eslint-disable-line react/sort-comp


  (0, _createClass3.default)(Expander, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.isExpanded !== nextProps.isExpanded) {
        this.setState({ isAnimating: true });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          isExpanded = _props.isExpanded;
      var isAnimating = this.state.isAnimating;

      // Need to always render the ExpanderInternal otherwise the
      // reveal transiton doesn't happen. We can't use CSS animation for
      // the the reveal because we don't know the height of the content.

      var childrenIfExpanded = isAnimating || isExpanded ? children : null;

      return _react2.default.createElement(
        _styledExpander2.default,
        {
          'aria-hidden': !isExpanded,
          isExpanded: isExpanded,
          onTransitionEnd: this.handleTransitionEnd
        },
        childrenIfExpanded
      );
    }
  }]);
  return Expander;
}(_react.Component);

Expander.defaultProps = { isExpanded: false };
exports.default = Expander;