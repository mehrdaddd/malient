'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_APPEARANCE = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _cross = require('@atlaskit/icon/glyph/cross');

var _cross2 = _interopRequireDefault(_cross);

var _chevronUp = require('@atlaskit/icon/glyph/chevron-up');

var _chevronUp2 = _interopRequireDefault(_chevronUp);

var _chevronDown = require('@atlaskit/icon/glyph/chevron-down');

var _chevronDown2 = _interopRequireDefault(_chevronDown);

var _styledFlag = require('./styledFlag');

var _styledFlag2 = _interopRequireDefault(_styledFlag);

var _Expander = require('../Expander');

var _Expander2 = _interopRequireDefault(_Expander);

var _FlagActions = require('../FlagActions');

var _FlagActions2 = _interopRequireDefault(_FlagActions);

var _theme = require('../../theme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_APPEARANCE = exports.DEFAULT_APPEARANCE = 'normal';

var Flag = function (_Component) {
  (0, _inherits3.default)(Flag, _Component);

  function Flag() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Flag);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Flag.__proto__ || (0, _getPrototypeOf2.default)(Flag)).call.apply(_ref, [this].concat(args))), _this), _this.state = { isExpanded: false }, _this.dismissFlag = function () {
      if (_this.props.isDismissAllowed && _this.props.onDismissed) {
        _this.props.onDismissed(_this.props.id);
      }
    }, _this.isBold = function () {
      return _this.props.appearance !== DEFAULT_APPEARANCE;
    }, _this.toggleExpand = function () {
      _this.setState({ isExpanded: !_this.state.isExpanded });
    }, _this.renderToggleOrDismissButton = function () {
      var _this$props = _this.props,
          appearance = _this$props.appearance,
          description = _this$props.description,
          actions = _this$props.actions,
          isDismissAllowed = _this$props.isDismissAllowed,
          onDismissed = _this$props.onDismissed;

      var isBold = _this.isBold();
      if (!isDismissAllowed || !isBold && !onDismissed || isBold && !description && (!actions || !actions.length)) {
        return null;
      }

      var ChevronIcon = _this.state.isExpanded ? _chevronUp2.default : _chevronDown2.default;
      var ButtonIcon = isBold ? ChevronIcon : _cross2.default;
      var buttonLabel = isBold ? 'Toggle flag body' : 'Dismiss flag';
      var buttonAction = isBold ? _this.toggleExpand : _this.dismissFlag;
      var size = ButtonIcon === ChevronIcon ? 'large' : 'small';

      return _react2.default.createElement(
        _styledFlag.DismissButton,
        {
          appearance: appearance,
          'aria-expanded': _this.state.isExpanded
          // $FlowFixMe TEMPORARY
          , focusRingColor: (0, _theme.flagFocusRingColor)(_this.props),
          onClick: buttonAction,
          type: 'button'
        },
        _react2.default.createElement(ButtonIcon, { label: buttonLabel, size: size })
      );
    }, _this.renderBody = function () {
      var _this$props2 = _this.props,
          actions = _this$props2.actions,
          appearance = _this$props2.appearance,
          description = _this$props2.description;

      var isExpanded = !_this.isBold() || _this.state.isExpanded;

      return _react2.default.createElement(
        _Expander2.default,
        { isExpanded: isExpanded },
        description && _react2.default.createElement(
          _styledFlag.Description,
          { appearance: appearance },
          description
        ),
        _react2.default.createElement(_FlagActions2.default, { actions: actions, appearance: appearance })
      );
    }, _this.handleMouseDown = function (e) {
      e.preventDefault();
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  } // eslint-disable-line react/sort-comp

  (0, _createClass3.default)(Flag, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var actions = nextProps.actions,
          description = nextProps.description;

      if (this.isBold() && this.state.isExpanded && !description && (!actions || !actions.length)) {
        this.toggleExpand();
      }
    }

    // We prevent default on mouse down to avoid focus ring when the flag is clicked,
    // while still allowing it to be focused with the keyboard.

  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          appearance = _props.appearance,
          icon = _props.icon,
          title = _props.title,
          onMouseOver = _props.onMouseOver,
          onFocus = _props.onFocus,
          onMouseOut = _props.onMouseOut,
          onBlur = _props.onBlur;

      var autoDismissProps = { onMouseOver: onMouseOver, onFocus: onFocus, onMouseOut: onMouseOut, onBlur: onBlur };
      var OptionalDismissButton = this.renderToggleOrDismissButton;
      var Body = this.renderBody;

      return _react2.default.createElement(
        _styledFlag2.default,
        (0, _extends3.default)({
          appearance: appearance,
          role: 'alert',
          tabIndex: '0',
          onMouseDown: this.handleMouseDown
        }, autoDismissProps),
        _react2.default.createElement(
          _styledFlag.Header,
          null,
          _react2.default.createElement(
            _styledFlag.Icon,
            null,
            icon
          ),
          _react2.default.createElement(
            _styledFlag.Title,
            { appearance: appearance },
            title
          ),
          _react2.default.createElement(OptionalDismissButton, null)
        ),
        _react2.default.createElement(
          _styledFlag.Content,
          null,
          _react2.default.createElement(Body, null)
        )
      );
    }
  }]);
  return Flag;
}(_react.Component);

Flag.defaultProps = {
  actions: [],
  appearance: DEFAULT_APPEARANCE,
  isDismissAllowed: false
};
exports.default = Flag;