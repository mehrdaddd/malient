import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Children, cloneElement, Component } from 'react';
import { Transition } from 'react-transition-group';
import { withRenderTarget } from '@atlaskit/layer-manager';

import Wrapper from '../../styled/Wrapper';
import Group, { SROnly, Inner } from './styledFlagGroup';

var FlagGroup = function (_Component) {
  _inherits(FlagGroup, _Component);

  function FlagGroup() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FlagGroup);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FlagGroup.__proto__ || _Object$getPrototypeOf(FlagGroup)).call.apply(_ref, [this].concat(args))), _this), _this.renderChildren = function () {
      var _this$props = _this.props,
          children = _this$props.children,
          onDismissed = _this$props.onDismissed;


      return Children.map(children, function (flag, idx) {
        var isDismissAllowed = idx === 0;
        var id = flag.props.id;


        return React.createElement(
          Transition,
          {
            key: id,
            addEndListener: function addEndListener(node, done) {
              node.addEventListener('animationend', done);
            }
          },
          function (transitionState) {
            return React.createElement(
              Wrapper,
              { transitionState: transitionState },
              cloneElement(flag, { onDismissed: onDismissed, isDismissAllowed: isDismissAllowed })
            );
          }
        );
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  } // eslint-disable-line react/sort-comp

  _createClass(FlagGroup, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        Group,
        null,
        React.createElement(
          SROnly,
          null,
          'Flag notifications'
        ),
        React.createElement(
          Inner,
          { component: 'div' },
          this.renderChildren()
        )
      );
    }
  }]);

  return FlagGroup;
}(Component);

export default withRenderTarget({
  target: 'flag',
  withTransitionGroup: false
},
// $FlowFixMe TEMPORARY
FlagGroup);