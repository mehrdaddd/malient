import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import CrossIcon from '@atlaskit/icon/glyph/cross';
import ChevronUpIcon from '@atlaskit/icon/glyph/chevron-up';
import ChevronDownIcon from '@atlaskit/icon/glyph/chevron-down';
import Container, { Description, DismissButton, Icon, Content, Title, Header } from './styledFlag';
import Expander from '../Expander';
import Actions from '../FlagActions';
import { flagFocusRingColor } from '../../theme';


export var DEFAULT_APPEARANCE = 'normal';

var Flag = function (_Component) {
  _inherits(Flag, _Component);

  function Flag() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Flag);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Flag.__proto__ || _Object$getPrototypeOf(Flag)).call.apply(_ref, [this].concat(args))), _this), _this.state = { isExpanded: false }, _this.dismissFlag = function () {
      if (_this.props.isDismissAllowed && _this.props.onDismissed) {
        _this.props.onDismissed(_this.props.id);
      }
    }, _this.isBold = function () {
      return _this.props.appearance !== DEFAULT_APPEARANCE;
    }, _this.toggleExpand = function () {
      _this.setState({ isExpanded: !_this.state.isExpanded });
    }, _this.renderToggleOrDismissButton = function () {
      var _this$props = _this.props,
          appearance = _this$props.appearance,
          description = _this$props.description,
          actions = _this$props.actions,
          isDismissAllowed = _this$props.isDismissAllowed,
          onDismissed = _this$props.onDismissed;

      var isBold = _this.isBold();
      if (!isDismissAllowed || !isBold && !onDismissed || isBold && !description && (!actions || !actions.length)) {
        return null;
      }

      var ChevronIcon = _this.state.isExpanded ? ChevronUpIcon : ChevronDownIcon;
      var ButtonIcon = isBold ? ChevronIcon : CrossIcon;
      var buttonLabel = isBold ? 'Toggle flag body' : 'Dismiss flag';
      var buttonAction = isBold ? _this.toggleExpand : _this.dismissFlag;
      var size = ButtonIcon === ChevronIcon ? 'large' : 'small';

      return React.createElement(
        DismissButton,
        {
          appearance: appearance,
          'aria-expanded': _this.state.isExpanded
          // $FlowFixMe TEMPORARY
          , focusRingColor: flagFocusRingColor(_this.props),
          onClick: buttonAction,
          type: 'button'
        },
        React.createElement(ButtonIcon, { label: buttonLabel, size: size })
      );
    }, _this.renderBody = function () {
      var _this$props2 = _this.props,
          actions = _this$props2.actions,
          appearance = _this$props2.appearance,
          description = _this$props2.description;

      var isExpanded = !_this.isBold() || _this.state.isExpanded;

      return React.createElement(
        Expander,
        { isExpanded: isExpanded },
        description && React.createElement(
          Description,
          { appearance: appearance },
          description
        ),
        React.createElement(Actions, { actions: actions, appearance: appearance })
      );
    }, _this.handleMouseDown = function (e) {
      e.preventDefault();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  } // eslint-disable-line react/sort-comp

  _createClass(Flag, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var actions = nextProps.actions,
          description = nextProps.description;

      if (this.isBold() && this.state.isExpanded && !description && (!actions || !actions.length)) {
        this.toggleExpand();
      }
    }

    // We prevent default on mouse down to avoid focus ring when the flag is clicked,
    // while still allowing it to be focused with the keyboard.

  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          appearance = _props.appearance,
          icon = _props.icon,
          title = _props.title,
          onMouseOver = _props.onMouseOver,
          onFocus = _props.onFocus,
          onMouseOut = _props.onMouseOut,
          onBlur = _props.onBlur;

      var autoDismissProps = { onMouseOver: onMouseOver, onFocus: onFocus, onMouseOut: onMouseOut, onBlur: onBlur };
      var OptionalDismissButton = this.renderToggleOrDismissButton;
      var Body = this.renderBody;

      return React.createElement(
        Container,
        _extends({
          appearance: appearance,
          role: 'alert',
          tabIndex: '0',
          onMouseDown: this.handleMouseDown
        }, autoDismissProps),
        React.createElement(
          Header,
          null,
          React.createElement(
            Icon,
            null,
            icon
          ),
          React.createElement(
            Title,
            { appearance: appearance },
            title
          ),
          React.createElement(OptionalDismissButton, null)
        ),
        React.createElement(
          Content,
          null,
          React.createElement(Body, null)
        )
      );
    }
  }]);

  return Flag;
}(Component);

Flag.defaultProps = {
  actions: [],
  appearance: DEFAULT_APPEARANCE,
  isDismissAllowed: false
};
export default Flag;