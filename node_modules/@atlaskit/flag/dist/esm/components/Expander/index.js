import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import ExpanderInternal from './styledExpander';

var Expander = function (_Component) {
  _inherits(Expander, _Component);

  function Expander() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Expander);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Expander.__proto__ || _Object$getPrototypeOf(Expander)).call.apply(_ref, [this].concat(args))), _this), _this.state = { isAnimating: false }, _this.handleTransitionEnd = function () {
      _this.setState({ isAnimating: false });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  } // eslint-disable-line react/sort-comp


  _createClass(Expander, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.isExpanded !== nextProps.isExpanded) {
        this.setState({ isAnimating: true });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          isExpanded = _props.isExpanded;
      var isAnimating = this.state.isAnimating;

      // Need to always render the ExpanderInternal otherwise the
      // reveal transiton doesn't happen. We can't use CSS animation for
      // the the reveal because we don't know the height of the content.

      var childrenIfExpanded = isAnimating || isExpanded ? children : null;

      return React.createElement(
        ExpanderInternal,
        {
          'aria-hidden': !isExpanded,
          isExpanded: isExpanded,
          onTransitionEnd: this.handleTransitionEnd
        },
        childrenIfExpanded
      );
    }
  }]);

  return Expander;
}(Component);

Expander.defaultProps = { isExpanded: false };
export default Expander;