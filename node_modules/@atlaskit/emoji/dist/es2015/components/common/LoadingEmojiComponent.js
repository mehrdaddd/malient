import * as tslib_1 from "tslib";
import { PureComponent } from 'react';
/**
 * A base class for components that don't want to start rendering
 * until the EmojiProvider is resolved.
 * Notes: super.componentDidMount and super.componentWillUnmount will need to be
 * called explicitly if they are overridden on the child class.
 */
var LoadingEmojiComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LoadingEmojiComponent, _super);
    function LoadingEmojiComponent(props, state) {
        var _this = _super.call(this, props) || this;
        _this.state = state;
        return _this;
    }
    LoadingEmojiComponent.prototype.componentWillMount = function () {
        // using componentWillMount instead of componentDidMount to avoid needless
        // rerendering if emojiProvider resolves immediately.
        this.loadEmojiProvider(this.props.emojiProvider);
    };
    LoadingEmojiComponent.prototype.componentWillReceiveProps = function (nextProps) {
        this.loadEmojiProvider(nextProps.emojiProvider);
    };
    LoadingEmojiComponent.prototype.loadEmojiProvider = function (futureEmojiProvider) {
        var _this = this;
        futureEmojiProvider
            .then(function (loadedEmojiProvider) {
            if (!_this.isUnmounted) {
                _this.setState({
                    loadedEmojiProvider: loadedEmojiProvider,
                });
            }
        })
            .catch(function (err) {
            if (!_this.isUnmounted) {
                _this.setState({
                    loadedEmojiProvider: undefined,
                });
            }
        });
    };
    LoadingEmojiComponent.prototype.componentWillUnmount = function () {
        this.isUnmounted = true;
    };
    LoadingEmojiComponent.prototype.renderLoading = function () {
        return null;
    };
    LoadingEmojiComponent.prototype.render = function () {
        var loadedEmojiProvider = this.state.loadedEmojiProvider;
        if (loadedEmojiProvider) {
            return this.renderLoaded(loadedEmojiProvider);
        }
        return this.renderLoading();
    };
    return LoadingEmojiComponent;
}(PureComponent));
export default LoadingEmojiComponent;
//# sourceMappingURL=LoadingEmojiComponent.js.map