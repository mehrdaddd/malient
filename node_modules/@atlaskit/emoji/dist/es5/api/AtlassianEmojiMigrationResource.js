"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../constants");
var EmojiRepository_1 = require("./EmojiRepository");
var EmojiResource_1 = require("./EmojiResource");
var atlassian = 'atlassian';
var removeDuplicateAtlassianEmoji = function (emojis, duplicateEmojis) {
    if (!duplicateEmojis.size) {
        return emojis;
    }
    return emojis.filter(function (emoji) {
        return !(duplicateEmojis.has(emoji.shortName) &&
            emoji.type.toLowerCase() === atlassian);
    });
};
var isAtlassianId = function (id) { return id && id.indexOf(atlassian + "-") === 0; };
/**
 * EmojiResource that removes an Atlassian emoji if there is a corresponding site emoji duplicate
 * This will temporarily be exported to editor-core -> editor-hipchat -> * during the Atlassian
 * emoji migration process and used in lieu of the base EmojiResource.
 * After successful migration, this will be removed and replaced by EmojiResource.
 */
var AtlassianEmojiMigrationResource = /** @class */ (function (_super) {
    tslib_1.__extends(AtlassianEmojiMigrationResource, _super);
    function AtlassianEmojiMigrationResource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AtlassianEmojiMigrationResource.prototype.initEmojiRepository = function (emojiResponses) {
        var emojis = [];
        var siteEmojis = new Set();
        var atlassianEmojis = new Set();
        emojiResponses.forEach(function (emojiResponse) {
            if (!emojiResponse.emojis.length) {
                return;
            }
            if (emojiResponse.emojis[0].type.toUpperCase() === constants_1.customType) {
                emojiResponse.emojis.forEach(function (emoji) { return siteEmojis.add(emoji.shortName); });
            }
            if (emojiResponse.emojis[0].type.toLowerCase() === atlassian) {
                emojiResponse.emojis.forEach(function (emoji) {
                    return atlassianEmojis.add(emoji.shortName);
                });
            }
            emojis = emojis.concat(emojiResponse.emojis);
        });
        var duplicateEmojis = new Set(Array.from(atlassianEmojis).filter(function (name) { return siteEmojis.has(name); }));
        emojis = removeDuplicateAtlassianEmoji(emojis, duplicateEmojis);
        this.emojiRepository = new EmojiRepository_1.default(emojis);
    };
    AtlassianEmojiMigrationResource.prototype.findByEmojiId = function (emojiId) {
        var id = emojiId.id, shortName = emojiId.shortName;
        if (isAtlassianId(id) && this.emojiRepository) {
            var matches = this.emojiRepository.findAllMatchingShortName(shortName);
            if (matches.length) {
                var migratedEmoji = matches.filter(function (emoji) { return emoji.creatorUserId === constants_1.migrationUserId; });
                if (migratedEmoji.length) {
                    // Should only be single match
                    return migratedEmoji[0];
                }
            }
            return undefined;
        }
        return _super.prototype.findByEmojiId.call(this, emojiId);
    };
    return AtlassianEmojiMigrationResource;
}(EmojiResource_1.default));
exports.default = AtlassianEmojiMigrationResource;
//# sourceMappingURL=AtlassianEmojiMigrationResource.js.map