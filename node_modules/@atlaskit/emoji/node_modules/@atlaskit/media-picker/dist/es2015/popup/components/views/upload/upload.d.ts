/// <reference types="react" />
import * as React from 'react';
import { Component } from 'react';
import { CardEventHandler } from '@atlaskit/media-card';
import { Context } from '@atlaskit/media-core';
import { Browser } from '../../../../components/browser';
import { FileReference, LocalUploadFileMetadata, LocalUploads, Recents, SelectedItem } from '../../../domain';
export interface UploadViewOwnProps {
    readonly mpBrowser: Browser;
    readonly context: Context;
    readonly recentsCollection: string;
}
export interface UploadViewStateProps {
    readonly isLoading: boolean;
    readonly recents: Recents;
    readonly uploads: LocalUploads;
    readonly selectedItems: SelectedItem[];
    readonly apiUrl: string;
}
export interface UploadViewDispatchProps {
    readonly onFileClick: (metadata: LocalUploadFileMetadata, serviceName: string) => void;
    readonly onEditorShowImage: (file: FileReference, dataUri: string) => void;
    readonly onEditRemoteImage: (file: FileReference, collectionName: string) => void;
}
export declare type UploadViewProps = UploadViewOwnProps & UploadViewStateProps & UploadViewDispatchProps;
export interface UploadViewState {
    readonly imageIds: string[];
    readonly hasPopupBeenVisible: boolean;
    readonly isWebGLWarningFlagVisible: boolean;
    readonly shouldDismissWebGLWarningFlag: boolean;
}
export declare class StatelessUploadView extends Component<UploadViewProps, UploadViewState> {
    state: UploadViewState;
    render(): JSX.Element;
    private loadingView;
    private recentView(cards);
    onAnnotateActionClick(callback: CardEventHandler): CardEventHandler;
    private renderWebGLWarningFlag;
    private renderCards();
    private uploadingFilesCards();
    private recentFilesCards();
    private showWebGLWarningFlag();
    private onCardLoadingChanged;
    private onFlagDismissed;
    private onLearnMoreClicked;
}
declare const _default: React.ComponentClass<UploadViewOwnProps>;
export default _default;
