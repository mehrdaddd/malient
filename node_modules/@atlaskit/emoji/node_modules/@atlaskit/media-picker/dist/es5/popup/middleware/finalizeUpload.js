"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var finalizeUpload_1 = require("../actions/finalizeUpload");
var source_file_1 = require("../domain/source-file");
var sendUploadEvent_1 = require("../actions/sendUploadEvent");
function default_1(fetcher) {
    return function (store) { return function (next) { return function (action) {
        if (finalizeUpload_1.isFinalizeUploadAction(action)) {
            finalizeUpload(fetcher, store, action);
        }
        return next(action);
    }; }; };
}
exports.default = default_1;
function finalizeUpload(fetcher, store, _a) {
    var file = _a.file, uploadId = _a.uploadId, source = _a.source, tenant = _a.tenant;
    var userAuthProvider = store.getState().userAuthProvider;
    return userAuthProvider()
        .then(source_file_1.mapAuthToSourceFileOwner)
        .then(function (owner) {
        var sourceFile = tslib_1.__assign({}, source, { owner: owner });
        var copyFileParams = {
            store: store,
            fetcher: fetcher,
            file: file,
            uploadId: uploadId,
            sourceFile: sourceFile,
            tenant: tenant,
        };
        return copyFile(copyFileParams);
    });
}
exports.finalizeUpload = finalizeUpload;
function copyFile(_a) {
    var store = _a.store, fetcher = _a.fetcher, file = _a.file, uploadId = _a.uploadId, sourceFile = _a.sourceFile, tenant = _a.tenant;
    var apiUrl = store.getState().apiUrl;
    var destination = {
        auth: tenant.auth,
        collection: tenant.uploadParams.collection,
    };
    return fetcher
        .copyFile(apiUrl, sourceFile, destination)
        .then(function (destinationFile) {
        store.dispatch(sendUploadEvent_1.sendUploadEvent({
            event: {
                name: 'upload-processing',
                data: {
                    file: tslib_1.__assign({}, file, { publicId: destinationFile.id }),
                },
            },
            uploadId: uploadId,
        }));
        return fetcher.pollFile(apiUrl, tenant.auth, destinationFile.id, tenant.uploadParams.collection);
    })
        .then(function (processedDestinationFile) {
        return store.dispatch(sendUploadEvent_1.sendUploadEvent({
            event: {
                name: 'upload-end',
                data: {
                    file: tslib_1.__assign({}, file, { publicId: processedDestinationFile.id }),
                    public: processedDestinationFile,
                },
            },
            uploadId: uploadId,
        }));
    })
        .catch(function (error) {
        return store.dispatch(sendUploadEvent_1.sendUploadEvent({
            event: {
                name: 'upload-error',
                data: {
                    file: file,
                    error: {
                        name: 'object_create_fail',
                        description: error.message,
                    },
                },
            },
            uploadId: uploadId,
        }));
    });
}
//# sourceMappingURL=finalizeUpload.js.map