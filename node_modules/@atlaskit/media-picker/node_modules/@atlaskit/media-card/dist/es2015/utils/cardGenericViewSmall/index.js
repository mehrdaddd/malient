import * as tslib_1 from "tslib";
import * as React from 'react';
import { Component } from 'react';
import * as cx from 'classnames';
import { ErrorIcon } from '../../utils';
import { MediaTypeIcon } from '../../utils/mediaTypeIcon';
import CardActions from '../../utils/cardActions';
import { InfoView } from './infoView';
import { ThumbnailView } from './thumbnailView';
import { ErrorWrapper, Error, Retry, SmallCard, ImgWrapper, InfoWrapper, ActionsWrapper, } from './styled';
var CardGenericViewSmall = /** @class */ (function (_super) {
    tslib_1.__extends(CardGenericViewSmall, _super);
    function CardGenericViewSmall() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isMenuExpanded: false,
        };
        return _this;
    }
    CardGenericViewSmall.prototype.render = function () {
        var error = this.props.error;
        if (error) {
            return this.renderError();
        }
        else {
            return this.renderCard();
        }
    };
    CardGenericViewSmall.prototype.renderFileCard = function () {
        var _a = this.props, loading = _a.loading, mediaType = _a.mediaType, thumbnailUrl = _a.thumbnailUrl, title = _a.title, subtitle = _a.subtitle;
        return this.formatCard(React.createElement(ThumbnailView, { type: "file", url: thumbnailUrl, isLoading: loading }), React.createElement(InfoView, { icon: React.createElement(MediaTypeIcon, { type: mediaType }), title: title, subtitle: subtitle, isLink: false, isLoading: loading }));
    };
    CardGenericViewSmall.prototype.renderLinkCard = function () {
        var _a = this.props, loading = _a.loading, iconUrl = _a.iconUrl, thumbnailUrl = _a.thumbnailUrl, title = _a.title, subtitle = _a.subtitle;
        return this.formatCard(React.createElement(ThumbnailView, { type: "link", url: thumbnailUrl, isLoading: loading }), React.createElement(InfoView, { icon: iconUrl ? React.createElement("img", { src: iconUrl }) : null, title: title, subtitle: subtitle, isLink: true, isLoading: loading }));
    };
    CardGenericViewSmall.prototype.renderCard = function () {
        var type = this.props.type;
        if (type === 'link') {
            return this.renderLinkCard();
        }
        else {
            return this.renderFileCard();
        }
    };
    CardGenericViewSmall.prototype.renderError = function () {
        var _a = this.props, error = _a.error, onRetry = _a.onRetry;
        var retryComponent = onRetry ? (React.createElement(Retry, { onClick: onRetry }, "Retry")) : null;
        return this.formatCard(React.createElement(ErrorIcon, null), React.createElement(ErrorWrapper, null,
            React.createElement(Error, { className: "error" }, error),
            retryComponent));
    };
    CardGenericViewSmall.prototype.formatCard = function (left, right) {
        var _a = this.props, actions = _a.actions, loading = _a.loading, error = _a.error;
        var cardClass = cx('media-card', { loading: loading });
        return (React.createElement(SmallCard, { hasError: !!error, className: cardClass },
            React.createElement(ImgWrapper, { shadow: !loading && !error }, left),
            React.createElement(InfoWrapper, null, right),
            React.createElement(ActionsWrapper, null, actions ? React.createElement(CardActions, { actions: actions }) : null)));
    };
    return CardGenericViewSmall;
}(Component));
export { CardGenericViewSmall };
//# sourceMappingURL=index.js.map