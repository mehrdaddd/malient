import * as tslib_1 from "tslib";
import * as React from 'react';
import Badge from '@atlaskit/badge';
import Lozenge from '@atlaskit/lozenge';
import { akColorN20 } from '@atlaskit/util-shared-styles';
import { AvatarStack } from './AvatarStack';
import { Wrapper, Widget, Title, Text, IconImage } from '../styled/DetailsView';
var DetailsView = /** @class */ (function (_super) {
    tslib_1.__extends(DetailsView, _super);
    function DetailsView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DetailsView.prototype.renderWidget = function (data) {
        var isInversed = this.props.isInversed;
        var title = data.title, text = data.text, icon = data.icon, badge = data.badge, lozenge = data.lozenge, users = data.users;
        var attrs = [];
        if (title) {
            attrs.push(React.createElement(Title, { key: "title", inverse: isInversed },
                title,
                ":"));
        }
        if (icon) {
            attrs.push(React.createElement(IconImage, { key: "icon", src: icon.url, alt: icon.label, title: icon.label }));
        }
        if (users) {
            attrs.push(React.createElement(AvatarStack, { key: "avatar-group", size: "small", borderColor: akColorN20, max: 4, avatars: users.map(function (_a) {
                    var _b = _a.icon, url = _b.url, label = _b.label;
                    return ({
                        src: url,
                        label: label,
                    });
                }) }));
        }
        if (badge) {
            attrs.push(React.createElement(Badge, { key: "badge", appearance: badge.appearance || 'default', value: badge.value, max: badge.max }));
        }
        if (lozenge) {
            attrs.push(React.createElement(Lozenge, { key: "lozenge", appearance: lozenge.appearance || 'default' }, lozenge.text));
        }
        if (text) {
            attrs.push(React.createElement(Text, { key: "text" }, text));
        }
        if (attrs.length === 0) {
            // tslint:disable-next-line
            console.warn("SmartCardView: A metadata item doesn't contain any supported attributes: " + JSON.stringify(attrs, null, 2));
            return null;
        }
        return attrs;
    };
    DetailsView.prototype.render = function () {
        var _this = this;
        var _a = this.props, meta = _a.meta, contentMaxWidth = _a.contentMaxWidth;
        return (React.createElement(Wrapper, { contentMaxWidth: contentMaxWidth }, meta.map(function (data, index) { return (React.createElement(Widget, { key: index },
            ' ',
            _this.renderWidget(data))); })));
    };
    return DetailsView;
}(React.Component));
export { DetailsView };
//# sourceMappingURL=DetailsView.js.map