/// <reference types="react" />
import { Component } from 'react';
import { Subscription } from 'rxjs/Subscription';
import { MediaCollection, Context } from '@atlaskit/media-core';
import { CardDimensions, CardListEvent } from '..';
import { Provider } from '../root';
import { CollectionAction } from '../actions';
export interface CardListProps {
    context: Context;
    collectionName: string;
    height?: number;
    pageSize?: number;
    cardDimensions?: CardDimensions;
    cardAppearance?: 'small' | 'image';
    onCardClick?: (result: CardListEvent) => void;
    actions?: Array<CollectionAction>;
    /**
     * Infinite scrolling is only enabled when height has also been specified.
     */
    useInfiniteScroll?: boolean;
    shouldLazyLoadCards?: boolean;
    errorComponent?: JSX.Element;
    loadingComponent?: JSX.Element;
    emptyComponent?: JSX.Element;
}
export interface CardListState {
    loading: boolean;
    shouldAnimate: boolean;
    firstItemKey?: string;
    subscription?: Subscription;
    loadNextPage?: () => void;
    collection?: MediaCollection;
    error?: Error;
}
export declare class CardList extends Component<CardListProps, CardListState> {
    static defaultPageSize: number;
    static defaultProps: {
        cardAppearance: string;
        pageSize: number;
        actions: never[];
        useInfiniteScroll: boolean;
        shouldLazyLoadCards: boolean;
        errorComponent: JSX.Element;
        loadingComponent: JSX.Element;
        emptyComponent: JSX.Element;
    };
    state: CardListState;
    providersByMediaItemId: {
        [id: string]: Provider;
    };
    private dataURIService;
    private unsubscribe();
    handleNextItems(nextProps: CardListProps): (value: Error | MediaCollection) => void;
    private subscribe(nextProps);
    private shouldUpdateState(nextProps);
    private updateState(nextProps);
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: CardListProps): void;
    componentWillUnmount(): void;
    private handleInfiniteScrollThresholdReached;
    render(): JSX.Element;
    private renderList();
    private handleCardClick(oldItem, cardEvent);
    private readonly cardWidth;
    private readonly cardHeight;
    private readonly useInfiniteScroll;
    private isNullOrUndefined(value);
    private getItemKey(item);
    private readonly dimensions;
    private readonly placeholder;
    loadNextPage: () => void;
}
