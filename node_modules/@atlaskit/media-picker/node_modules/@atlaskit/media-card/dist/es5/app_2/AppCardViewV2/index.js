"use strict";
/*

  This is a temporary class for compatibility and maps the Fabric DocumentFormat to the new ViewModel,
  until we are confident that this is the right API to support both the DocumentFormat and the
  MediaServices Smart-Card API, and require integrators to update their integrations. Then, this
  class will then be removed and integrators should use the new views directly and maintain any
  necessary mapping to their selected data source themselves.

*/
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var smart_card_1 = require("@atlaskit/smart-card");
var AppCardView_1 = require("../../app/components/AppCardView");
function convertUser(oldUser) {
    return {
        icon: oldUser.icon.url,
        name: oldUser.icon.label,
    };
}
function getContext(oldViewModel) {
    if (!oldViewModel.context) {
        return undefined;
    }
    return {
        icon: oldViewModel.context.icon ? oldViewModel.context.icon.url : undefined,
        text: oldViewModel.context.text,
    };
}
function getHref(oldViewModel) {
    if (!oldViewModel.link) {
        return undefined;
    }
    return oldViewModel.link.url;
}
function getTitle(oldViewModel) {
    if (!oldViewModel.title) {
        return undefined;
    }
    return {
        text: oldViewModel.title.text,
    };
}
function getDescription(oldViewModel) {
    if (!oldViewModel.description) {
        return undefined;
    }
    return {
        text: oldViewModel.description.text,
    };
}
function getPreview(oldViewModel) {
    if (!oldViewModel.preview) {
        return undefined;
    }
    return oldViewModel.preview.url;
}
function getUser(oldViewModel) {
    if (!oldViewModel.title || !oldViewModel.title.user) {
        return undefined;
    }
    return {
        icon: oldViewModel.title.user.icon.url,
        name: oldViewModel.title.user.icon.label,
    };
}
function getUsers(oldViewModel) {
    if (!oldViewModel.details) {
        return undefined;
    }
    return oldViewModel.details.reduce(function (users, oldDetail) {
        if (oldDetail.users) {
            return users.concat(oldDetail.users.map(convertUser));
        }
        else {
            return users;
        }
    }, []);
}
function getDetails(oldViewModel) {
    if (!oldViewModel.details) {
        return undefined;
    }
    return oldViewModel.details.map(function (oldDetail) { return ({
        title: oldDetail.title,
        icon: oldDetail.icon ? oldDetail.icon.url : undefined,
        badge: oldDetail.badge,
        lozenge: oldDetail.lozenge,
        text: oldDetail.text,
    }); });
}
function getActions(oldViewModel, onActionClick) {
    if (!oldViewModel.actions) {
        return undefined;
    }
    return oldViewModel.actions.map(function (oldAction) {
        return {
            text: oldAction.title,
            handler: function (actionCallbackHandlers) {
                if (onActionClick) {
                    onActionClick(oldAction, {
                        progress: actionCallbackHandlers.progress,
                        success: function (message) {
                            return actionCallbackHandlers.success(message);
                        },
                        failure: function (message, tryAgain, tryAgainLinkText) { return actionCallbackHandlers.failure(); },
                    });
                }
            },
        };
    });
}
function convertAppCardToSmartCard(model) {
    return {
        context: getContext(model),
        link: getHref(model),
        title: getTitle(model),
        description: getDescription(model),
        user: getUser(model),
        users: getUsers(model),
        preview: getPreview(model),
        details: getDetails(model),
    };
}
exports.convertAppCardToSmartCard = convertAppCardToSmartCard;
var AppCardViewV2 = /** @class */ (function (_super) {
    tslib_1.__extends(AppCardViewV2, _super);
    function AppCardViewV2() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppCardViewV2.prototype.render = function () {
        var _a = this.props, newDesign = _a.newDesign, model = _a.model, onClick = _a.onClick, onActionClick = _a.onActionClick;
        if (newDesign) {
            return (React.createElement(smart_card_1.BlockCardView, tslib_1.__assign({}, convertAppCardToSmartCard(model), { onClick: onClick, actions: getActions(model, onActionClick) })));
        }
        else {
            return (React.createElement(AppCardView_1.AppCardView, { model: model, onClick: onClick, onActionClick: onActionClick }));
        }
    };
    return AppCardViewV2;
}(React.Component));
exports.AppCardView = AppCardViewV2;
//# sourceMappingURL=index.js.map