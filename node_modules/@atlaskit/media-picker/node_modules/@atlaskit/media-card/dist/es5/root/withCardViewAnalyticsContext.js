"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var analytics_next_1 = require("@atlaskit/analytics-next");
var shouldDisplayImageThumbnail_1 = require("../utils/shouldDisplayImageThumbnail");
var analyticsUtils_1 = require("../utils/analyticsUtils");
var isLinkDetails_1 = require("../utils/isLinkDetails");
var mapStatusToAnalyticsLoadStatus = function (status) {
    if (status === 'error') {
        return 'fail';
    }
    else if (status === 'loading' || status === 'processing') {
        return 'loading_metadata';
    }
    else {
        return status;
    }
};
var WithCardViewAnalyticsContext = /** @class */ (function (_super) {
    tslib_1.__extends(WithCardViewAnalyticsContext, _super);
    function WithCardViewAnalyticsContext() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WithCardViewAnalyticsContext.prototype.getBaseAnalyticsContext = function () {
        var mediaItemType = this.props.mediaItemType;
        var _a = this.props, status = _a.status, appearance = _a.appearance, actions = _a.actions;
        var loadStatus = mapStatusToAnalyticsLoadStatus(status);
        var hasActionMenuItems = !!(actions && actions.length > 0);
        return tslib_1.__assign({}, analyticsUtils_1.getBaseAnalyticsContext('CardView', null), { type: mediaItemType, loadStatus: loadStatus, viewAttributes: {
                viewPreview: false,
                viewSize: appearance,
                viewActionmenu: hasActionMenuItems,
            } });
    };
    WithCardViewAnalyticsContext.prototype.getLinkCardAnalyticsContext = function (metadata) {
        var analyticsContext = this.getBaseAnalyticsContext();
        var dummyHrefElement = document.createElement('a');
        dummyHrefElement.href = metadata.url;
        var hostname = dummyHrefElement.hostname;
        analyticsContext.actionSubjectId = metadata.url;
        analyticsContext.viewAttributes.viewPreview = !!(metadata.resources &&
            (metadata.resources.thumbnail || metadata.resources.image));
        var linkAttributes = {
            linkDomain: hostname,
        };
        return tslib_1.__assign({}, analyticsContext, { linkAttributes: linkAttributes });
    };
    WithCardViewAnalyticsContext.prototype.getFileCardAnalyticsContext = function (metadata) {
        var dataURI = this.props.dataURI;
        var analyticsContext = this.getBaseAnalyticsContext();
        analyticsContext.actionSubjectId = metadata.id;
        analyticsContext.viewAttributes.viewPreview = shouldDisplayImageThumbnail_1.shouldDisplayImageThumbnail(dataURI, metadata.mediaType);
        var fileAttributes = {
            fileMediatype: metadata.mediaType,
            fileSize: metadata.size,
            fileStatus: metadata.processingStatus,
            fileMimetype: metadata.mimeType,
        };
        return tslib_1.__assign({}, analyticsContext, { fileAttributes: fileAttributes });
    };
    Object.defineProperty(WithCardViewAnalyticsContext.prototype, "analyticsContext", {
        get: function () {
            if (this.props.metadata) {
                var metadata = this.props.metadata;
                if (isLinkDetails_1.isLinkDetails(metadata)) {
                    return this.getLinkCardAnalyticsContext(metadata);
                }
                else {
                    return this.getFileCardAnalyticsContext(metadata);
                }
            }
            else {
                return this.getBaseAnalyticsContext();
            }
        },
        enumerable: true,
        configurable: true
    });
    WithCardViewAnalyticsContext.prototype.render = function () {
        return (React.createElement(analytics_next_1.AnalyticsContext, { data: this.analyticsContext }, this.props.children));
    };
    return WithCardViewAnalyticsContext;
}(React.Component));
exports.WithCardViewAnalyticsContext = WithCardViewAnalyticsContext;
//# sourceMappingURL=withCardViewAnalyticsContext.js.map