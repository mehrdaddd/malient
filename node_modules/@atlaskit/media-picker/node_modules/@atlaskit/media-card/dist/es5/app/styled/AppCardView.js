"use strict";
/* tslint:disable:variable-name */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var styled_components_1 = require("styled-components");
var util_shared_styles_1 = require("@atlaskit/util-shared-styles");
var styles_1 = require("../../styles");
var media_ui_1 = require("@atlaskit/media-ui");
var previewWidth = 116;
var positionedBehindCard = "\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  z-index: -1;\n  content: '';\n  border-radius: 3px;\n";
var cardColors = function (_a) {
    var background = _a.background;
    if (background) {
        return "\n      color: " + util_shared_styles_1.akColorN0 + ";\n    ";
    }
    else {
        return "\n      color: " + util_shared_styles_1.akColorN800 + ";\n      background-color: " + util_shared_styles_1.akColorN20 + ";\n    ";
    }
};
var cardOverlay = function (_a) {
    var background = _a.background;
    if (background) {
        return "\n      /* allow us to position the background underlay when we have a background */\n      position: relative;\n      z-index: 0;\n\n      &::before {\n        " + positionedBehindCard + " background-color: " + util_shared_styles_1.akColorN20 + ";\n        background-image: url(" + background + ");\n        background-size: cover;\n        background-repeat: no-repeat;\n        background-position: center;\n      }\n      &::after {\n        " + positionedBehindCard + " background-color: rgba(9,30,66,.5);\n      }\n    ";
    }
    else {
        return '';
    }
};
var cardCursor = function (_a) {
    var isClickable = _a.isClickable;
    if (isClickable) {
        return "\n      cursor: pointer;\n    ";
    }
    else {
        return '';
    }
};
exports.Card = styled_components_1.default.div(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  ", " ", " display: inline-flex; /* make the card fit to its contents */\n  flex-direction: row; /* make the preview and content side-by-side */\n\n  min-width: 368px;\n  max-width: 100%; /* make the card fit its container */\n\n  font-size: 12px;\n  font-family: ", ";\n\n  ", " ", ";\n  ", ";\n"], ["\n  ", " ", " display: inline-flex; /* make the card fit to its contents */\n  flex-direction: row; /* make the preview and content side-by-side */\n\n  min-width: 368px;\n  max-width: 100%; /* make the card fit its container */\n\n  font-size: 12px;\n  font-family: ", ";\n\n  ", " ", ";\n  ", ";\n"])), cardColors, cardOverlay, util_shared_styles_1.akFontFamily, media_ui_1.borderRadius, styles_1.cardShadow, cardCursor);
exports.Preview = styled_components_1.default.div(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["\n  width: ", "px; /* fixed px the design asks for */\n  background-image: url(", ");\n  background-size: cover;\n  flex-shrink: 0;\n"], ["\n  width: ", "px; /* fixed px the design asks for */\n  background-image: url(", ");\n  background-size: cover;\n  flex-shrink: 0;\n"])), previewWidth, function (_a) {
    var image = _a.image;
    return image;
});
exports.CardContent = styled_components_1.default.div(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["\n  flex-grow: 1;\n  max-width: ", ";\n"], ["\n  flex-grow: 1;\n  max-width: ",
    ";\n"])), function (_a) {
    var hasPreview = _a.hasPreview;
    return (hasPreview && "calc(100% - " + previewWidth + "px)") || '100%';
});
exports.Footer = styled_components_1.default.div(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  height: ", "px;\n  margin: 0 ", "px 12px ", "px;\n"], ["\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  height: ", "px;\n  margin: 0 ", "px 12px ", "px;\n"])), util_shared_styles_1.akGridSizeUnitless * 3, util_shared_styles_1.akGridSizeUnitless, util_shared_styles_1.akGridSizeUnitless * 2);
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=AppCardView.js.map