"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var badge_1 = require("@atlaskit/badge");
var lozenge_1 = require("@atlaskit/lozenge");
var util_shared_styles_1 = require("@atlaskit/util-shared-styles");
var AvatarStack_1 = require("./AvatarStack");
var DetailsView_1 = require("../styled/DetailsView");
var DetailsView = /** @class */ (function (_super) {
    tslib_1.__extends(DetailsView, _super);
    function DetailsView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DetailsView.prototype.renderWidget = function (data) {
        var isInversed = this.props.isInversed;
        var title = data.title, text = data.text, icon = data.icon, badge = data.badge, lozenge = data.lozenge, users = data.users;
        var attrs = [];
        if (title) {
            attrs.push(React.createElement(DetailsView_1.Title, { key: "title", inverse: isInversed },
                title,
                ":"));
        }
        if (icon) {
            attrs.push(React.createElement(DetailsView_1.IconImage, { key: "icon", src: icon.url, alt: icon.label, title: icon.label }));
        }
        if (users) {
            attrs.push(React.createElement(AvatarStack_1.AvatarStack, { key: "avatar-group", size: "small", borderColor: util_shared_styles_1.akColorN20, max: 4, avatars: users.map(function (_a) {
                    var _b = _a.icon, url = _b.url, label = _b.label;
                    return ({
                        src: url,
                        label: label,
                    });
                }) }));
        }
        if (badge) {
            attrs.push(React.createElement(badge_1.default, { key: "badge", appearance: badge.appearance || 'default', value: badge.value, max: badge.max }));
        }
        if (lozenge) {
            attrs.push(React.createElement(lozenge_1.default, { key: "lozenge", appearance: lozenge.appearance || 'default' }, lozenge.text));
        }
        if (text) {
            attrs.push(React.createElement(DetailsView_1.Text, { key: "text" }, text));
        }
        if (attrs.length === 0) {
            // tslint:disable-next-line
            console.warn("SmartCardView: A metadata item doesn't contain any supported attributes: " + JSON.stringify(attrs, null, 2));
            return null;
        }
        return attrs;
    };
    DetailsView.prototype.render = function () {
        var _this = this;
        var _a = this.props, meta = _a.meta, contentMaxWidth = _a.contentMaxWidth;
        return (React.createElement(DetailsView_1.Wrapper, { contentMaxWidth: contentMaxWidth }, meta.map(function (data, index) { return (React.createElement(DetailsView_1.Widget, { key: index },
            ' ',
            _this.renderWidget(data))); })));
    };
    return DetailsView;
}(React.Component));
exports.DetailsView = DetailsView;
//# sourceMappingURL=DetailsView.js.map