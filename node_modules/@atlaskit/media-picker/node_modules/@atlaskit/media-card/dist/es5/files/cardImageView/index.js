"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var uploadingView_1 = require("../../utils/uploadingView");
var cardContent_1 = require("./cardContent");
var cardOverlay_1 = require("./cardOverlay");
var styled_1 = require("./styled");
var FileCardImageView = /** @class */ (function (_super) {
    tslib_1.__extends(FileCardImageView, _super);
    function FileCardImageView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getCardContents = function () {
            var _a = _this.props, error = _a.error, status = _a.status;
            if (error) {
                return _this.getErrorContents();
            }
            if (status === 'uploading') {
                return _this.getUploadingContents();
            }
            return _this.getSuccessCardContents();
        };
        _this.getErrorContents = function () {
            var _a = _this.props, error = _a.error, mediaName = _a.mediaName, mediaType = _a.mediaType, onRetry = _a.onRetry, actions = _a.actions, fileSize = _a.fileSize;
            return (React.createElement(React.Fragment, null,
                React.createElement("div", { className: "wrapper" }),
                React.createElement(cardOverlay_1.CardOverlay, { persistent: true, mediaName: mediaName, mediaType: mediaType, error: error, onRetry: onRetry, actions: actions, subtitle: fileSize })));
        };
        _this.getUploadingContents = function () {
            var _a = _this.props, actions = _a.actions, mediaName = _a.mediaName, progress = _a.progress, dataURI = _a.dataURI, selectable = _a.selectable;
            var overlay = selectable ? _this.createUploadingCardOverlay() : null;
            return (React.createElement("div", { className: "wrapper" },
                React.createElement("div", { className: "img-wrapper" },
                    React.createElement(uploadingView_1.UploadingView, { title: mediaName, progress: progress || 0, dataURI: dataURI, actions: actions })),
                overlay));
        };
        _this.createUploadingCardOverlay = function () {
            var _a = _this.props, mediaType = _a.mediaType, dataURI = _a.dataURI, selectable = _a.selectable, selected = _a.selected;
            var isPersistent = mediaType === 'doc' || !dataURI;
            return (React.createElement(cardOverlay_1.CardOverlay, { persistent: isPersistent, selectable: selectable, selected: selected }));
        };
        _this.getSuccessCardContents = function () {
            var _a = _this.props, mediaType = _a.mediaType, dataURI = _a.dataURI, disableOverlay = _a.disableOverlay;
            var overlay = _this.isDownloadingOrProcessing() || disableOverlay
                ? null
                : _this.createSuccessCardOverlay();
            return (React.createElement("div", { className: "wrapper" },
                React.createElement("div", { className: "img-wrapper" },
                    React.createElement(cardContent_1.CardContent, { loading: _this.isDownloadingOrProcessing(), mediaItemType: "file", mediaType: mediaType, dataURI: dataURI, crop: _this.isCropped })),
                overlay));
        };
        _this.createSuccessCardOverlay = function () {
            var _a = _this.props, mediaName = _a.mediaName, mediaType = _a.mediaType, fileSize = _a.fileSize, dataURI = _a.dataURI, selectable = _a.selectable, selected = _a.selected, actions = _a.actions;
            var isPersistent = mediaType === 'doc' || !dataURI;
            return (React.createElement(cardOverlay_1.CardOverlay, { persistent: isPersistent, selectable: selectable, selected: selected, mediaName: mediaName, mediaType: mediaType, subtitle: fileSize, actions: actions }));
        };
        return _this;
    }
    FileCardImageView.prototype.isDownloadingOrProcessing = function () {
        var status = this.props.status;
        return status === 'loading' || status === 'processing';
    };
    FileCardImageView.prototype.render = function () {
        var _a = this.props, disableOverlay = _a.disableOverlay, selectable = _a.selectable, selected = _a.selected;
        return (React.createElement(styled_1.Wrapper, { disableOverlay: disableOverlay, selectable: selectable, selected: selected }, this.getCardContents()));
    };
    Object.defineProperty(FileCardImageView.prototype, "isCropped", {
        get: function () {
            var resizeMode = this.props.resizeMode;
            return resizeMode === 'crop';
        },
        enumerable: true,
        configurable: true
    });
    FileCardImageView.defaultProps = {
        resizeMode: 'crop',
        disableOverlay: false,
    };
    return FileCardImageView;
}(react_1.Component));
exports.FileCardImageView = FileCardImageView;
exports.default = FileCardImageView;
//# sourceMappingURL=index.js.map