import { AuthProvider } from '@atlaskit/media-core';
import { MediaError } from '../domain/error';
import { MediaFile, PublicMediaFile } from '../domain/file';
import { SmartMediaProgress } from '../domain/progress';
import { MediaFileData } from './mediaApi';
import { Preview } from '../domain/preview';
import { UploadParams } from '../domain/config';
export interface UploadRequestParams {
    collection?: string;
}
export interface FilesAddedEventPayload {
    readonly files: MediaFile[];
}
export interface FilePreviewUpdateEventPayload {
    readonly file: MediaFile;
    readonly preview: Preview;
}
export interface FileUploadingEventPayload {
    readonly file: MediaFile;
    readonly progress: SmartMediaProgress;
}
export interface FileConvertingEventPayload {
    readonly file: PublicMediaFile;
}
export interface FileConvertedEventPayload {
    readonly file: PublicMediaFile;
    readonly metadata: MediaFileData;
}
export interface FileUploadErrorEventPayload {
    readonly file: MediaFile;
    readonly error: MediaError;
}
export declare type UploadServiceEventPayloadTypes = {
    readonly 'files-added': FilesAddedEventPayload;
    readonly 'file-preview-update': FilePreviewUpdateEventPayload;
    readonly 'file-uploading': FileUploadingEventPayload;
    readonly 'file-converting': FileConvertingEventPayload;
    readonly 'file-converted': FileConvertedEventPayload;
    readonly 'file-upload-error': FileUploadErrorEventPayload;
    readonly 'file-dropped': DragEvent;
};
export declare type UploadServiceEventListener<E extends keyof UploadServiceEventPayloadTypes> = (payload: UploadServiceEventPayloadTypes[E]) => void;
export declare class UploadService {
    private static hasher;
    private readonly resumable;
    private readonly emitter;
    private readonly mediaClientPool;
    private readonly authProvider;
    private readonly userCollectionMediaClient;
    private readonly api;
    private readonly uploadChunkUrl;
    private readonly uploads;
    private dropzoneElement?;
    private uploadParams;
    private retry;
    constructor(url: string, authProvider: AuthProvider, uploadParams?: UploadParams, userAuthProvider?: AuthProvider);
    setUploadParams(uploadParams?: UploadParams): void;
    getUploadParams(): UploadParams;
    addBrowse(element: HTMLElement): void;
    addDropzone(element: HTMLElement): void;
    removeDropzone(): void;
    addFile(file: File): void;
    cancel(uniqueIdentifier?: string): void;
    on<E extends keyof UploadServiceEventPayloadTypes>(event: E, listener: UploadServiceEventListener<E>): void;
    off<E extends keyof UploadServiceEventPayloadTypes>(event: E, listener: UploadServiceEventListener<E>): void;
    private emit;
    private getMediaClient(resumableFile);
    private getQueryParameters;
    private generateTarget;
    private onFilesAdded;
    private getMediaTypeFromFile(file);
    private onChunkingComplete;
    private onFileProgress;
    private emitLastUploadingPercentage;
    private onFileSuccess;
    private onFileError;
    private finalizeFile(resumableFile);
    private appendChunksToUpload(mediaClient, uploadId, allChunkIds, maxChunks);
    private copyFileToUsersCollection(sourceFileId, sourceCollection?);
    private processFile(mediaClient, fileId, resumableFile);
    private pollForFileMetadata(mediaClient, publicId, resumableFile);
    private onUploadError(resumableFile, errorName, errorDetails, mediaClient);
    private onError(resumableFile, errorName, error?);
    private readonly onDrop;
    private mapResumableFileToMediaFile;
    private mapResumableFileToPublicMediaFile;
    private getResumableFileCreationDate;
    private getResumableFileUploadParams;
    private cleanupResumableFile;
}
