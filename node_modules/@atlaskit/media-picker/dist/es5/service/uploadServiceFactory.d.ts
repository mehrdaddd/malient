import { Context } from '@atlaskit/media-core';
import { UploadEndEventPayload, UploadErrorEventPayload, UploadPreviewUpdateEventPayload, UploadProcessingEventPayload, UploadsStartEventPayload, UploadStatusUpdateEventPayload, UploadParams } from '..';
export declare type UploadServiceEventPayloadTypes = {
    readonly 'files-added': UploadsStartEventPayload;
    readonly 'file-preview-update': UploadPreviewUpdateEventPayload;
    readonly 'file-uploading': UploadStatusUpdateEventPayload;
    readonly 'file-converting': UploadProcessingEventPayload;
    readonly 'file-converted': UploadEndEventPayload;
    readonly 'file-upload-error': UploadErrorEventPayload;
    readonly 'file-dropped': DragEvent;
};
export declare type UploadServiceEventListener<E extends keyof UploadServiceEventPayloadTypes> = (payload: UploadServiceEventPayloadTypes[E]) => void;
export declare const MAX_FILE_SIZE_FOR_PREVIEW = 10000000;
export interface UploadService {
    setUploadParams(uploadParams?: UploadParams): any;
    addBrowse(element: HTMLInputElement): any;
    addDropzone(element: HTMLElement): any;
    removeDropzone(): any;
    removeBrowse(): any;
    addFiles(files: File[]): any;
    cancel(id?: string): any;
    on<E extends keyof UploadServiceEventPayloadTypes>(event: E, listener: UploadServiceEventListener<E>): any;
    off<E extends keyof UploadServiceEventPayloadTypes>(event: E, listener: UploadServiceEventListener<E>): any;
}
export declare class UploadServiceFactory {
    static create(context: Context, uploadParams?: UploadParams, useNewUploadService?: boolean): UploadService;
}
