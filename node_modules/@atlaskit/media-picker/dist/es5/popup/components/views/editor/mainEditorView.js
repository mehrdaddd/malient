"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var deselectItem_1 = require("../../../actions/deselectItem");
var React = require("react");
var react_1 = require("react");
var react_redux_1 = require("react-redux");
var errorView_1 = require("./errorView/errorView");
var spinnerView_1 = require("./spinnerView/spinnerView");
var styles_1 = require("./styles");
var editorClose_1 = require("../../../actions/editorClose");
var editorShowError_1 = require("../../../actions/editorShowError");
var editorShowImage_1 = require("../../../actions/editorShowImage");
var editorViewLoader_1 = require("./editorViewLoader");
var MainEditorView = /** @class */ (function (_super) {
    tslib_1.__extends(MainEditorView, _super);
    function MainEditorView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            EditorViewComponent: MainEditorView.EditorViewComponent,
        };
        _this.loadEditorView = function (props) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var editorData, EditorViewComponent;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        editorData = props.editorData;
                        if (!editorData) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, editorViewLoader_1.default()];
                    case 1:
                        EditorViewComponent = _a.sent();
                        MainEditorView.EditorViewComponent = EditorViewComponent;
                        this.setState({
                            EditorViewComponent: EditorViewComponent,
                        });
                        return [2 /*return*/];
                }
            });
        }); };
        _this.renderContent = function (editorData) {
            var EditorViewComponent = _this.state.EditorViewComponent;
            var imageUrl = editorData.imageUrl, originalFile = editorData.originalFile, error = editorData.error;
            if (error) {
                return _this.renderError(error);
            }
            else if (imageUrl && originalFile && EditorViewComponent) {
                return (React.createElement(EditorViewComponent, { imageUrl: imageUrl, onSave: _this.onEditorSave(originalFile), onCancel: _this.onCancel, onError: _this.onEditorError }));
            }
            else {
                return React.createElement(spinnerView_1.SpinnerView, { onCancel: _this.onCancel });
            }
        };
        _this.onEditorError = function (message, retryHandler) {
            _this.props.onShowEditorError({ message: message, retryHandler: retryHandler });
        };
        _this.onEditorSave = function (originalFile) { return function (image) {
            var _a = _this.props, binaryUploader = _a.binaryUploader, onDeselectFile = _a.onDeselectFile, onCloseEditor = _a.onCloseEditor;
            binaryUploader.upload(image, originalFile.name);
            onDeselectFile(originalFile.id);
            onCloseEditor();
        }; };
        _this.onCancel = function () {
            _this.props.onCloseEditor();
        };
        return _this;
    }
    MainEditorView.prototype.componentDidMount = function () {
        this.loadEditorView(this.props);
    };
    MainEditorView.prototype.componentWillReceiveProps = function (newProps) {
        this.loadEditorView(newProps);
    };
    MainEditorView.prototype.render = function () {
        var editorData = this.props.editorData;
        if (editorData) {
            return React.createElement(styles_1.MainContainer, null, this.renderContent(editorData));
        }
        else {
            return null;
        }
    };
    MainEditorView.prototype.renderError = function (_a) {
        var message = _a.message, retryHandler = _a.retryHandler;
        return (React.createElement(errorView_1.ErrorView, { message: message, onRetry: retryHandler, onCancel: this.onCancel }));
    };
    return MainEditorView;
}(react_1.Component));
exports.MainEditorView = MainEditorView;
exports.default = react_redux_1.connect(function (_a) {
    var editorData = _a.editorData;
    return ({
        editorData: editorData,
    });
}, function (dispatch) { return ({
    onShowEditorImage: function (imageUrl, originalFile) {
        return dispatch(editorShowImage_1.editorShowImage(imageUrl, originalFile));
    },
    onShowEditorError: function (_a) {
        var message = _a.message, retryHandler = _a.retryHandler;
        return dispatch(editorShowError_1.editorShowError(message, retryHandler));
    },
    onCloseEditor: function () { return dispatch(editorClose_1.editorClose()); },
    onDeselectFile: function (fileId) { return dispatch(deselectItem_1.deselectItem(fileId)); },
}); })(MainEditorView);
//# sourceMappingURL=mainEditorView.js.map