/// <reference types="react" />
import * as React from 'react';
import { Component, ComponentClass } from 'react';
import { BinaryUploader } from '../../../../components/binary';
import { EditorData, EditorError, FileReference } from '../../../domain';
import { EditorViewProps } from './editorView/editorView';
export interface MainEditorViewStateProps {
    readonly editorData?: EditorData;
}
export interface MainEditorViewState {
    EditorViewComponent?: ComponentClass<EditorViewProps>;
}
export interface MainEditorViewOwnProps {
    readonly binaryUploader: BinaryUploader;
}
export interface MainEditorViewDispatchProps {
    readonly onCloseEditor: () => void;
    readonly onShowEditorError: (error: EditorError) => void;
    readonly onShowEditorImage: (imageUrl: string, originalFile?: FileReference) => void;
    readonly onDeselectFile: (fileId: string) => void;
}
export declare type MainEditorViewProps = MainEditorViewStateProps & MainEditorViewOwnProps & MainEditorViewDispatchProps;
export declare class MainEditorView extends Component<MainEditorViewProps, MainEditorViewState> {
    static EditorViewComponent: ComponentClass<EditorViewProps>;
    state: MainEditorViewState;
    componentDidMount(): void;
    componentWillReceiveProps(newProps: MainEditorViewProps): void;
    private loadEditorView;
    render(): JSX.Element | null;
    private renderContent;
    private renderError({message, retryHandler});
    private onEditorError;
    private onEditorSave;
    private onCancel;
}
declare const _default: React.ComponentClass<MainEditorViewOwnProps>;
export default _default;
