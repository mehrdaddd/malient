"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_dom_1 = require("react-dom");
var app_1 = require("../popup/components/app");
var cancelUpload_1 = require("../popup/actions/cancelUpload");
var showPopup_1 = require("../popup/actions/showPopup");
var resetView_1 = require("../popup/actions/resetView");
var setTenant_1 = require("../popup/actions/setTenant");
var getFilesInRecents_1 = require("../popup/actions/getFilesInRecents");
var getConnectedRemoteAccounts_1 = require("../popup/actions/getConnectedRemoteAccounts");
var hidePopup_1 = require("../popup/actions/hidePopup");
var store_1 = require("../store");
var component_1 = require("./component");
var events_1 = require("../outer/analytics/events");
var uploadParams_1 = require("../domain/uploadParams");
exports.USER_RECENTS_COLLECTION = 'recents';
var Popup = /** @class */ (function (_super) {
    tslib_1.__extends(Popup, _super);
    function Popup(anlyticsContext, context, _a) {
        var _b = _a.container, container = _b === void 0 ? document.body : _b, uploadParams = _a.uploadParams;
        var _this = _super.call(this, anlyticsContext) || this;
        _this.context = context;
        _this.analyticsContext.trackEvent(new events_1.MPPopupLoaded());
        _this.store = store_1.createStore(_this, context);
        _this.uploadParams = tslib_1.__assign({}, uploadParams_1.defaultUploadParams, uploadParams);
        var popup = _this.renderPopup();
        _this.container = popup;
        container.appendChild(popup);
        return _this;
    }
    Popup.prototype.show = function () {
        var _this = this;
        return this.context.config
            .authProvider({
            collectionName: this.uploadParams.collection,
        })
            .then(function (auth) {
            _this.store.dispatch(setTenant_1.setTenant({
                auth: auth,
                uploadParams: _this.uploadParams,
            }));
            _this.store.dispatch(resetView_1.resetView());
            _this.store.dispatch(getFilesInRecents_1.getFilesInRecents());
            // TODO [MSW-466]: Fetch remote accounts only when needed
            _this.store.dispatch(getConnectedRemoteAccounts_1.getConnectedRemoteAccounts());
            _this.store.dispatch(showPopup_1.showPopup());
            _this.analyticsContext.trackEvent(new events_1.MPPopupShown());
        });
    };
    Popup.prototype.cancel = function (uniqueIdentifier) {
        this.store.dispatch(cancelUpload_1.cancelUpload({ tenantUploadId: uniqueIdentifier }));
    };
    Popup.prototype.teardown = function () {
        react_dom_1.unmountComponentAtNode(this.container);
    };
    Popup.prototype.hide = function () {
        this.store.dispatch(hidePopup_1.hidePopup());
    };
    Popup.prototype.setUploadParams = function (uploadParams) {
        this.uploadParams = tslib_1.__assign({}, uploadParams_1.defaultUploadParams, uploadParams);
    };
    Popup.prototype.emitClosed = function () {
        this.emit('closed', undefined);
        this.analyticsContext.trackEvent(new events_1.MPPopupHidden());
    };
    Popup.prototype.renderPopup = function () {
        var container = document.createElement('div');
        react_dom_1.render(React.createElement(app_1.default, { store: this.store }), container);
        return container;
    };
    return Popup;
}(component_1.UploadComponent));
exports.Popup = Popup;
//# sourceMappingURL=popup.js.map