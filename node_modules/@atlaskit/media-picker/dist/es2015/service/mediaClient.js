import * as tslib_1 from "tslib";
import { default as axios } from 'axios';
import { mapAuthToAuthHeaders, mapAuthToQueryParameters } from '../domain/auth';
var tokenExpirationCode = 'JwtAuthoriser:TokenExpiredError';
var tokenAuthenticationCode = 'JwtAuthoriser:AuthenticationError';
export var isTokenError = function (apiError) {
    if (apiError && apiError.error) {
        var code = apiError.error.code;
        return code === tokenExpirationCode || code === tokenAuthenticationCode;
    }
    return false;
};
export var addAuthToHeaders = function (request, auth) {
    var currentHeaders = request.headers || {};
    return tslib_1.__assign({}, request, { headers: tslib_1.__assign({}, currentHeaders, mapAuthToAuthHeaders(auth)) });
};
export var addAuthToQueryParameters = function (request, auth) {
    return tslib_1.__assign({}, request, { parameters: tslib_1.__assign({}, request.parameters, mapAuthToQueryParameters(auth)) });
};
var MediaClient = /** @class */ (function () {
    function MediaClient(apiUrl, authProvider, collection) {
        this.apiUrl = apiUrl;
        this.authProvider = authProvider;
        this.collection = collection;
    }
    Object.defineProperty(MediaClient.prototype, "storedAuth", {
        get: function () {
            return this.auth;
        },
        enumerable: true,
        configurable: true
    });
    MediaClient.prototype.refreshAuth = function () {
        var _this = this;
        return this.authProvider({
            collectionName: this.collection,
        }).then(function (auth) {
            _this.auth = auth;
            return auth;
        });
    };
    MediaClient.prototype.call = function (request, addAuth) {
        var _this = this;
        if (addAuth === void 0) { addAuth = addAuthToHeaders; }
        return this.makeCall(request, addAuth).catch(function (error) {
            var isTokenExpired = error && error.response && isTokenError(error.response.data);
            if (!isTokenExpired) {
                throw error;
            }
            // Retry if the token has expired
            return _this.makeCall(request, addAuth, true);
        });
    };
    MediaClient.prototype.makeCall = function (request, addAuth, forceRefreshToken) {
        var _this = this;
        if (forceRefreshToken === void 0) { forceRefreshToken = false; }
        return this.getAuth(forceRefreshToken).then(function (auth) {
            return _this.makeCallWithToken(request, addAuth, auth);
        });
    };
    MediaClient.prototype.getAuth = function (forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        if (this.auth && !forceRefresh) {
            return Promise.resolve(this.auth);
        }
        return this.refreshAuth();
    };
    MediaClient.prototype.makeCallWithToken = function (request, addAuth, auth) {
        var requestWithAuth = addAuth(request, auth);
        var config = this.getAxiosRequestConfig(requestWithAuth);
        return axios.request(config).then(function (response) { return response.data; });
    };
    MediaClient.prototype.getAxiosRequestConfig = function (request) {
        var httpMethod = request.httpMethod, mediaApiMethod = request.mediaApiMethod, parameters = request.parameters, headers = request.headers, data = request.data;
        return {
            url: this.apiUrl + "/" + mediaApiMethod,
            method: httpMethod,
            headers: tslib_1.__assign({}, headers, data ? { 'Content-Type': 'application/json; charset=utf-8' } : {}),
            params: parameters,
            data: data,
        };
    };
    return MediaClient;
}());
export { MediaClient };
//# sourceMappingURL=mediaClient.js.map