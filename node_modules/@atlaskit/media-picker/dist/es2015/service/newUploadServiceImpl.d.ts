import { Context } from '@atlaskit/media-core';
import { MediaFile } from '../domain/file';
import { UploadParams } from '..';
import { UploadService, UploadServiceEventListener, UploadServiceEventPayloadTypes } from './uploadServiceFactory';
export interface CancellableFileUpload {
    mediaFile: MediaFile;
    file: File;
    cancel?: () => void;
}
export declare class NewUploadServiceImpl implements UploadService {
    private readonly context;
    private readonly userMediaStore;
    private uploadParams;
    private readonly emitter;
    private dropzoneElement?;
    private browserElement?;
    private cancellableFilesUploads;
    constructor(context: Context, uploadParams?: UploadParams);
    setUploadParams(uploadParams?: UploadParams): void;
    addBrowse(element: HTMLInputElement): void;
    addDropzone(element: HTMLElement): void;
    removeDropzone(): void;
    removeBrowse(): void;
    private readonly onFilePicked;
    private readonly onFileDropped;
    addFiles(files: File[]): void;
    cancel(id?: string): void;
    on<E extends keyof UploadServiceEventPayloadTypes>(event: E, listener: UploadServiceEventListener<E>): void;
    off<E extends keyof UploadServiceEventPayloadTypes>(event: E, listener: UploadServiceEventListener<E>): void;
    private readonly emit;
    private emitPreviews(cancellableFileUploads);
    private getMediaTypeFromFile(file);
    private releaseCancellableFile(mediaFile);
    private readonly onFileSuccess;
    private readonly onFileProgress;
    private readonly onFileError;
    private copyFileToUsersCollection(sourceFileId, sourceCollection?);
}
