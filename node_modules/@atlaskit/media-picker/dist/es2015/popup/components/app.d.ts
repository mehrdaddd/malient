/// <reference types="react" />
import * as React from 'react';
import { Component } from 'react';
import { Store } from 'redux';
import { Context } from '@atlaskit/media-core';
import { ServiceName, State } from '../domain';
import { UploadsStartEventPayload, UploadPreviewUpdateEventPayload, UploadStatusUpdateEventPayload, UploadProcessingEventPayload, UploadEndEventPayload, UploadErrorEventPayload } from '../../domain/uploadEvent';
export interface AppStateProps {
    readonly selectedServiceName: ServiceName;
    readonly isVisible: boolean;
    readonly context: Context;
}
export interface AppDispatchProps {
    readonly onStartApp: (onCancelUpload: (uploadId: string) => void) => void;
    readonly onClose: () => void;
    readonly onUploadsStart: (payload: UploadsStartEventPayload) => void;
    readonly onUploadPreviewUpdate: (payload: UploadPreviewUpdateEventPayload) => void;
    readonly onUploadStatusUpdate: (payload: UploadStatusUpdateEventPayload) => void;
    readonly onUploadProcessing: (payload: UploadProcessingEventPayload) => void;
    readonly onUploadEnd: (payload: UploadEndEventPayload) => void;
    readonly onUploadError: (payload: UploadErrorEventPayload) => void;
}
export interface AppOwnProps {
    store: Store<State>;
}
export declare type AppProps = AppStateProps & AppOwnProps & AppDispatchProps;
export interface AppState {
    readonly isDropzoneActive: boolean;
}
export declare class App extends Component<AppProps, AppState> {
    private readonly mpBrowser;
    private readonly mpDropzone;
    private readonly mpBinary;
    private readonly mpContext;
    constructor(props: AppProps);
    componentWillReceiveProps({isVisible}: Readonly<AppProps>): void;
    componentWillUnmount(): void;
    render(): JSX.Element | null;
    private renderCurrentView(selectedServiceName);
    private setDropzoneActive;
}
declare const _default: React.ComponentClass<AppOwnProps>;
export default _default;
