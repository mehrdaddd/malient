import * as tslib_1 from "tslib";
import * as uuid from 'uuid';
import { isStartImportAction } from '../actions/startImport';
import { finalizeUpload } from '../actions/finalizeUpload';
import { remoteUploadStart } from '../actions/remoteUploadStart';
import { getPreview } from '../actions/getPreview';
import { handleCloudFetchingEvent } from '../actions/handleCloudFetchingEvent';
import { setEventProxy } from '../actions/setEventProxy';
import { hidePopup } from '../actions/hidePopup';
import { RECENTS_COLLECTION } from '../config';
import { RemoteUploadActivity } from '../tools/websocket/upload/remoteUploadActivity';
import { copyMediaFileForUpload } from '../../domain/file';
import { sendUploadEvent } from '../actions/sendUploadEvent';
export var isRemoteFileItem = function (item) {
    return ['dropbox', 'google', 'giphy'].indexOf(item.serviceName) !== -1;
};
export var isRemoteService = function (serviceName) {
    return ['dropbox', 'google', 'giphy'].indexOf(serviceName) !== -1;
};
var mapSelectedItemToSelectedUploadFile = function (_a) {
    var id = _a.id, name = _a.name, mimeType = _a.mimeType, size = _a.size, date = _a.date, serviceName = _a.serviceName, accountId = _a.accountId;
    return ({
        file: {
            id: id,
            name: name,
            size: size,
            creationDate: date || Date.now(),
            type: mimeType,
        },
        serviceName: serviceName,
        accountId: accountId,
        uploadId: uuid.v4(),
    });
};
export function importFilesMiddleware(eventEmitter, wsProvider) {
    return function (store) { return function (next) { return function (action) {
        if (isStartImportAction(action)) {
            importFiles(eventEmitter, store, wsProvider);
        }
        return next(action);
    }; }; };
}
export function importFiles(eventEmitter, store, wsProvider) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, apiUrl, uploads, tenant, selectedItems, userAuthProvider, auth, selectedUploadFiles;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = store.getState(), apiUrl = _a.apiUrl, uploads = _a.uploads, tenant = _a.tenant, selectedItems = _a.selectedItems, userAuthProvider = _a.userAuthProvider;
                    store.dispatch(hidePopup());
                    return [4 /*yield*/, userAuthProvider()];
                case 1:
                    auth = _b.sent();
                    selectedUploadFiles = selectedItems.map(mapSelectedItemToSelectedUploadFile);
                    eventEmitter.emitUploadsStart(selectedUploadFiles.map(function (_a) {
                        var file = _a.file, uploadId = _a.uploadId;
                        return copyMediaFileForUpload(file, uploadId);
                    }));
                    selectedUploadFiles.forEach(function (selectedUploadFile) {
                        var file = selectedUploadFile.file, serviceName = selectedUploadFile.serviceName, uploadId = selectedUploadFile.uploadId;
                        var selectedItemId = file.id;
                        if (serviceName === 'upload') {
                            var localUpload = uploads[selectedItemId];
                            importFilesFromLocalUpload(selectedItemId, tenant, uploadId, store, localUpload);
                        }
                        else if (serviceName === 'recent_files') {
                            importFilesFromRecentFiles(selectedUploadFile, tenant, store);
                        }
                        else if (isRemoteService(serviceName)) {
                            var wsConnectionHolder = wsProvider.getWsConnectionHolder(apiUrl, auth);
                            importFilesFromRemoteService(selectedUploadFile, tenant, store, wsConnectionHolder);
                        }
                    });
                    return [2 /*return*/];
            }
        });
    });
}
export var importFilesFromLocalUpload = function (selectedItemId, tenant, uploadId, store, localUpload) {
    localUpload.events.forEach(function (originalEvent) {
        var event = tslib_1.__assign({}, originalEvent);
        if (event.name === 'upload-processing') {
            var file = event.data.file;
            var source = {
                id: file.publicId,
                collection: RECENTS_COLLECTION,
            };
            store.dispatch(finalizeUpload(file, uploadId, source, tenant));
        }
        else if (event.name !== 'upload-end') {
            store.dispatch(sendUploadEvent({ event: event, uploadId: uploadId }));
        }
    });
    store.dispatch(setEventProxy(selectedItemId, uploadId));
};
export var importFilesFromRecentFiles = function (selectedUploadFile, tenant, store) {
    var file = selectedUploadFile.file, uploadId = selectedUploadFile.uploadId;
    var source = {
        id: file.id,
        collection: RECENTS_COLLECTION,
    };
    store.dispatch(finalizeUpload(file, uploadId, source, tenant));
    store.dispatch(getPreview(uploadId, file, RECENTS_COLLECTION));
};
export var importFilesFromRemoteService = function (selectedUploadFile, tenant, store, wsConnectionHolder) {
    var uploadId = selectedUploadFile.uploadId, serviceName = selectedUploadFile.serviceName, accountId = selectedUploadFile.accountId, file = selectedUploadFile.file;
    var uploadActivity = new RemoteUploadActivity(uploadId, function (event, payload) {
        // TODO figure out the difference between this uploadId and the last MSW-405
        var uploadId = payload.uploadId;
        var newFile = tslib_1.__assign({}, file, { id: uploadId, creationDate: Date.now() });
        store.dispatch(handleCloudFetchingEvent(newFile, event, payload));
    });
    uploadActivity.on('Started', function () {
        store.dispatch(remoteUploadStart(uploadId, tenant));
    });
    wsConnectionHolder.openConnection(uploadActivity);
    wsConnectionHolder.send({
        type: 'fetchFile',
        params: {
            serviceName: serviceName,
            accountId: accountId,
            fileId: file.id,
            fileName: file.name,
            collection: RECENTS_COLLECTION,
            jobId: uploadId,
        },
    });
};
//# sourceMappingURL=importFiles.js.map