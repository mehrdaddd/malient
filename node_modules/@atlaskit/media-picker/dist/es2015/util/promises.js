export function retryTask(task, retries, initialDelay, delayMultiplier) {
    if (initialDelay === void 0) { initialDelay = 1000; }
    if (delayMultiplier === void 0) { delayMultiplier = 1; }
    return new Promise(function (resolve, reject) {
        var loop = function (retriesLeft, delay) {
            if (retriesLeft > 0) {
                task()
                    .then(resolve)
                    .catch(function (ignored) {
                    setTimeout(function () {
                        loop(retriesLeft - 1, delay * delayMultiplier);
                    }, delay);
                });
            }
            else {
                task()
                    .then(resolve)
                    .catch(reject);
            }
        };
        loop(retries, initialDelay);
    });
}
//# sourceMappingURL=promises.js.map