import * as tslib_1 from "tslib";
// this isn't implemented by JSDOM so we've implemented it to make Typescript happy
// see https://github.com/tmpvar/jsdom/issues/1568
var MockFile = /** @class */ (function () {
    function MockFile() {
    }
    MockFile.prototype.msClose = function () { };
    MockFile.prototype.msDetachStream = function () { };
    MockFile.prototype.slice = function (start, end, contentType) {
        throw new Error('not implemented');
    };
    return MockFile;
}());
export { MockFile };
// this isn't implemented by JSDOM so we've implemented it to make Typescript happy
// see https://github.com/tmpvar/jsdom/issues/1568
var MockFileList = /** @class */ (function (_super) {
    tslib_1.__extends(MockFileList, _super);
    function MockFileList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MockFileList.prototype.item = function (index) {
        return this[index];
    };
    MockFileList.fromArray = function (files) {
        var list = new MockFileList();
        files.forEach(function (file) { return list.push(file); });
        return list;
    };
    return MockFileList;
}(Array));
export { MockFileList };
// this isn't implemented by JSDOM so we've implemented it to make Typescript happy
// see https://github.com/tmpvar/jsdom/issues/1568
var MockDataTransfer = /** @class */ (function () {
    function MockDataTransfer(files) {
        this.files = files;
    }
    MockDataTransfer.prototype.clearData = function (format) {
        return false;
    };
    MockDataTransfer.prototype.getData = function (format) {
        return '';
    };
    MockDataTransfer.prototype.setData = function (format, data) {
        return false;
    };
    MockDataTransfer.prototype.setDragImage = function (image, x, y) { };
    return MockDataTransfer;
}());
export { MockDataTransfer };
// this isn't implemented by JSDOM, and JSDOM .dispatchEvent() requires that event is an instanceof event,
// so we've implemented it to make Typescript happy
// see https://github.com/tmpvar/jsdom/issues/1568
var MockClipboardEvent = /** @class */ (function (_super) {
    tslib_1.__extends(MockClipboardEvent, _super);
    function MockClipboardEvent(event, files) {
        if (files === void 0) { files = []; }
        var _this = _super.call(this, event) || this;
        _this.clipboardData = new MockDataTransfer(MockFileList.fromArray(files));
        return _this;
    }
    return MockClipboardEvent;
}(Event));
export { MockClipboardEvent };
//# sourceMappingURL=clipboardEventMocks.js.map