import * as tslib_1 from "tslib";
import * as React from 'react';
import { render, unmountComponentAtNode } from 'react-dom';
import App from '../popup/components/app';
import { cancelUpload } from '../popup/actions/cancelUpload';
import { showPopup } from '../popup/actions/showPopup';
import { resetView } from '../popup/actions/resetView';
import { setTenant } from '../popup/actions/setTenant';
import { getFilesInRecents } from '../popup/actions/getFilesInRecents';
import { getConnectedRemoteAccounts } from '../popup/actions/getConnectedRemoteAccounts';
import { hidePopup } from '../popup/actions/hidePopup';
import { createStore } from '../store';
import { UploadComponent } from './component';
import { MPPopupLoaded, MPPopupShown, MPPopupHidden, } from '../outer/analytics/events';
import { defaultUploadParams } from '../domain/uploadParams';
export var USER_RECENTS_COLLECTION = 'recents';
var Popup = /** @class */ (function (_super) {
    tslib_1.__extends(Popup, _super);
    function Popup(anlyticsContext, context, _a) {
        var _b = _a.container, container = _b === void 0 ? document.body : _b, uploadParams = _a.uploadParams, useNewUploadService = _a.useNewUploadService;
        var _this = _super.call(this, anlyticsContext) || this;
        _this.context = context;
        _this.analyticsContext.trackEvent(new MPPopupLoaded());
        _this.store = createStore(_this, context, useNewUploadService);
        _this.uploadParams = tslib_1.__assign({}, defaultUploadParams, uploadParams);
        var popup = _this.renderPopup();
        _this.container = popup;
        container.appendChild(popup);
        return _this;
    }
    Popup.prototype.show = function () {
        var _this = this;
        return this.context.config
            .authProvider({
            collectionName: this.uploadParams.collection,
        })
            .then(function (auth) {
            _this.store.dispatch(setTenant({
                auth: auth,
                uploadParams: _this.uploadParams,
            }));
            _this.store.dispatch(resetView());
            _this.store.dispatch(getFilesInRecents());
            // TODO [MSW-466]: Fetch remote accounts only when needed
            _this.store.dispatch(getConnectedRemoteAccounts());
            _this.store.dispatch(showPopup());
            _this.analyticsContext.trackEvent(new MPPopupShown());
        });
    };
    Popup.prototype.cancel = function (uniqueIdentifier) {
        if (uniqueIdentifier === undefined) {
            // TODO Make popup able to accept undefined and cancel all the inflight uploads (MSW-691)
            throw new Error("Popup doesn't support canceling without a unique identifier");
        }
        this.store.dispatch(cancelUpload({ tenantUploadId: uniqueIdentifier }));
    };
    Popup.prototype.teardown = function () {
        unmountComponentAtNode(this.container);
    };
    Popup.prototype.hide = function () {
        this.store.dispatch(hidePopup());
    };
    Popup.prototype.setUploadParams = function (uploadParams) {
        this.uploadParams = tslib_1.__assign({}, defaultUploadParams, uploadParams);
    };
    Popup.prototype.emitClosed = function () {
        this.emit('closed', undefined);
        this.analyticsContext.trackEvent(new MPPopupHidden());
    };
    Popup.prototype.renderPopup = function () {
        var container = document.createElement('div');
        render(React.createElement(App, { store: this.store }), container);
        return container;
    };
    return Popup;
}(UploadComponent));
export { Popup };
//# sourceMappingURL=popup.js.map