"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../../utils");
var getLanguageFromEditorStyle = function (dom) {
    return dom.getAttribute('data-language') || undefined;
};
// example of BB style:
// <div class="codehilite language-javascript"><pre><span>hello world</span><span>\n</span></pre></div>
var getLanguageFromBitbucketStyle = function (dom) {
    if (dom && dom.classList.contains('codehilite')) {
        // code block html from Bitbucket always contains an extra new line
        return extractLanguageFromClass(dom.className);
    }
};
var extractLanguageFromClass = function (className) {
    var languageRegex = /(?:^|\s)language-([^\s]+)/;
    var result = languageRegex.exec(className);
    if (result && result[1]) {
        return result[1];
    }
};
var removeLastNewLine = function (dom) {
    var parent = dom && dom.parentElement;
    if (parent && parent.classList.contains('codehilite')) {
        dom.textContent = dom.textContent.replace(/\n$/, '');
    }
    return dom;
};
exports.codeBlock = {
    attrs: { language: { default: null }, uniqueId: { default: null } },
    content: 'text*',
    marks: '',
    group: 'block',
    code: true,
    defining: true,
    parseDOM: [
        {
            tag: 'pre',
            preserveWhitespace: 'full',
            getAttrs: function (dom) {
                var language = getLanguageFromBitbucketStyle(dom.parentElement) ||
                    getLanguageFromEditorStyle(dom.parentElement) ||
                    dom.getAttribute('data-language');
                dom = removeLastNewLine(dom);
                return { language: language };
            },
        },
        // Handle VSCode paste
        // Checking `white-space: pre-wrap` is too aggressive @see ED-2627
        {
            tag: 'div[style]',
            preserveWhitespace: 'full',
            getAttrs: function (dom) {
                if (dom.style.whiteSpace === 'pre' ||
                    (dom.style.fontFamily &&
                        dom.style.fontFamily.toLowerCase().indexOf('monospace') > -1)) {
                    return {};
                }
                return false;
            },
        },
        // Handle GitHub/Gist paste
        {
            tag: 'table[style]',
            preserveWhitespace: 'full',
            getAttrs: function (dom) {
                if (dom.querySelector('td[class*="blob-code"]')) {
                    return {};
                }
                return false;
            },
        },
    ],
    toDOM: function (node) {
        var className = utils_1.browser.ie && utils_1.browser.ie_version <= 11 ? 'ie11' : '';
        return [
            'pre',
            { 'data-language': node.attrs.language, class: className },
            0,
        ];
    },
};
exports.toJSON = function (node) { return ({
    attrs: Object.keys(node.attrs).reduce(function (memo, key) {
        if (key === 'uniqueId') {
            return memo;
        }
        if (key === 'language' && node.attrs.language === null) {
            return memo;
        }
        memo[key] = node.attrs[key];
        return memo;
    }, {}),
}); };
//# sourceMappingURL=code-block.js.map