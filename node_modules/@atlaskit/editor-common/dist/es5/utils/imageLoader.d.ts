/// <reference types="react" />
import * as React from 'react';
export interface ImageLoaderProps {
    url?: string;
    onExternalImageLoaded?: (dimensions: {
        width: number;
        height: number;
    }) => void;
    imageStatus?: ImageStatus;
}
export interface ImageLoaderState {
    imageStatus: ImageStatus;
}
export declare type ImageStatus = 'complete' | 'loading' | 'error';
export declare const withImageLoader: <P extends any>(Wrapped: React.ComponentType<P & ImageLoaderProps>) => {
    new (props: P & ImageLoaderProps, context?: any): {
        state: ImageLoaderState;
        img: HTMLImageElement | null;
        componentDidMount(): void;
        componentWillReceiveProps(nextProps: ImageLoaderProps): void;
        componentWillUnmount(): void;
        fetchImage({url}: ImageLoaderProps): void;
        onLoad: () => void;
        onError: () => void;
        render(): JSX.Element;
        setState<K extends "imageStatus">(state: ImageLoaderState | ((prevState: Readonly<ImageLoaderState>, props: P & ImageLoaderProps) => ImageLoaderState | Pick<ImageLoaderState, K> | null) | Pick<ImageLoaderState, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<P & ImageLoaderProps>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
};
