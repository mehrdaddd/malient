"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var format = require("date-fns/format");
var isBefore = require("date-fns/is_before");
var parseDate = require("date-fns/parse");
exports.parseDate = parseDate;
var ISO_FORMAT = 'YYYY-MM-DD';
var DEFAULT_FORMAT = 'DD MMM YYYY';
exports.timestampToDate = function (timestamp) {
    var date = new Date(parseDate(Number(timestamp)));
    var day = date.getDate();
    var month = date.getMonth() + 1;
    var year = date.getFullYear();
    return { day: day, month: month, year: year };
};
// example: "23 Jan 2018"
exports.timestampToString = function (timestamp, pattern) {
    if (pattern === void 0) { pattern = DEFAULT_FORMAT; }
    // @see https://github.com/date-fns/date-fns/issues/489
    return format(parseDate(Number(timestamp)), pattern);
};
// example: "2018-01-23"
exports.timestampToIso = function (timestamp) {
    return exports.timestampToString(timestamp, ISO_FORMAT);
};
exports.isPastDate = function (timestamp) {
    var curISO = exports.timestampToIso(new Date().valueOf());
    var givenISO = exports.timestampToIso(timestamp);
    return isBefore(givenISO, curISO);
};
exports.timestampToTaskContext = function (timestamp) {
    var curDate = exports.timestampToDate(new Date().valueOf());
    var givenDate = exports.timestampToDate(timestamp);
    var distance = Math.abs(givenDate.day - curDate.day);
    var pattern = '';
    if (givenDate.year !== curDate.year || exports.isPastDate(timestamp)) {
        pattern = 'DD MMM YYYY';
    }
    else if (givenDate.month !== curDate.month || distance >= 7) {
        pattern = 'ddd, DD MMM';
    }
    else if (distance > 1 && distance < 7) {
        pattern = 'dddd';
    }
    else if (distance === 1) {
        return 'Tomorrow';
    }
    else {
        return 'Today';
    }
    return exports.timestampToString(timestamp, pattern);
};
//# sourceMappingURL=date.js.map