/// <reference types="react" />
import * as React from 'react';
import { Component } from 'react';
import { CardAppearance, CardDimensions, CardOnClickCallback } from '@atlaskit/media-card';
import { Context, ImageResizeMode } from '@atlaskit/media-core';
import { MediaType, ImageStatus, ImageLoaderProps, ImageLoaderState } from '@atlaskit/editor-common';
export interface MediaProvider {
    viewContext?: Context;
}
export interface MediaCardProps {
    id?: string;
    mediaProvider?: MediaProvider;
    eventHandlers?: {
        media?: {
            onClick?: CardOnClickCallback;
        };
    };
    type: MediaType;
    collection?: string;
    url?: string;
    cardDimensions?: CardDimensions;
    resizeMode?: ImageResizeMode;
    appearance?: CardAppearance;
    occurrenceKey?: string;
    imageStatus?: ImageStatus;
    disableOverlay?: boolean;
}
export interface State {
    context?: Context;
}
export declare class MediaCardInternal extends Component<MediaCardProps, State> {
    state: State;
    componentDidMount(): Promise<void>;
    private renderExternal();
    render(): JSX.Element;
}
export declare const MediaCard: new (props?: (MediaCardProps & ImageLoaderProps) | undefined, context?: any) => {
    state: ImageLoaderState;
    img: HTMLImageElement | null;
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: ImageLoaderProps): void;
    componentWillUnmount(): void;
    fetchImage({url}: ImageLoaderProps): void;
    onLoad: () => void;
    onError: () => void;
    render(): JSX.Element;
    setState<K extends "imageStatus">(f: (prevState: ImageLoaderState, props: MediaCardProps & ImageLoaderProps) => Pick<ImageLoaderState, K>, callback?: (() => any) | undefined): void;
    setState<K extends "imageStatus">(state: Pick<ImageLoaderState, K>, callback?: (() => any) | undefined): void;
    forceUpdate(callBack?: (() => any) | undefined): void;
    props: Readonly<{
        children?: React.ReactNode;
    }> & Readonly<MediaCardProps & ImageLoaderProps>;
    context: any;
    refs: {
        [key: string]: React.ReactInstance;
    };
};
