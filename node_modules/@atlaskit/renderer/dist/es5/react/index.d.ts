/// <reference types="react" />
import { Fragment, Mark, Node, Schema } from 'prosemirror-model';
import { Serializer } from '../';
import { TextWrapper } from './nodes';
import { ProviderFactory, EventHandlers, ExtensionHandlers } from '@atlaskit/editor-common';
export interface RendererContext {
    objectAri?: string;
    containerAri?: string;
    adDoc?: any;
    schema?: Schema;
}
export interface ConstructorParams {
    providers?: ProviderFactory;
    eventHandlers?: EventHandlers;
    extensionHandlers?: ExtensionHandlers;
    portal?: HTMLElement;
    objectContext?: RendererContext;
    useNewApplicationCard?: boolean;
}
export default class ReactSerializer implements Serializer<JSX.Element> {
    private providers?;
    private eventHandlers?;
    private extensionHandlers?;
    private portal?;
    private rendererContext?;
    private useNewApplicationCard?;
    constructor({providers, eventHandlers, extensionHandlers, portal, objectContext, useNewApplicationCard}: ConstructorParams);
    serializeFragment(fragment: Fragment, props?: any, target?: any, key?: string): JSX.Element | null;
    private serializeTextWrapper(content);
    private serializeMark(mark, index?);
    private renderNode(NodeComponent, props, key, content);
    private renderMark(MarkComponent, props, key, content);
    private getEmojiBlockProps(node);
    private getTableProps(node);
    private getProps(node);
    private getMarkProps(mark);
    static getChildNodes(fragment: Fragment): (Node | TextWrapper)[];
    static getMarks(node: Node): Mark[];
    static buildMarkStructure(content: Node[]): Mark[];
    static fromSchema(schema: Schema, {providers, eventHandlers, extensionHandlers}: ConstructorParams): ReactSerializer;
}
