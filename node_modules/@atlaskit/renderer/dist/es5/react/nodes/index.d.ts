/// <reference types="react" />
import * as React from 'react';
import { Fragment, Node } from 'prosemirror-model';
import ApplicationCard, { AppCardViewProps } from './applicationCard';
import Blockquote from './blockquote';
import BodiedExtension, { Props as BodiedExtensionProps } from './bodiedExtension';
import BulletList from './bulletList';
import CodeBlock from './codeBlock';
import DecisionItem, { Props as DecisionItemProps } from './decisionItem';
import DecisionList from './decisionList';
import Doc from './doc';
import Emoji from './emoji';
import Extension, { Props as ExtensionProps } from './extension';
import HardBreak from './hardBreak';
import Heading from './heading';
import Image from './image';
import InlineExtension, { Props as InlineExtensionProps } from './inlineExtension';
import ListItem from './listItem';
import Media from './media';
import MediaGroup from './mediaGroup';
import MediaSingle from './mediaSingle';
import Mention from './mention';
import OrderedList from './orderedList';
import Panel from './panel';
import Paragraph from './paragraph';
import Placeholder from './placeholder';
import Rule from './rule';
import TaskItem from './taskItem';
import TaskList from './taskList';
import Table from './table';
import TableCell from './tableCell';
import TableHeader from './tableHeader';
import TableRow from './tableRow';
import UnknownBlock from './unknownBlock';
export declare const nodeToReact: {
    applicationCard: typeof ApplicationCard;
    blockquote: (props: React.Props<any>) => JSX.Element;
    bulletList: (props: React.Props<any>) => JSX.Element;
    codeBlock: typeof CodeBlock;
    decisionItem: React.StatelessComponent<DecisionItemProps>;
    decisionList: typeof DecisionList;
    doc: (props: React.Props<any>) => JSX.Element;
    emoji: typeof Emoji;
    extension: React.StatelessComponent<ExtensionProps>;
    bodiedExtension: React.StatelessComponent<BodiedExtensionProps>;
    hardBreak: (props: React.Props<any>) => JSX.Element;
    heading: (props: {
        level: 1 | 2 | 4 | 3 | 5 | 6;
    } & React.Props<any>) => JSX.Element;
    image: (props: {
        alt?: string | undefined;
        title?: string | undefined;
        src: string;
    } & React.Props<any>) => JSX.Element;
    inlineExtension: React.StatelessComponent<InlineExtensionProps>;
    listItem: (props: React.Props<any>) => JSX.Element;
    media: typeof Media;
    mediaGroup: typeof MediaGroup;
    mediaSingle: typeof MediaSingle;
    mention: typeof Mention;
    orderedList: (props: {
        start?: number | undefined;
    } & React.Props<any>) => JSX.Element;
    panel: typeof Panel;
    paragraph: (props: React.Props<any>) => JSX.Element;
    placeholder: (props: React.Props<any>) => JSX.Element;
    rule: (props: React.Props<any>) => JSX.Element;
    taskItem: typeof TaskItem;
    taskList: typeof TaskList;
    table: (props: any) => JSX.Element;
    tableCell: (props: any) => JSX.Element;
    tableHeader: (props: any) => JSX.Element;
    tableRow: (props: any) => JSX.Element;
    unknownBlock: (props: React.Props<any>) => JSX.Element;
};
export declare const toReact: (node: Node) => React.ComponentClass<any>;
export interface TextWrapper {
    type: {
        name: 'textWrapper';
    };
    content: Node[];
}
export interface NodeSimple {
    type: {
        name: string;
    };
    attrs?: any;
    text?: string;
}
export declare const mergeTextNodes: (nodes: (Node | NodeSimple)[]) => (Node | TextWrapper | NodeSimple)[];
export declare const isText: (type: string) => type is "text";
export declare const isTextWrapper: (type: string) => type is "textWrapper";
/**
 * Detects whether a fragment contains a single paragraph node
 * whose content satisfies the condition for an emoji block
 */
export declare const isEmojiDoc: (doc: Fragment, props?: any) => boolean;
export { AppCardViewProps, ApplicationCard, Blockquote, BodiedExtension, BodiedExtensionProps, BulletList, CodeBlock, DecisionItem, DecisionItemProps, DecisionList, Doc, Emoji, Extension, ExtensionProps, HardBreak, Heading, ListItem, Image, InlineExtension, InlineExtensionProps, Media, MediaGroup, MediaSingle, Mention, OrderedList, Panel, Paragraph, Placeholder, Rule, TaskItem, TaskList, Table, TableCell, TableHeader, TableRow, UnknownBlock };
