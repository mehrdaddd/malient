"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var util_shared_styles_1 = require("@atlaskit/util-shared-styles");
var info_1 = require("@atlaskit/icon/glyph/editor/info");
var hint_1 = require("@atlaskit/icon/glyph/editor/hint");
var success_1 = require("@atlaskit/icon/glyph/editor/success");
var error_1 = require("@atlaskit/icon/glyph/editor/error");
var note_1 = require("@atlaskit/icon/glyph/editor/note");
var warning_1 = require("@atlaskit/icon/glyph/warning");
var styled_components_1 = require("styled-components");
var config = {
    info: {
        icon: info_1.default,
        background: util_shared_styles_1.akColorB50,
        iconColor: util_shared_styles_1.akColorB400,
    },
    note: {
        icon: note_1.default,
        background: util_shared_styles_1.akColorP50,
        iconColor: util_shared_styles_1.akColorP400,
    },
    tip: {
        icon: hint_1.default,
        background: util_shared_styles_1.akColorG50,
        iconColor: util_shared_styles_1.akColorG400,
    },
    success: {
        icon: success_1.default,
        background: util_shared_styles_1.akColorG50,
        iconColor: util_shared_styles_1.akColorG400,
    },
    warning: {
        icon: warning_1.default,
        background: util_shared_styles_1.akColorY50,
        iconColor: util_shared_styles_1.akColorY400,
    },
    error: {
        icon: error_1.default,
        background: util_shared_styles_1.akColorR50,
        iconColor: util_shared_styles_1.akColorR400,
    },
};
// tslint:disable-next-line:variable-name
var PanelWrapper = styled_components_1.default.div(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  border-radius: ", ";\n  margin: ", "px 0;\n  padding: ", "px;\n  background: ", ";\n"], ["\n  border-radius: ", ";\n  margin: ", "px 0;\n  padding: ", "px;\n  background: ", ";\n"])), util_shared_styles_1.akBorderRadius, util_shared_styles_1.akGridSizeUnitless / 2, util_shared_styles_1.akGridSizeUnitless, function (_a) {
    var panelType = _a.panelType;
    return config[panelType].background;
});
// tslint:disable-next-line:variable-name
var IconWrapper = styled_components_1.default.span(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["\n  position: absolute;\n  height: ", "px;\n  width: ", "px;\n  color: ", ";\n"], ["\n  position: absolute;\n  height: ", "px;\n  width: ", "px;\n  color: ", ";\n"])), util_shared_styles_1.akGridSizeUnitless * 3, util_shared_styles_1.akGridSizeUnitless * 3, function (_a) {
    var panelType = _a.panelType;
    return config[panelType].iconColor;
});
// tslint:disable-next-line:variable-name
var ContentWrapper = styled_components_1.default.div(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["\n  margin: 1px 0 1px ", "px;\n"], ["\n  margin: 1px 0 1px ", "px;\n"])), util_shared_styles_1.akGridSizeUnitless * 4);
var Panel = /** @class */ (function (_super) {
    tslib_1.__extends(Panel, _super);
    function Panel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Panel.prototype.render = function () {
        var _a = this.props, panelType = _a.panelType, children = _a.children;
        return (React.createElement(PanelWrapper, { panelType: panelType },
            React.createElement(IconWrapper, { panelType: panelType }, this.getIcon()),
            React.createElement(ContentWrapper, null, children)));
    };
    Panel.prototype.getIcon = function () {
        var panelType = this.props.panelType;
        // tslint:disable-next-line:variable-name
        var Icon = config[panelType].icon;
        return React.createElement(Icon, { label: "Panel {panelType}" });
    };
    return Panel;
}(react_1.PureComponent));
exports.default = Panel;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=panel.js.map