"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nodes_1 = require("./nodes");
exports.reduceTree = function (fragment, schema) {
    var fragmentContainsInlineNodes = false;
    var previousNodeType;
    var textChunks = '';
    var childrenChunks = [];
    fragment.forEach(function (node) {
        fragmentContainsInlineNodes = fragmentContainsInlineNodes || node.isInline;
        if (fragmentContainsInlineNodes) {
            var isTextNode = node.type === schema.nodes.text;
            var delimiter = previousNodeType === schema.nodes.mention &&
                isTextNode &&
                !node.text.startsWith(' ')
                ? ' '
                : '';
            var mapping = nodes_1.nodeToReducerMapping[node.type.name] || nodes_1.nodeToReducerMapping.unknown;
            textChunks += delimiter + mapping(node, schema).text || '';
        }
        else {
            if (Object.keys(schema.nodes).indexOf(node.type.name) === -1) {
                childrenChunks.push(nodes_1.nodeToReducerMapping['unknown'](node, schema));
            }
            else if (nodes_1.nodeToReducerMapping[node.type.name]) {
                childrenChunks.push(nodes_1.nodeToReducerMapping[node.type.name](node, schema));
            }
            else {
                childrenChunks.push(nodes_1.nodeToReducerMapping['unknown'](node, schema));
            }
        }
        previousNodeType = node.type;
    });
    return fragmentContainsInlineNodes
        ? // We want to collapse multiple \n
            [{ text: textChunks.replace(/\n+/g, '\n') }]
        : childrenChunks;
};
//# sourceMappingURL=utils.js.map