import { markSerializers } from './serializers';
export var createTag = function (tagName, attrs, content) {
    var attrsList = [];
    Object.keys(attrs || {}).forEach(function (key) {
        var value = attrs[key];
        if (value === undefined) {
            return;
        }
        attrsList.push(key + "=\"" + String(value).replace(/"/g, '"') + "\"");
    });
    var attrsSerialized = attrsList.length ? " " + attrsList.join(' ') : '';
    return content
        ? "<" + tagName + attrsSerialized + ">" + content + "</" + tagName + ">"
        : "<" + tagName + attrsSerialized + "/>";
};
export var serializeStyle = function (style) {
    return Object.keys(style).reduce(function (memo, key) {
        if (style[key] === undefined) {
            return memo;
        }
        var value = String(style[key]).replace(/"/g, '"');
        return (memo += key + ": " + value + ";");
    }, '');
};
export var applyMarks = function (marks, text) {
    var output = text;
    for (var _i = 0, marks_1 = marks; _i < marks_1.length; _i++) {
        var mark = marks_1[_i];
        // ignore marks with unknown type
        if (markSerializers[mark.type.name]) {
            output = markSerializers[mark.type.name]({ mark: mark, text: output });
        }
    }
    return output;
};
//# sourceMappingURL=util.js.map