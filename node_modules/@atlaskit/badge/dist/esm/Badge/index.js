import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import { Appearance } from '@atlaskit/theme';
import React, { PureComponent } from 'react';
import { BadgeElement } from './styled';
import * as theme from '../theme';

function getValue(value, max) {
  if (value < 0) {
    return '0';
  }
  if (max > 0 && value > max) {
    return max + '+';
  }
  if (value === Infinity) {
    return 'âˆž';
  }
  return String(value);
}

var Badge = function (_PureComponent) {
  _inherits(Badge, _PureComponent);

  function Badge() {
    _classCallCheck(this, Badge);

    return _possibleConstructorReturn(this, (Badge.__proto__ || _Object$getPrototypeOf(Badge)).apply(this, arguments));
  }

  _createClass(Badge, [{
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps) {
      var _props = this.props,
          onValueUpdated = _props.onValueUpdated,
          oldValue = _props.value;
      var newValue = nextProps.value;


      if (onValueUpdated && newValue !== oldValue) {
        onValueUpdated({ oldValue: oldValue, newValue: newValue });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          appearance = _props2.appearance,
          max = _props2.max,
          value = _props2.value;

      var computedValue = getValue(value, max);
      return React.createElement(
        Appearance,
        { props: appearance, theme: theme },
        function (styleProps) {
          return React.createElement(
            BadgeElement,
            styleProps,
            computedValue
          );
        }
      );
    }
  }]);

  return Badge;
}(PureComponent);

Badge.defaultProps = {
  appearance: 'default',
  max: 99,
  value: 0
};
export default Badge;