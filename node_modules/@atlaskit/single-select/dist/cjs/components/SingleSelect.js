'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _StatelessSelect = require('./StatelessSelect');

var _StatelessSelect2 = _interopRequireDefault(_StatelessSelect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// =============================================================
// NOTE: Duplicated in ./internal/appearances until docgen can follow imports.
// -------------------------------------------------------------
// DO NOT update values here without updating the other.
// =============================================================

var appearances = {
  values: ['default', 'subtle'],
  default: 'default'
};

var AkSingleSelect = function (_PureComponent) {
  (0, _inherits3.default)(AkSingleSelect, _PureComponent);

  function AkSingleSelect() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, AkSingleSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AkSingleSelect.__proto__ || (0, _getPrototypeOf2.default)(AkSingleSelect)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isOpen: _this.props.isDefaultOpen,
      selectedItem: _this.props.defaultSelected,
      filterValue: _this.props.defaultSelected ? (0, _StatelessSelect.getTextContent)(_this.props.defaultSelected) : ''
    }, _this.selectItem = function (item) {
      _this.setState({ isOpen: false, selectedItem: item });
      if (_this.props.onSelected) {
        _this.props.onSelected({ item: item });
      }
    }, _this.handleOpenChange = function (attrs) {
      // allows consuming components to look for `defaultPrevented` on the event
      // where they can handle internal state e.g. prevent InlineDialog from closing when
      // the target DOM node no-longer exists
      if (!attrs.isOpen) attrs.event.preventDefault();

      _this.setState({ isOpen: attrs.isOpen });
      if (_this.props.onOpenChange) {
        _this.props.onOpenChange(attrs);
      }
    }, _this.handleFilterChange = function (value) {
      if (_this.props.onFilterChange) {
        _this.props.onFilterChange(value);
      }
      _this.setState({ filterValue: value });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(AkSingleSelect, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_StatelessSelect2.default, {
        appearance: this.props.appearance,
        droplistShouldFitContainer: this.props.droplistShouldFitContainer,
        filterValue: this.state.filterValue,
        hasAutocomplete: this.props.hasAutocomplete,
        id: this.props.id,
        isDisabled: this.props.isDisabled,
        isFirstChild: this.props.isFirstChild,
        isInvalid: this.props.isInvalid,
        invalidMessage: this.props.invalidMessage,
        isOpen: this.state.isOpen,
        isRequired: this.props.isRequired,
        items: this.props.items,
        label: this.props.label,
        name: this.props.name,
        noMatchesFound: this.props.noMatchesFound,
        onFilterChange: this.handleFilterChange,
        onOpenChange: this.handleOpenChange,
        onSelected: this.selectItem,
        placeholder: this.props.placeholder,
        position: this.props.position,
        selectedItem: this.state.selectedItem,
        shouldFitContainer: this.props.shouldFitContainer,
        shouldFocus: this.props.shouldFocus,
        shouldFlip: this.props.shouldFlip,
        maxHeight: this.props.maxHeight
      });
    }
  }]);
  return AkSingleSelect;
}(_react.PureComponent);

AkSingleSelect.defaultProps = {
  appearance: appearances.default,
  droplistShouldFitContainer: true,
  isRequired: false,
  items: [],
  label: '',
  onFilterChange: function onFilterChange() {},
  onOpenChange: function onOpenChange() {},
  onSelected: function onSelected() {},
  placeholder: '',
  position: 'bottom left',
  shouldFocus: false,
  shouldFlip: true
};
exports.default = AkSingleSelect;