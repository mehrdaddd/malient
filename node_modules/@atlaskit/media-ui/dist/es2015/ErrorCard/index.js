import * as tslib_1 from "tslib";
import * as React from 'react';
import Button from '@atlaskit/button';
import WarningGlyph from '@atlaskit/icon/glyph/warning';
import { akColorY400 } from '@atlaskit/util-shared-styles';
import { CardFrame } from '../CardFrame';
import { linkErrorIcon } from './icons';
import { ErrorContainer, ErrorMessage, ErrorImage, ErrorWrapper, } from './styled';
var ErrorCard = /** @class */ (function (_super) {
    tslib_1.__extends(ErrorCard, _super);
    function ErrorCard() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ErrorCard.prototype.render = function () {
        var _a = this.props, hasPreview = _a.hasPreview, minWidth = _a.minWidth, maxWidth = _a.maxWidth, onRetry = _a.onRetry;
        var icon = (React.createElement(WarningGlyph, { label: "error", size: "small", primaryColor: akColorY400 }));
        var retryButton = onRetry ? (React.createElement(Button, { onClick: onRetry }, "Try again")) : null;
        return (React.createElement(CardFrame, { icon: icon, text: "", minWidth: minWidth, maxWidth: maxWidth },
            React.createElement(ErrorWrapper, { hasPreview: hasPreview },
                React.createElement(ErrorContainer, { hasPreview: hasPreview },
                    hasPreview ? React.createElement(ErrorImage, { src: linkErrorIcon, alt: "Error" }) : null,
                    React.createElement(ErrorMessage, { hasPreview: hasPreview }, "We stumbled a bit here."),
                    retryButton))));
    };
    return ErrorCard;
}(React.Component));
export { ErrorCard };
//# sourceMappingURL=index.js.map