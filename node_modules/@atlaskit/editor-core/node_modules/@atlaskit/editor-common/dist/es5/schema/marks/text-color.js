"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_shared_styles_1 = require("@atlaskit/util-shared-styles");
var groups_1 = require("../groups");
var utils_1 = require("../../utils");
/** New borders for colors in the color picker */
exports.borderColorPalette = {
    orange: util_shared_styles_1.akColorY500,
    teal: util_shared_styles_1.akColorT500,
    red: util_shared_styles_1.akColorR500,
    'light-grey': util_shared_styles_1.akColorN90,
    purple: util_shared_styles_1.akColorP500,
    green: util_shared_styles_1.akColorG500,
};
// @see https://product-fabric.atlassian.net/wiki/spaces/E/pages/55979455/Colour+picker+decisions#Colourpickerdecisions-Visualdesigndecisions
exports.colorPalette = new Map();
[
    // [akColorN800, default],
    [util_shared_styles_1.akColorN80, 'Light-grey'],
    [util_shared_styles_1.akColorP300, 'Purple'],
    [util_shared_styles_1.akColorT300, 'Teal'],
    [util_shared_styles_1.akColorG300, 'Green'],
    [util_shared_styles_1.akColorR300, 'Red'],
    [util_shared_styles_1.akColorY400, 'Orange'],
].forEach(function (_a) {
    var color = _a[0], label = _a[1];
    return exports.colorPalette.set(color.toLowerCase(), label);
});
exports.textColor = {
    attrs: { color: {} },
    inclusive: true,
    group: groups_1.COLOR,
    parseDOM: [
        {
            style: 'color',
            getAttrs: function (value) {
                var hexColor;
                if (value.match(/^rgb/i)) {
                    hexColor = utils_1.rgbToHex(value);
                }
                else if (value[0] === '#') {
                    hexColor = value.toLowerCase();
                }
                // else handle other colour formats
                return exports.colorPalette.has(hexColor) ? { color: hexColor } : false;
            },
        },
    ],
    toDOM: function (mark) {
        return [
            'span',
            {
                style: "color: " + mark.attrs.color,
            },
        ];
    },
};
//# sourceMappingURL=text-color.js.map