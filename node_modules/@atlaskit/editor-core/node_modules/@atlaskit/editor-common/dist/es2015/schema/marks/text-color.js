import { akColorG300, akColorN80, akColorP300, akColorR300, akColorT300, akColorY400, akColorY500, akColorT500, akColorG500, akColorP500, akColorN90, akColorR500, } from '@atlaskit/util-shared-styles';
import { COLOR } from '../groups';
import { rgbToHex } from '../../utils';
/** New borders for colors in the color picker */
export var borderColorPalette = {
    orange: akColorY500,
    teal: akColorT500,
    red: akColorR500,
    'light-grey': akColorN90,
    purple: akColorP500,
    green: akColorG500,
};
// @see https://product-fabric.atlassian.net/wiki/spaces/E/pages/55979455/Colour+picker+decisions#Colourpickerdecisions-Visualdesigndecisions
export var colorPalette = new Map();
[
    // [akColorN800, default],
    [akColorN80, 'Light-grey'],
    [akColorP300, 'Purple'],
    [akColorT300, 'Teal'],
    [akColorG300, 'Green'],
    [akColorR300, 'Red'],
    [akColorY400, 'Orange'],
].forEach(function (_a) {
    var color = _a[0], label = _a[1];
    return colorPalette.set(color.toLowerCase(), label);
});
export var textColor = {
    attrs: { color: {} },
    inclusive: true,
    group: COLOR,
    parseDOM: [
        {
            style: 'color',
            getAttrs: function (value) {
                var hexColor;
                if (value.match(/^rgb/i)) {
                    hexColor = rgbToHex(value);
                }
                else if (value[0] === '#') {
                    hexColor = value.toLowerCase();
                }
                // else handle other colour formats
                return colorPalette.has(hexColor) ? { color: hexColor } : false;
            },
        },
    ],
    toDOM: function (mark) {
        return [
            'span',
            {
                style: "color: " + mark.attrs.color,
            },
        ];
    },
};
//# sourceMappingURL=text-color.js.map