import { akColorN20, akColorB50, akColorT50, akColorP50, akColorR50, akColorG50, akColorY50, akColorN0, akColorB75, akColorG75, akColorR75, akColorN40, akColorP75, akColorT75, akColorY75, } from '@atlaskit/util-shared-styles';
import { hexToRgba } from '../../utils';
import { akEditorTableCellBackgroundOpacity, akEditorTableNumberColumnWidth, } from '../../styles';
var getCellAttrs = function (dom) {
    var widthAttr = dom.getAttribute('data-colwidth');
    var width = widthAttr && /^\d+(,\d+)*$/.test(widthAttr)
        ? widthAttr.split(',').map(function (str) { return Number(str); })
        : null;
    var colspan = Number(dom.getAttribute('colspan') || 1);
    return {
        colspan: colspan,
        rowspan: Number(dom.getAttribute('rowspan') || 1),
        colwidth: width && width.length === colspan ? width : null,
        background: dom.style.backgroundColor || null,
    };
};
var setCellAttrs = function (node) {
    var attrs = {};
    if (node.attrs.colspan !== 1) {
        attrs.colspan = node.attrs.colspan;
    }
    if (node.attrs.rowspan !== 1) {
        attrs.rowspan = node.attrs.rowspan;
    }
    if (node.attrs.colwidth) {
        attrs['data-colwidth'] = node.attrs.colwidth.join(',');
    }
    if (node.attrs.background) {
        var background = node.attrs.background;
        var nodeType = node.type.name;
        // to ensure that we don't overwrite product's style:
        // - it clears background color for <th> if its set to grey
        // - it clears background color for <td> if its set to white
        var ignored = (nodeType === 'tableHeader' &&
            background === tableBackgroundColorNames.get('grey')) ||
            (nodeType === 'tableCell' &&
                background === tableBackgroundColorNames.get('white'));
        if (!ignored) {
            var color = nodeType === 'tableCell'
                ? hexToRgba(background, akEditorTableCellBackgroundOpacity)
                : background;
            attrs.style = (attrs.style || '') + "background-color: " + color + ";";
        }
    }
    return attrs;
};
export var tableBackgroundColorPalette = new Map();
/** New borders for colors in the color picker */
export var tableBackgroundBorderColors = {
    blue: akColorB75,
    teal: akColorT75,
    red: akColorR75,
    grey: akColorN40,
    purple: akColorP75,
    green: akColorG75,
    yellow: akColorY75,
    white: akColorN40,
};
export var tableBackgroundColorNames = new Map();
[
    [akColorB50, 'Blue'],
    [akColorT50, 'Teal'],
    [akColorR50, 'Red'],
    [akColorN20, 'Grey'],
    [akColorP50, 'Purple'],
    [akColorG50, 'Green'],
    [akColorY50, 'Yellow'],
    [akColorN0, 'White'],
].forEach(function (_a) {
    var colorValue = _a[0], colorName = _a[1];
    tableBackgroundColorPalette.set(colorValue.toLowerCase(), colorName);
    tableBackgroundColorNames.set(colorName.toLowerCase(), colorValue.toLowerCase());
});
export function calcTableColumnWidths(node) {
    var tableColumnWidths = [];
    var isNumberColumnEnabled = node.attrs.isNumberColumnEnabled;
    node.forEach(function (rowNode, _, i) {
        rowNode.forEach(function (colNode, _, j) {
            var colwidth = colNode.attrs.colwidth || [0];
            if (isNumberColumnEnabled && j === 0) {
                if (!colwidth) {
                    colwidth = [akEditorTableNumberColumnWidth];
                }
            }
            // if we have a colwidth attr for this cell, and it contains new
            // colwidths we haven't seen for the whole table yet, add those
            // (colwidths over the table are defined as-we-go)
            if (colwidth && colwidth.length + j > tableColumnWidths.length) {
                tableColumnWidths = tableColumnWidths.slice(0, j).concat(colwidth);
            }
        });
    });
    return tableColumnWidths;
}
// "any", because NodeSpec doesn't support "tableRole" yet
export var table = {
    content: 'tableRow+',
    attrs: {
        isNumberColumnEnabled: { default: false },
        layout: { default: 'default' },
        __autoSize: { default: false },
    },
    tableRole: 'table',
    isolating: true,
    group: 'block',
    parseDOM: [
        {
            tag: 'table',
            getAttrs: function (dom) { return ({
                isNumberColumnEnabled: dom.getAttribute('data-number-column') === 'true' ? true : false,
                layout: dom.getAttribute('data-layout') || 'default',
                __autoSize: dom.getAttribute('data-autosize') === 'true' ? true : false,
            }); },
        },
    ],
    toDOM: function (node) {
        var attrs = {
            'data-number-column': node.attrs.isNumberColumnEnabled,
            'data-layout': node.attrs.layout,
            'data-autosize': node.attrs.__autoSize,
        };
        return ['table', attrs, ['tbody', 0]];
    },
};
export var tableToJSON = function (node) { return ({
    attrs: Object.keys(node.attrs)
        .filter(function (key) { return !key.startsWith('__'); })
        .reduce(function (obj, key) {
        obj[key] = node.attrs[key];
        return obj;
    }, {}),
}); };
export var tableRow = {
    content: '(tableCell | tableHeader)+',
    tableRole: 'row',
    parseDOM: [{ tag: 'tr' }],
    toDOM: function () {
        return ['tr', 0];
    },
};
var cellAttrs = {
    colspan: { default: 1 },
    rowspan: { default: 1 },
    colwidth: { default: null },
    background: { default: null },
};
export var tableCell = {
    content: '(paragraph | panel | blockquote | orderedList | bulletList | rule | heading | codeBlock |  mediaGroup | mediaSingle | applicationCard | decisionList | taskList | extension)+',
    attrs: cellAttrs,
    tableRole: 'cell',
    isolating: true,
    parseDOM: [
        {
            tag: 'td',
            getAttrs: function (dom) { return getCellAttrs(dom); },
        },
    ],
    toDOM: function (node) {
        return ['td', setCellAttrs(node), 0];
    },
};
export var toJSONTableCell = function (node) { return ({
    attrs: Object.keys(node.attrs).reduce(function (obj, key) {
        if (cellAttrs[key].default !== node.attrs[key]) {
            obj[key] = node.attrs[key];
        }
        return obj;
    }, {}),
}); };
export var tableHeader = {
    content: '(paragraph | panel | blockquote | orderedList | bulletList | rule | heading | codeBlock | mediaGroup | mediaSingle  | applicationCard | decisionList | taskList | extension)+',
    attrs: cellAttrs,
    tableRole: 'header_cell',
    isolating: true,
    parseDOM: [
        {
            tag: 'th',
            getAttrs: function (dom) { return getCellAttrs(dom); },
        },
    ],
    toDOM: function (node) {
        return ['th', setCellAttrs(node), 0];
    },
};
export var toJSONTableHeader = toJSONTableCell;
//# sourceMappingURL=tableNodes.js.map