"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var styled_1 = require("./styled");
var arrow_1 = require("@atlaskit/icon/glyph/media-services/arrow");
var brush_1 = require("@atlaskit/icon/glyph/media-services/brush");
var line_1 = require("@atlaskit/icon/glyph/media-services/line");
var text_1 = require("@atlaskit/icon/glyph/media-services/text");
var ColorButton = /** @class */ (function (_super) {
    tslib_1.__extends(ColorButton, _super);
    function ColorButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorButton.prototype.render = function () {
        var _a = this.props.color, red = _a.red, green = _a.green, blue = _a.blue;
        var buttonColor = "rgb(" + red + ", " + green + ", " + blue + ")";
        return (React.createElement(styled_1.ToolbarButton, { selected: this.props.selected, onClick: this.props.onClick },
            React.createElement(styled_1.ColorSquare, { color: buttonColor })));
    };
    return ColorButton;
}(React.Component));
exports.ColorButton = ColorButton;
var LineWidthButton = /** @class */ (function (_super) {
    tslib_1.__extends(LineWidthButton, _super);
    function LineWidthButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LineWidthButton.prototype.render = function () {
        return (React.createElement(styled_1.ToolbarButton, { selected: this.props.selected, onClick: this.props.onClick },
            React.createElement(styled_1.LineWidthBackCircle, null,
                React.createElement(styled_1.LineWidthFrontCircle, { width: this.props.lineWidth }))));
    };
    return LineWidthButton;
}(React.Component));
exports.LineWidthButton = LineWidthButton;
var ToolButton = /** @class */ (function (_super) {
    tslib_1.__extends(ToolButton, _super);
    function ToolButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolButton.prototype.render = function () {
        return (React.createElement(styled_1.ToolbarButton, { selected: this.props.selected, onClick: this.props.onClick },
            React.createElement(styled_1.ToolIcon, null, this.createIcon())));
    };
    ToolButton.prototype.createIcon = function () {
        var tool = this.props.tool;
        var size = 'medium';
        switch (tool) {
            case 'arrow':
                return React.createElement(arrow_1.default, { label: tool, size: size });
            case 'line':
                return React.createElement(line_1.default, { label: tool, size: size });
            case 'brush':
                return React.createElement(brush_1.default, { label: tool, size: size });
            case 'text':
                return React.createElement(text_1.default, { label: tool, size: size });
            default:
                return null;
        }
    };
    return ToolButton;
}(React.Component));
exports.ToolButton = ToolButton;
//# sourceMappingURL=toolbarButtons.js.map