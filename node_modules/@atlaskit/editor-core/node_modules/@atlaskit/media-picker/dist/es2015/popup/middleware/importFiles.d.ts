import { Store, Middleware } from 'redux';
import { State, Tenant, SelectedItem, LocalUpload } from '../domain';
import { WsProvider } from '../tools/websocket/wsProvider';
import { WsConnectionHolder } from '../tools/websocket/wsConnectionHolder';
import { MediaFile } from '../../domain/file';
import { PopupUploadEventEmitter } from '../../components/popup';
export interface RemoteFileItem extends SelectedItem {
    accountId: string;
    publicId: string;
}
export declare const isRemoteFileItem: (item: SelectedItem) => item is RemoteFileItem;
export declare const isRemoteService: (serviceName: string) => boolean;
export declare function importFilesMiddleware(eventEmitter: PopupUploadEventEmitter, wsProvider: WsProvider): Middleware;
export declare function importFiles(eventEmitter: PopupUploadEventEmitter, store: Store<State>, wsProvider: WsProvider): Promise<void>;
export declare const importFilesFromLocalUpload: (selectedItemId: string, tenant: Tenant, uploadId: string, store: Store<State>, localUpload: LocalUpload) => void;
export declare const importFilesFromRecentFiles: (selectedUploadFile: {
    readonly file: MediaFile;
    readonly uploadId: string;
    readonly serviceName: string;
    readonly accountId?: string | undefined;
}, tenant: Tenant, store: Store<State>) => void;
export declare const importFilesFromRemoteService: (selectedUploadFile: {
    readonly file: MediaFile;
    readonly uploadId: string;
    readonly serviceName: string;
    readonly accountId?: string | undefined;
}, tenant: Tenant, store: Store<State>, wsConnectionHolder: WsConnectionHolder) => void;
