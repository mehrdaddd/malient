import { AuthProvider, Context } from '@atlaskit/media-core';
import { LocalUploadComponent } from '../localUpload';
import { MediaPickerContext } from '../../domain/context';
import { UploadEventPayloadMap } from '../../domain/uploadEvent';
import { UploadParams } from '../..';
export interface DropzoneConfig {
    uploadParams: UploadParams;
    userAuthProvider?: AuthProvider;
    container?: HTMLElement;
    headless?: boolean;
}
export interface DropzoneConstructor {
    new (analyticsContext: MediaPickerContext, context: Context, dropzoneConfig: DropzoneConfig): Dropzone;
}
export interface DropzoneDragEnterEventPayload {
    length: number;
}
export declare type DropzoneUploadEventPayloadMap = UploadEventPayloadMap & {
    readonly drop: undefined;
    readonly 'drag-enter': DropzoneDragEnterEventPayload;
    readonly 'drag-leave': undefined;
};
export declare class Dropzone extends LocalUploadComponent<DropzoneUploadEventPayloadMap> {
    private container;
    private instance;
    private headless;
    private uiActive;
    constructor(analyticsContext: MediaPickerContext, context: Context, config?: DropzoneConfig);
    activate(): Promise<void>;
    deactivate(): void;
    private onDragOver;
    private getDraggedItemsLength(dataTransfer);
    private onDragLeave;
    private createInstance();
    private getDropzoneUI();
    private onDrop;
    private emitDragOver(e);
    private emitDragLeave();
    private static dragContainsFiles(event);
}
