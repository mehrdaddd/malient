import * as tslib_1 from "tslib";
import { MPFileProcessingStarted, MPFileUploadEnded, } from '../outer/analytics/events';
import { GenericEventEmitter } from '../util/eventEmitter';
var UploadComponent = /** @class */ (function (_super) {
    tslib_1.__extends(UploadComponent, _super);
    function UploadComponent(analyticsContext) {
        var _this = _super.call(this) || this;
        _this.analyticsContext = analyticsContext;
        return _this;
    }
    UploadComponent.prototype.emitUploadsStart = function (files) {
        this.emit('uploads-start', {
            files: files,
        });
    };
    UploadComponent.prototype.emitUploadProgress = function (file, progress) {
        this.emit('upload-status-update', {
            file: file,
            progress: progress,
        });
    };
    UploadComponent.prototype.emitUploadPreviewUpdate = function (file, preview) {
        this.emit('upload-preview-update', {
            file: file,
            preview: preview,
        });
    };
    UploadComponent.prototype.emitUploadProcessing = function (file) {
        this.emit('upload-processing', { file: file });
        this.analyticsContext.trackEvent(new MPFileProcessingStarted());
    };
    UploadComponent.prototype.emitUploadEnd = function (file, mediaApiData) {
        this.emit('upload-end', { file: file, public: mediaApiData });
        this.analyticsContext.trackEvent(new MPFileUploadEnded());
    };
    UploadComponent.prototype.emitUploadError = function (file, error) {
        this.emit('upload-error', {
            file: file,
            error: error,
        });
    };
    return UploadComponent;
}(GenericEventEmitter));
export { UploadComponent };
//# sourceMappingURL=component.js.map