"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var handleError_1 = require("../util/handleError");
function validateMediaFile(_a) {
    var id = _a.id, name = _a.name, size = _a.size, creationDate = _a.creationDate, type = _a.type;
    if (!isValidFileId(id)) {
        handleError_1.handleError('wrong_file_id', 'Passed fileId is incorrect.');
    }
    if (!isValidName(name)) {
        handleError_1.handleError('wrong_file_name', 'Passed file name is incorrect.');
    }
    if (!isValidSize(size)) {
        handleError_1.handleError('wrong_file_size', 'Passed file size is incorrect.');
    }
    if (!isValidCreationDate(creationDate)) {
        handleError_1.handleError('wrong_file_date', 'Passed file creation date is incorrect.');
    }
    if (!isValidType(type)) {
        handleError_1.handleError('wrong_file_type', 'Passed file type is incorrect.');
    }
}
exports.validateMediaFile = validateMediaFile;
function isValidFileId(id) {
    return typeof id === 'string' && id.length > 0;
}
function isValidName(name) {
    return typeof name === 'string';
}
function isValidType(type) {
    return typeof type === 'string';
}
function isValidSize(size) {
    return typeof size === 'number' && size >= 0;
}
function isValidCreationDate(date) {
    return typeof date === 'number' && date > 0;
}
function copyMediaFileForUpload(_a, uploadId) {
    var name = _a.name, size = _a.size, creationDate = _a.creationDate, type = _a.type;
    // We dont' use spread here because user upload events are not sanitized
    return {
        id: uploadId,
        name: name,
        size: size,
        creationDate: creationDate,
        type: type,
    };
}
exports.copyMediaFileForUpload = copyMediaFileForUpload;
function copyPublicMediaFileForUpload(_a, uploadId) {
    var name = _a.name, size = _a.size, creationDate = _a.creationDate, type = _a.type, publicId = _a.publicId;
    // We dont' use spread here because user upload events are not sanitized
    return {
        id: uploadId,
        name: name,
        size: size,
        creationDate: creationDate,
        type: type,
        publicId: publicId,
    };
}
exports.copyPublicMediaFileForUpload = copyPublicMediaFileForUpload;
function isPublicMediaFile(file) {
    return !!file.publicId;
}
exports.isPublicMediaFile = isPublicMediaFile;
//# sourceMappingURL=file.js.map