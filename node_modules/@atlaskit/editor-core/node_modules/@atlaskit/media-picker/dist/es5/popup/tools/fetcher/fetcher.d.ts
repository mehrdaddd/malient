import { Auth, FileDetails } from '@atlaskit/media-core';
import { Preview } from '../../../domain/preview';
import { CollectionItem, File, Service, ServiceAccountWithType, ServiceFolder, ServiceName, SourceFile } from '../../domain';
export interface GetRecentFilesData {
    readonly contents: CollectionItem[];
    readonly nextInclusiveStartKey: string;
}
export interface CopyFileDestination {
    readonly auth: Auth;
    readonly collection?: string;
}
export interface GiphyImage {
    url: string;
    width: string;
    height: string;
    size: string;
    mp4: string;
    mp4_size: string;
    webp: string;
    webp_size: string;
}
export interface GiphyResponse {
    data: [{
        id: string;
        slug: string;
        images: {
            fixed_width: GiphyImage;
            original: GiphyImage;
        };
    }];
    pagination: {
        total_count: number;
        count: number;
        offset: number;
    };
}
export interface GiphyData {
    cardModels: ImageCardModel[];
    totalResultCount: number;
}
export interface ImageCardModel {
    metadata: FileDetails;
    dataURI: string;
    dimensions: {
        width: number;
        height: number;
    };
}
export interface Fetcher {
    fetchCloudAccountFolder(apiUrl: string, auth: Auth, serviceName: ServiceName, accountId: string, folderId: string, cursor?: string): Promise<ServiceFolder>;
    pollFile(apiUrl: string, auth: Auth, fileId: string, collection?: string): Promise<File>;
    getPreview(apiUrl: string, auth: Auth, fileId: string, collection?: string): Promise<Preview>;
    getImage(apiUrl: string, auth: Auth, fileId: string, collection?: string): Promise<Blob>;
    getServiceList(apiUrl: string, auth: Auth): Promise<ServiceAccountWithType[]>;
    getRecentFiles(apiUrl: string, auth: Auth, limit: number, sortDirection: string, inclusiveStartKey?: string): Promise<GetRecentFilesData>;
    unlinkCloudAccount(apiUrl: string, auth: Auth, accountId: string): Promise<void>;
    copyFile(apiUrl: string, sourceFile: SourceFile, destination: CopyFileDestination, collection?: string): Promise<File>;
    fetchTrendingGifs(offset?: number): Promise<GiphyData>;
    fetchGifsRelevantToSearch(query: string, offset?: number): Promise<GiphyData>;
}
export declare class MediaApiFetcher implements Fetcher {
    constructor();
    fetchCloudAccountFolder(apiUrl: string, auth: Auth, serviceName: ServiceName, accountId: string, folderId: string, cursor?: string): Promise<ServiceFolder>;
    pollFile(apiUrl: string, auth: Auth, fileId: string, collection?: string): Promise<File>;
    getPreview(apiUrl: string, auth: Auth, fileId: string, collection?: string): Promise<Preview>;
    getImage(apiUrl: string, auth: Auth, fileId: string, collection?: string): Promise<Blob>;
    getServiceList(apiUrl: string, auth: Auth): Promise<ServiceAccountWithType[]>;
    getRecentFiles(apiUrl: string, auth: Auth, limit: number, sortDirection: string, inclusiveStartKey?: string): Promise<GetRecentFilesData>;
    unlinkCloudAccount(apiUrl: string, auth: Auth, accountId: string): Promise<void>;
    copyFile(apiUrl: string, sourceFile: SourceFile, {auth, collection}: CopyFileDestination): Promise<File>;
    fetchTrendingGifs: (offset?: number | undefined) => Promise<GiphyData>;
    fetchGifsRelevantToSearch: (query: string, offset?: number | undefined) => Promise<GiphyData>;
    private mapGiphyResponseToViewModel;
    private parsePayload(method, payload);
    private query<R>(url, method, payload, authHeaders);
    private query(url, method, payload, authHeaders, responseType);
    private isFolder(item);
    private sortDropboxFiles(items);
    private fileStoreUrl(apiUrl);
    private pickerUrl(apiUrl);
}
export declare function flattenAccounts(services: Service[]): ServiceAccountWithType[];
