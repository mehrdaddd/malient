"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var styles = require("./styles");
var LoadingEmojiComponent_1 = require("../common/LoadingEmojiComponent");
var EmojiPickerComponent_1 = require("./EmojiPickerComponent");
var EmojiPickerVirtualItems_1 = require("./EmojiPickerVirtualItems");
var analytics_1 = require("@atlaskit/analytics");
var EmojiPickerInternal = /** @class */ (function (_super) {
    tslib_1.__extends(EmojiPickerInternal, _super);
    function EmojiPickerInternal(props) {
        return _super.call(this, props, {}) || this;
    }
    EmojiPickerInternal.prototype.renderLoading = function () {
        var _this = this;
        var item = new EmojiPickerVirtualItems_1.LoadingItem();
        var handlePickerRef = function (ref) {
            if (_this.props.onPickerRef) {
                _this.props.onPickerRef(ref);
            }
        };
        return (React.createElement("div", { className: styles.emojiPicker, ref: handlePickerRef }, item.renderItem()));
    };
    EmojiPickerInternal.prototype.renderLoaded = function (loadedEmojiProvider) {
        var _a = this.props, emojiProvider = _a.emojiProvider, otherProps = tslib_1.__rest(_a, ["emojiProvider"]);
        return (React.createElement(EmojiPickerComponent_1.default, tslib_1.__assign({ emojiProvider: loadedEmojiProvider }, otherProps)));
    };
    return EmojiPickerInternal;
}(LoadingEmojiComponent_1.default));
exports.EmojiPickerInternal = EmojiPickerInternal;
// tslint:disable-next-line:variable-name
var EmojiPicker = analytics_1.withAnalytics(EmojiPickerInternal, {}, {});
exports.default = EmojiPicker;
//# sourceMappingURL=EmojiPicker.js.map