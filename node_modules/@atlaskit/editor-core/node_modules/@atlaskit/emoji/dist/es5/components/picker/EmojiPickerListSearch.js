"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var field_base_1 = require("@atlaskit/field-base");
var search_1 = require("@atlaskit/icon/glyph/search");
var styles = require("./styles");
var EmojiPickerListSearch = /** @class */ (function (_super) {
    tslib_1.__extends(EmojiPickerListSearch, _super);
    function EmojiPickerListSearch(props) {
        var _this = _super.call(this, props) || this;
        _this.onChange = function (e) {
            _this.setState({ query: e.target.value });
            _this.props.onChange(e);
        };
        _this.handleInputRef = function (input) {
            if (input) {
                input.focus();
            }
        };
        _this.state = {
            query: props.query,
        };
        return _this;
    }
    EmojiPickerListSearch.prototype.componentWillReceiveProps = function (nextProps) {
        this.setState({ query: nextProps.query });
    };
    EmojiPickerListSearch.prototype.render = function () {
        var _a = this.props, style = _a.style, query = _a.query;
        return (React.createElement("div", { className: styles.pickerSearch, style: style },
            React.createElement(field_base_1.default, { appearance: "standard", label: "Search", isCompact: true, isLabelHidden: true, isFitContainerWidthEnabled: true },
                React.createElement("span", { className: styles.searchIcon },
                    React.createElement(search_1.default, { label: "Search" })),
                React.createElement("input", { className: styles.input, autoComplete: "off", disabled: false, name: "search", placeholder: "Search...", required: false, onChange: this.onChange, value: query || '', ref: this.handleInputRef }))));
    };
    EmojiPickerListSearch.defaultProps = {
        style: {},
    };
    return EmojiPickerListSearch;
}(react_1.PureComponent));
exports.default = EmojiPickerListSearch;
//# sourceMappingURL=EmojiPickerListSearch.js.map