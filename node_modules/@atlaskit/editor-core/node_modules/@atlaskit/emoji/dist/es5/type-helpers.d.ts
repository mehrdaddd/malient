import { EmojiDescription, EmojiDescriptionWithVariations, EmojiVariationDescription, EmojiId, ImageRepresentation, MediaApiRepresentation, OptionalEmojiDescription, SpriteRepresentation, SpriteServiceRepresentation, EmojiRepresentation } from './types';
export declare const isSpriteServiceRepresentation: (rep: any) => rep is SpriteServiceRepresentation;
export declare const isSpriteRepresentation: (rep: any) => rep is SpriteRepresentation;
export declare const isImageRepresentation: (rep: any) => rep is ImageRepresentation;
export declare const isMediaRepresentation: (rep: any) => rep is MediaApiRepresentation;
export declare const isPromise: (p: any) => p is Promise<any>;
export declare const isMediaEmoji: (emoji: EmojiDescription) => boolean;
export declare const hasDataURLImage: (rep: any) => boolean;
export declare const isLoadedMediaEmoji: (emoji: EmojiDescription) => boolean;
export declare const isEmojiDescriptionWithVariations: (emoji: any) => emoji is EmojiDescriptionWithVariations;
export declare const isEmojiVariationDescription: (object: any) => object is EmojiVariationDescription;
export declare const toEmojiId: (emoji: EmojiDescription) => EmojiId;
export declare const toOptionalEmojiId: (emoji: OptionalEmojiDescription) => EmojiId | undefined;
export declare const isEmojiIdEqual: (l?: EmojiId | undefined, r?: EmojiId | undefined) => boolean | undefined;
export declare const containsEmojiId: (emojis: EmojiDescription[], emojiId: EmojiId | undefined) => boolean;
export declare const convertImageToMediaRepresentation: (rep: ImageRepresentation) => MediaApiRepresentation;
export declare const convertMediaToImageRepresentation: (rep: MediaApiRepresentation, newImagePath?: string | undefined) => ImageRepresentation;
export declare const convertMediaToImageEmoji: (emoji: EmojiDescription, newImagePath?: string | undefined, useAlt?: boolean | undefined) => EmojiDescription;
export declare const buildEmojiDescriptionWithAltRepresentation: (emoji: EmojiDescriptionWithVariations, altRepresentation?: EmojiRepresentation) => EmojiDescriptionWithVariations;
