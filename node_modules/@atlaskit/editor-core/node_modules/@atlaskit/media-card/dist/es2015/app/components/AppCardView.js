import * as tslib_1 from "tslib";
import * as React from 'react';
import { HeaderView } from './HeaderView';
import { DescriptionView } from './DescriptionView';
import { DetailsView } from './DetailsView';
import { ContextView } from './ContextView';
import { ActionsView } from './ActionsView';
import { Card, Preview, CardContent, Footer } from '../styled/AppCardView';
var maxCardWidth = 744;
var previewWidth = 116;
var AppCardView = /** @class */ (function (_super) {
    tslib_1.__extends(AppCardView, _super);
    function AppCardView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AppCardView.prototype, "isDarkAppearance", {
        get: function () {
            var background = this.props.model.background;
            return Boolean(background);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppCardView.prototype, "contentMaxWidth", {
        get: function () {
            var preview = this.props.model.preview;
            return preview ? maxCardWidth - previewWidth : maxCardWidth;
        },
        enumerable: true,
        configurable: true
    });
    AppCardView.prototype.renderPreview = function () {
        var preview = this.props.model.preview;
        if (!preview) {
            return null;
        }
        return React.createElement(Preview, { image: preview.url });
    };
    AppCardView.prototype.renderHeader = function () {
        var _a = this.props.model, _b = _a.title, text = _b.text, user = _b.user, background = _a.background, description = _a.description, details = _a.details, context = _a.context, actions = _a.actions;
        return (React.createElement(HeaderView, { title: text, user: user, isInversed: Boolean(background), contentMaxWidth: this.contentMaxWidth, hasSiblings: Boolean(description || details || context || actions) }));
    };
    AppCardView.prototype.renderDescription = function () {
        var description = this.props.model.description;
        if (!description) {
            return null;
        }
        return (React.createElement(DescriptionView, { title: description.title, text: description.text, contentMaxWidth: this.contentMaxWidth }));
    };
    AppCardView.prototype.renderDetails = function () {
        var details = this.props.model.details;
        if (!details) {
            return null;
        }
        return (React.createElement(DetailsView, { meta: details, isInversed: this.isDarkAppearance, contentMaxWidth: this.contentMaxWidth }));
    };
    AppCardView.prototype.renderContext = function () {
        var context = this.props.model.context;
        if (!context) {
            return null;
        }
        var icon = context.icon, text = context.text;
        return (React.createElement(ContextView, { icon: icon, text: text, isInversed: this.isDarkAppearance }));
    };
    AppCardView.prototype.renderActions = function () {
        var _a = this.props, actions = _a.model.actions, onActionClick = _a.onActionClick;
        if (!actions) {
            return null;
        }
        return (React.createElement(ActionsView, { actions: actions, isInversed: this.isDarkAppearance, onActionClick: onActionClick }));
    };
    AppCardView.prototype.renderBody = function () {
        var _a = this.props.model, description = _a.description, details = _a.details, context = _a.context, actions = _a.actions;
        if (!description && !details && !context && !actions) {
            return null;
        }
        return (React.createElement("div", null,
            this.renderDescription(),
            this.renderDetails(),
            context || actions ? (React.createElement(Footer, null,
                this.renderContext(),
                this.renderActions())) : null));
    };
    AppCardView.prototype.render = function () {
        var _a = this.props, _b = _a.model, background = _b.background, preview = _b.preview, onClick = _a.onClick;
        return (React.createElement(Card, { background: background && background.url, onClick: onClick, isClickable: Boolean(onClick) },
            this.renderPreview(),
            React.createElement(CardContent, { hasPreview: Boolean(preview) },
                this.renderHeader(),
                this.renderBody())));
    };
    AppCardView.defaultProps = {};
    return AppCardView;
}(React.Component));
export { AppCardView };
//# sourceMappingURL=AppCardView.js.map