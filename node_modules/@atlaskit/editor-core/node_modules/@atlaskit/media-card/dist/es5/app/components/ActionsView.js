"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* tslint:disable:variable-name */
var React = require("react");
var dropdown_menu_1 = require("@atlaskit/dropdown-menu");
var more_1 = require("@atlaskit/icon/glyph/more");
var ActionsView_1 = require("../styled/ActionsView");
var spinner_1 = require("@atlaskit/spinner");
var button_1 = require("@atlaskit/button");
exports.UntypedButton = button_1.default;
exports.TRY_AGAIN_LINK_TEXT = 'Try again';
var ActionsView = /** @class */ (function (_super) {
    tslib_1.__extends(ActionsView, _super);
    function ActionsView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            actionInProgress: null,
            successMessage: null,
            failureMessage: null,
            tryAgain: false,
            tryAgainLinkText: null,
        };
        _this.handleActionButton = function (action) { return function (event) {
            var onActionClick = _this.props.onActionClick;
            // allow the user to click the button but prevent the event bubling up and being handled by the
            // card onClick event
            event.stopPropagation();
            if (onActionClick) {
                onActionClick(action.appCardAction, _this.createCallbackHandlers(action.key));
            }
        }; };
        _this.handleOtherAction = function (_a) {
            var item = _a.item;
            var onActionClick = _this.props.onActionClick;
            var action = item.action;
            if (onActionClick && action) {
                onActionClick(action.appCardAction, _this.createCallbackHandlers(action.key));
            }
        };
        _this.handleTryAgain = function (event) {
            event.stopPropagation();
            _this.setState({
                failureMessage: null,
                tryAgain: false,
                tryAgainLinkText: null,
            });
        };
        return _this;
    }
    ActionsView.prototype.componentDidMount = function () {
        this.mounted = true;
    };
    ActionsView.prototype.componentWillUnmount = function () {
        this.mounted = false;
    };
    Object.defineProperty(ActionsView.prototype, "actions", {
        get: function () {
            return this.props.actions.map(function (action, index) { return ({
                appCardAction: action,
                key: index,
            }); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionsView.prototype, "primaryAction", {
        get: function () {
            return this.actions[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionsView.prototype, "secondaryAction", {
        get: function () {
            return this.actions[1];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionsView.prototype, "otherActions", {
        get: function () {
            return this.actions.slice(2);
        },
        enumerable: true,
        configurable: true
    });
    ActionsView.prototype.updateProgressState = function (state) {
        if (!this.mounted) {
            return;
        }
        this.setState(state);
    };
    ActionsView.prototype.createCallbackHandlers = function (actionType) {
        var _this = this;
        return {
            progress: function () {
                return _this.updateProgressState({
                    actionInProgress: actionType,
                });
            },
            success: function (message) {
                return _this.updateProgressState({
                    actionInProgress: null,
                    successMessage: message || null,
                });
            },
            failure: function (message, tryAgain, tryAgainLinkText) {
                if (tryAgain === void 0) { tryAgain = false; }
                if (tryAgainLinkText === void 0) { tryAgainLinkText = exports.TRY_AGAIN_LINK_TEXT; }
                return _this.updateProgressState({
                    actionInProgress: null,
                    failureMessage: message || null,
                    tryAgain: tryAgain,
                    tryAgainLinkText: tryAgainLinkText,
                });
            },
        };
    };
    ActionsView.prototype.handleMeatballsClick = function (event) {
        event.stopPropagation();
    };
    Object.defineProperty(ActionsView.prototype, "theme", {
        get: function () {
            var isInversed = this.props.isInversed;
            return (isInversed && 'dark') || 'default';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionsView.prototype, "isInProgress", {
        get: function () {
            return this.state.actionInProgress !== null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionsView.prototype, "isOtherActionInProgress", {
        get: function () {
            var _this = this;
            if (!this.isInProgress) {
                return false;
            }
            return this.otherActions.some(function (action) { return action.key === _this.state.actionInProgress; });
        },
        enumerable: true,
        configurable: true
    });
    ActionsView.prototype.getActionButton = function (action) {
        if (action) {
            var isInversed = this.props.isInversed;
            var actionInProgress = this.state.actionInProgress;
            var isCurrentActionInProgress = actionInProgress === action.key;
            var spinner = isCurrentActionInProgress ? (React.createElement(spinner_1.default, { size: "small", invertColor: isInversed })) : null;
            var content = isCurrentActionInProgress
                ? null
                : action.appCardAction.title;
            return (React.createElement(ActionsView_1.ActionButtonWrapper, null,
                React.createElement(ActionsView_1.ButtonWrapper, { isDark: isInversed },
                    React.createElement(exports.UntypedButton, { isDisabled: this.isInProgress, onClick: this.handleActionButton(action), theme: this.theme, iconAfter: spinner }, content))));
        }
        return null;
    };
    ActionsView.prototype.getMeatballsButton = function () {
        var isInversed = this.props.isInversed;
        var icon = this.isOtherActionInProgress ? (React.createElement(spinner_1.default, { size: "small", invertColor: isInversed })) : (React.createElement(more_1.default, { label: "actions", size: "medium" }));
        return (React.createElement(ActionsView_1.ButtonWrapper, { isDark: isInversed },
            React.createElement(exports.UntypedButton, { isDisabled: this.isInProgress, appearance: "subtle", iconBefore: icon, theme: this.theme })));
    };
    ActionsView.prototype.getDropdown = function () {
        var _this = this;
        var otherActions = this.otherActions;
        if (!otherActions.length) {
            return null;
        }
        return (React.createElement(ActionsView_1.ActionsMenu, { onClick: this.handleMeatballsClick },
            React.createElement(dropdown_menu_1.default, { items: [
                    {
                        items: otherActions.map(function (action) { return ({
                            isDisabled: _this.isInProgress,
                            content: action.appCardAction.title,
                            action: action,
                        }); }),
                    },
                ], onItemActivated: this.handleOtherAction }, this.getMeatballsButton())));
    };
    ActionsView.prototype.render = function () {
        var _a = this.state, failureMessage = _a.failureMessage, successMessage = _a.successMessage, tryAgain = _a.tryAgain, tryAgainLinkText = _a.tryAgainLinkText;
        if (failureMessage !== null) {
            return (React.createElement(ActionsView_1.FailureMessageBlock, null,
                React.createElement(ActionsView_1.FailureMessage, { tryAgain: tryAgain }, failureMessage),
                tryAgain ? (React.createElement(exports.UntypedButton, { appearance: "link", onClick: this.handleTryAgain, theme: this.theme }, tryAgainLinkText)) : null));
        }
        if (successMessage !== null) {
            return React.createElement(ActionsView_1.SuccessMessage, null, successMessage);
        }
        return (React.createElement(ActionsView_1.Actions, null,
            this.getActionButton(this.primaryAction),
            this.getActionButton(this.secondaryAction),
            this.getDropdown()));
    };
    return ActionsView;
}(React.Component));
exports.ActionsView = ActionsView;
//# sourceMappingURL=ActionsView.js.map