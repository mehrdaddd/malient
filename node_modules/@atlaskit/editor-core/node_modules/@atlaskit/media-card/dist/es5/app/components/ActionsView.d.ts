/// <reference types="react" />
import * as React from 'react';
import { AppCardAction, AppCardActionCallbackHandlers } from '../model';
export declare const UntypedButton: any;
export declare const TRY_AGAIN_LINK_TEXT = "Try again";
export declare type THEME = 'dark' | 'default';
export interface ActionsViewProps {
    actions: AppCardAction[];
    isInversed: boolean;
    onActionClick?: (action: AppCardAction, handlers: AppCardActionCallbackHandlers) => void;
}
export interface ActionsViewState {
    actionInProgress?: number | null;
    successMessage?: string | null;
    failureMessage?: string | null;
    tryAgainLinkText?: string | null;
    tryAgain?: boolean;
}
export interface ActionsViewAction {
    appCardAction: AppCardAction;
    key: number;
}
export declare class ActionsView extends React.Component<ActionsViewProps, ActionsViewState> {
    mounted: boolean;
    state: ActionsViewState;
    componentDidMount(): void;
    componentWillUnmount(): void;
    readonly actions: ActionsViewAction[];
    readonly primaryAction: ActionsViewAction | undefined;
    readonly secondaryAction: ActionsViewAction | undefined;
    readonly otherActions: ActionsViewAction[];
    handleActionButton: (action: ActionsViewAction) => (event: Event) => void;
    updateProgressState(state: ActionsViewState): void;
    createCallbackHandlers(actionType: number): AppCardActionCallbackHandlers;
    handleOtherAction: ({item}: {
        item: any;
    }) => void;
    handleMeatballsClick(event: any): void;
    handleTryAgain: (event: any) => void;
    readonly theme: THEME;
    readonly isInProgress: boolean;
    readonly isOtherActionInProgress: boolean;
    getActionButton(action: ActionsViewAction | undefined): JSX.Element | null;
    getMeatballsButton(): JSX.Element;
    getDropdown(): JSX.Element | null;
    render(): JSX.Element;
}
