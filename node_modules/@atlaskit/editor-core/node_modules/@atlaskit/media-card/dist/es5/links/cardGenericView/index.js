"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var media_ui_1 = require("@atlaskit/media-ui");
var cardDimensions_1 = require("../../utils/cardDimensions");
var CardDetails_1 = require("./CardDetails");
var card_1 = require("../card");
var LinkCardGenericView = /** @class */ (function (_super) {
    tslib_1.__extends(LinkCardGenericView, _super);
    function LinkCardGenericView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(LinkCardGenericView.prototype, "isHorizontal", {
        get: function () {
            var appearance = this.props.appearance;
            return appearance === 'horizontal';
        },
        enumerable: true,
        configurable: true
    });
    LinkCardGenericView.prototype.renderIcon = function () {
        var _a = this.props, iconUrl = _a.iconUrl, isLoading = _a.isLoading;
        if (isLoading) {
            return undefined;
        }
        return React.createElement(media_ui_1.LinkIcon, { src: iconUrl });
    };
    LinkCardGenericView.prototype.renderPreview = function () {
        var isHorizontal = this.isHorizontal;
        var _a = this.props, isLoading = _a.isLoading, thumbnailUrl = _a.thumbnailUrl;
        if (isHorizontal) {
            return null;
        }
        return (React.createElement(media_ui_1.CardPreview, { key: "preview", isPlaceholder: isLoading, url: thumbnailUrl || '' }));
    };
    LinkCardGenericView.prototype.renderDetails = function () {
        var isHorizontal = this.isHorizontal;
        var _a = this.props, isLoading = _a.isLoading, title = _a.title, description = _a.description, thumbnailUrl = _a.thumbnailUrl;
        return (React.createElement(CardDetails_1.default, { isPlaceholder: isLoading, isThumbnailVisible: isHorizontal, title: title, description: description, thumbnail: isHorizontal ? thumbnailUrl : undefined }));
    };
    LinkCardGenericView.prototype.render = function () {
        var _a = this.props, isLoading = _a.isLoading, site = _a.site, linkUrl = _a.linkUrl, appearance = _a.appearance, errorMessage = _a.errorMessage;
        if (errorMessage) {
            return (React.createElement(media_ui_1.ErrorCard, { hasPreview: appearance !== 'horizontal', minWidth: cardDimensions_1.getCardMinWidth(appearance), maxWidth: cardDimensions_1.getCardMaxWidth(appearance) }));
        }
        return (React.createElement(media_ui_1.CardFrame, { isPlaceholder: isLoading, href: linkUrl, icon: this.renderIcon(), text: site || linkUrl, minWidth: cardDimensions_1.getCardMinWidth(appearance), maxWidth: cardDimensions_1.getCardMaxWidth(appearance) },
            this.renderPreview(),
            this.renderDetails()));
    };
    LinkCardGenericView.defaultProps = {
        title: '',
        description: '',
        actions: [],
        appearance: card_1.defaultLinkCardAppearance,
    };
    return LinkCardGenericView;
}(react_1.Component));
exports.LinkCardGenericView = LinkCardGenericView;
exports.default = LinkCardGenericView;
//# sourceMappingURL=index.js.map