"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var deepEqual = require("deep-equal");
var mediaCard_1 = require("../mediaCard");
var cardView_1 = require("../cardView");
var lazyContent_1 = require("../../utils/lazyContent");
var analyticsUtils_1 = require("../../utils/analyticsUtils");
var analytics_next_1 = require("@atlaskit/analytics-next");
var Card = /** @class */ (function (_super) {
    tslib_1.__extends(Card, _super);
    function Card(props) {
        var _this = _super.call(this, props) || this;
        var context = props.context, identifier = props.identifier;
        _this.updateProvider(context, identifier);
        _this.updateDataUriService(context, identifier);
        return _this;
    }
    Card.prototype.componentWillReceiveProps = function (nextProps) {
        var _a = this.props, currentContext = _a.context, currentIdentifier = _a.identifier;
        var nextContext = nextProps.context, nextIdenfifier = nextProps.identifier;
        if (currentContext !== nextContext ||
            !deepEqual(currentIdentifier, nextIdenfifier)) {
            this.updateProvider(nextContext, nextIdenfifier);
            this.updateDataUriService(nextContext, nextIdenfifier);
        }
    };
    Card.prototype.isUrlPreviewIdentifier = function (identifier) {
        var preview = identifier;
        return preview && preview.url !== undefined;
    };
    Card.prototype.updateProvider = function (context, identifier) {
        if (this.isUrlPreviewIdentifier(identifier)) {
            this.provider = context.getUrlPreviewProvider(identifier.url);
        }
        else {
            var id = identifier.id, mediaItemType = identifier.mediaItemType, collectionName = identifier.collectionName;
            this.provider = context.getMediaItemProvider(id, mediaItemType, collectionName);
        }
    };
    Card.prototype.updateDataUriService = function (context, identifier) {
        if (!this.isUrlPreviewIdentifier(identifier)) {
            this.dataURIService = context.getDataUriService(identifier.collectionName);
        }
        else {
            this.dataURIService = undefined;
        }
    };
    Object.defineProperty(Card.prototype, "placeholder", {
        get: function () {
            var _a = this.props, appearance = _a.appearance, dimensions = _a.dimensions;
            return (React.createElement(cardView_1.CardView, { status: "loading", appearance: appearance, dimensions: dimensions, mediaItemType: this.mediaItemType }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Card.prototype, "preview", {
        get: function () {
            var _a = this.props, context = _a.context, identifier = _a.identifier;
            return context.getLocalPreview(identifier['id']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Card.prototype, "analyticsContext", {
        get: function () {
            var identifier = this.props.identifier;
            var id = this.isUrlPreviewIdentifier(identifier)
                ? identifier.url
                : identifier.id;
            return analyticsUtils_1.getBaseAnalyticsContext('Card', id);
        },
        enumerable: true,
        configurable: true
    });
    Card.prototype.render = function () {
        var _a = this.props, isLazy = _a.isLazy, appearance = _a.appearance, resizeMode = _a.resizeMode, dimensions = _a.dimensions, actions = _a.actions, selectable = _a.selectable, selected = _a.selected, onClick = _a.onClick, onMouseEnter = _a.onMouseEnter, onSelectChange = _a.onSelectChange, onLoadingChange = _a.onLoadingChange, disableOverlay = _a.disableOverlay;
        var _b = this, mediaItemType = _b.mediaItemType, provider = _b.provider, dataURIService = _b.dataURIService, placeholder = _b.placeholder, preview = _b.preview, analyticsContext = _b.analyticsContext;
        var card = (React.createElement(analytics_next_1.AnalyticsContext, { data: analyticsContext },
            React.createElement(mediaCard_1.MediaCard, { provider: provider, mediaItemType: mediaItemType, dataURIService: dataURIService, appearance: appearance, resizeMode: resizeMode, dimensions: dimensions, actions: actions, selectable: selectable, selected: selected, onClick: onClick, onMouseEnter: onMouseEnter, onSelectChange: onSelectChange, onLoadingChange: onLoadingChange, preview: preview, disableOverlay: disableOverlay })));
        return isLazy ? (React.createElement(lazyContent_1.LazyContent, { placeholder: placeholder }, card)) : (card);
    };
    Object.defineProperty(Card.prototype, "mediaItemType", {
        get: function () {
            var mediaItemType = this.props.identifier.mediaItemType;
            return mediaItemType;
        },
        enumerable: true,
        configurable: true
    });
    Card.defaultProps = {
        appearance: 'auto',
        resizeMode: 'crop',
        isLazy: true,
        disableOverlay: false,
    };
    return Card;
}(react_1.Component));
exports.Card = Card;
//# sourceMappingURL=index.js.map