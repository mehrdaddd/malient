"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var styled_components_1 = require("styled-components");
var getCSSUnitValue_1 = require("../utils/getCSSUnitValue");
var cardDimensions_1 = require("../utils/cardDimensions");
var breakpoint_1 = require("../utils/breakpoint");
var getWrapperHeight = function (dimensions) {
    return dimensions && dimensions.height
        ? "height: " + getCSSUnitValue_1.getCSSUnitValue(dimensions.height) + ";"
        : '';
};
var getWrapperWidth = function (dimensions) {
    return dimensions && dimensions.width
        ? "width: " + getCSSUnitValue_1.getCSSUnitValue(dimensions.width) + ";"
        : '';
};
exports.Wrapper = styled_components_1.default.div(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  ", ";\n"], ["\n  ",
    ";\n"])), function (_a) {
    var appearance = _a.appearance, dimensions = _a.dimensions, mediaItemType = _a.mediaItemType, _b = _a.breakpointSize, breakpointSize = _b === void 0 ? 'medium' : _b;
    if (appearance === 'small') {
        return "\n        display: inline-block;\n        min-width: " + cardDimensions_1.minSmallCardDimensions.width + "px;\n        " + getWrapperWidth(dimensions) + "\n        height: " + cardDimensions_1.defaultSmallCardDimensions.height + "px;\n      ";
    }
    // Links are responsive and omit passed dimensions, instead they use max and min dimensions
    // they don't apply breakpoints either
    if (mediaItemType === 'link') {
        return "\n        " + cardDimensions_1.getCSSBoundaries(appearance) + "\n        position: relative;\n      ";
    }
    return "\n      " + breakpoint_1.breakpointStyles({ breakpointSize: breakpointSize }) + "\n      " + getWrapperHeight(dimensions) + "\n      " + getWrapperWidth(dimensions) + "\n    ";
});
var templateObject_1;
//# sourceMappingURL=styled.js.map