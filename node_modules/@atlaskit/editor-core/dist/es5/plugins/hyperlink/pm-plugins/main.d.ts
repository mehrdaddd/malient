import { Node, Schema } from 'prosemirror-model';
import { EditorState, Plugin, Transaction, PluginKey } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { EditorProps } from '../../../types/editor-props';
export declare const hyperlinkPluginKey: PluginKey;
export declare type HyperlinkStateSubscriber = (state: HyperlinkState) => any;
export declare type StateChangeHandler = (state: HyperlinkState) => any;
export interface HyperlinkOptions {
    href: string;
    text?: string;
}
export declare type Coordinates = {
    left: number;
    right: number;
    top: number;
    bottom: number;
};
export declare class HyperlinkState {
    href?: string;
    text?: string;
    active: boolean;
    linkable: boolean;
    editorFocused: boolean;
    element?: HTMLElement;
    activeElement?: HTMLElement;
    showToolbarPanel: boolean;
    activeLinkNode?: Node;
    private changeHandlers;
    private state;
    private activeLinkMark?;
    private activeLinkStartPos?;
    constructor(state: EditorState);
    subscribe(cb: HyperlinkStateSubscriber): void;
    unsubscribe(cb: HyperlinkStateSubscriber): void;
    addLink(options: HyperlinkOptions, view: EditorView): void;
    removeLink(view: EditorView): void;
    updateLink(options: HyperlinkOptions, view: EditorView): void;
    updateLinkText(text: string, view: EditorView): void;
    update(editorView: EditorView & {
        docView?: any;
    }, dirty?: boolean): void;
    escapeFromMark(editorView: EditorView): void;
    showLinkPanel: (editorView: EditorView & {
        docView?: any;
    }) => boolean;
    hideLinkPanel(state: EditorState, dispatch: (tr: Transaction) => void): void;
    setInactive(state: EditorState, dispatch: (tr: Transaction) => void): void;
    getCoordinates(editorView: EditorView & {
        docView?: any;
    }, offsetParent: Element): Coordinates;
    private triggerOnChange();
    private isShouldEscapeFromMark(nodeInfo);
    private getActiveLinkNodeInfo();
    private getActiveLinkMark(activeLinkNode);
    private getDomElement(docView);
    /**
     * Returns active dom element for current selection.
     * Used by Hyperlink edit popup to position relative to cursor.
     */
    private getActiveDomElement(selection, docView);
    private isActiveNodeLinkable();
}
export declare const createPlugin: (schema: Schema, editorProps?: EditorProps) => Plugin;
