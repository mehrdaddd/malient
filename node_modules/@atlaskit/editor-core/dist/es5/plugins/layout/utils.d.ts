import { Fragment, Node, Slice, Schema } from 'prosemirror-model';
import { EditorState } from 'prosemirror-state';
export declare type FlatMapCallback = (node: Node, index: number, fragment: Fragment) => Node | Node[];
export declare function flatmap(fragment: Fragment, callback: FlatMapCallback): Fragment;
export declare function unwrapContentFromLayout(maybeLayoutSection: Node): Node | Node[];
export declare function removeLayoutFromFirstChild(node: Node, i: number): Node | Node[];
export declare function removeLayoutFromLastChild(node: Node, i: number, fragment: Fragment): Node | Node[];
export declare function removeLayoutFromAllChildren(node: Node): Node | Node[];
/**
 * When we have a slice that cuts across a layoutSection/layoutColumn
 * we can end up with unexpected behaviour on paste/drop where a user
 * is able to add columns to a layoutSection. By 'lifting' any content
 * inside an 'open' layoutSection/layoutColumn to the top level, we
 * can ensure prevent this.
 *
 * We only care about slices with non-zero openStart / openEnd's here
 * as we're totally fine for people to copy/paste a full layoutSection
 */
export declare function transformSliceToRemoveOpenLayoutNodes(slice: Slice, schema: Schema): Slice;
export declare function removeLayoutsIfSelectionIsInLayout(slice: Slice, state: EditorState): Slice;
