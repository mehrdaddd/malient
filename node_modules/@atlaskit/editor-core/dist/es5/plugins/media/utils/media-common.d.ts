import { Node as PMNode, ResolvedPos } from 'prosemirror-model';
import { EditorState } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { ProsemirrorGetPosHandler } from '../../../nodeviews';
import { MediaState } from '../types';
export declare const posOfMediaGroupNearby: (state: EditorState) => number | undefined;
export declare const isSelectionNonMediaBlockNode: (state: EditorState) => boolean;
export declare const posOfPreceedingMediaGroup: (state: EditorState) => number | undefined;
/**
 * Determine whether the cursor is inside empty paragraph
 * or the selection is the entire paragraph
 */
export declare const isInsidePotentialEmptyParagraph: (state: EditorState) => boolean;
export declare const posOfMediaGroupBelow: (state: EditorState, $pos: ResolvedPos, prepend?: boolean) => number | undefined;
export declare const posOfParentMediaGroup: (state: EditorState, $pos?: ResolvedPos | undefined, prepend?: boolean) => number | undefined;
/**
 * Append timestamp to a filename, this function assumes `name` will have
 * filename and extension. eg.- 123.xyz (valid), 123 (invalid)
 * @param name filename with extension
 * @param time unix timestamp
 */
export declare const appendTimestamp: (name: string, time: number) => string;
/**
 * The function will return the position after current selection where mediaGroup can be inserted.
 */
export declare function endPositionForMedia(state: EditorState, resolvedPos: ResolvedPos): number;
export declare const removeMediaNode: (view: EditorView, node: PMNode, getPos: ProsemirrorGetPosHandler) => void;
export declare const splitMediaGroup: (view: EditorView) => boolean;
export declare const copyOptionalAttrsFromMediaState: (mediaState: MediaState, node: PMNode) => void;
