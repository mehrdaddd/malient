"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var ReactDOM = require("react-dom");
var nodeviews_1 = require("../../../nodeviews");
var Extension_1 = require("../ui/Extension");
var ExtensionNode = /** @class */ (function (_super) {
    tslib_1.__extends(ExtensionNode, _super);
    function ExtensionNode(node, view, providerFactory, extensionHandlers) {
        var _this = _super.call(this, node, view) || this;
        var elementType = node.type.name === 'inlineExtension' ? 'span' : 'div';
        _this.node = node;
        _this.view = view;
        _this.providerFactory = providerFactory;
        _this.domRef = document.createElement(elementType);
        // @see ED-3790
        _this.domRef.className = node.type.name + "View-container";
        _this.extensionHandlers = extensionHandlers;
        _this.renderReactComponent(node);
        return _this;
    }
    Object.defineProperty(ExtensionNode.prototype, "dom", {
        get: function () {
            return this.domRef;
        },
        enumerable: true,
        configurable: true
    });
    ExtensionNode.prototype.update = function (node) {
        // @see https://github.com/ProseMirror/prosemirror/issues/648
        var isValidUpdate = this.node.type.name === node.type.name;
        if (isValidUpdate) {
            this.renderReactComponent(node);
        }
        return isValidUpdate;
    };
    ExtensionNode.prototype.destroy = function () {
        ReactDOM.unmountComponentAtNode(this.domRef);
        this.domRef = undefined;
        _super.prototype.destroy.call(this);
    };
    ExtensionNode.prototype.ignoreMutation = function (mutation) {
        // Extensions can perform async operations that will change the DOM.
        // To avoid having their tree rebuilt, we need to ignore the mutation.
        return true;
    };
    ExtensionNode.prototype.renderReactComponent = function (node) {
        ReactDOM.render(React.createElement(Extension_1.default, { editorView: this.view, node: node, providerFactory: this.providerFactory, handleContentDOMRef: this.handleRef, extensionHandlers: this.extensionHandlers }), this.domRef);
    };
    return ExtensionNode;
}(nodeviews_1.ContentNodeView));
function ExtensionNodeView(providerFactory, extensionHandlers) {
    return function (node, view, getPos) {
        return new ExtensionNode(node, view, providerFactory, extensionHandlers);
    };
}
exports.default = ExtensionNodeView;
//# sourceMappingURL=extension.js.map