import { Plugin, PluginKey, EditorState, Transaction } from 'prosemirror-state';
export declare type StateChangeHandler = (state: TextColorState) => any;
export declare const DEFAULT_COLOR: {
    color: string;
    label: string;
};
export declare class TextColorState {
    color?: string;
    disabled: boolean;
    palette: Map<string, string>;
    borderColorPalette: Object;
    defaultColor: string;
    private changeHandlers;
    private state;
    constructor(state: EditorState, palette: Map<string, string>);
    subscribe(cb: StateChangeHandler): void;
    unsubscribe(cb: StateChangeHandler): void;
    update(newEditorState: EditorState): void;
    toggleTextColor(state: EditorState, dispatch?: (tr: Transaction) => void, color?: string): boolean;
    removeTextColor(state: EditorState, dispatch: (tr: Transaction) => void, color?: string): boolean;
    private triggerOnChange();
    private getActiveColor();
    private findTextColorMark(marks);
    private findMarkType(markType, marks);
    private markApplies(doc, ranges, type);
    private isExcluded(marks?);
}
export declare const stateKey: PluginKey;
export declare const plugin: Plugin;
