/// <reference types="react" />
import * as React from 'react';
import { EditorView } from 'prosemirror-view';
import { EmojiId, EmojiProvider } from '@atlaskit/emoji';
import EditorActions from '../../../../actions';
import { InsertMenuCustomItem } from '../../../../types';
import { BlockType } from '../../../block-type/types';
import { MacroProvider } from '../../../macro/types';
export interface Props {
    buttons: number;
    isReducedSpacing: boolean;
    isDisabled?: boolean;
    editorView: EditorView;
    editorActions?: EditorActions;
    tableHidden?: boolean;
    tableSupported?: boolean;
    mentionsEnabled?: boolean;
    mentionsSupported?: boolean;
    insertMentionQuery?: () => void;
    mediaUploadsEnabled?: boolean;
    mediaSupported?: boolean;
    imageUploadSupported?: boolean;
    imageUploadEnabled?: boolean;
    handleImageUpload?: (editorView: EditorView) => {};
    dateEnabled?: boolean;
    horizontalRuleEnabled?: boolean;
    placeholderTextEnabled?: boolean;
    layoutSectionEnabled?: boolean;
    emojiProvider?: Promise<EmojiProvider>;
    availableWrapperBlockTypes?: BlockType[];
    linkSupported?: boolean;
    linkDisabled?: boolean;
    showLinkPanel?: (editorView: EditorView) => void;
    emojiDisabled?: boolean;
    insertEmoji?: (emojiId: EmojiId) => void;
    popupsMountPoint?: HTMLElement;
    popupsBoundariesElement?: HTMLElement;
    popupsScrollableElement?: HTMLElement;
    macroProvider?: MacroProvider | null;
    insertMenuItems?: InsertMenuCustomItem[];
    onShowMediaPicker?: () => void;
    onInsertBlockType?: (name: string, view: EditorView) => void;
    onInsertMacroFromMacroBrowser?: (macroProvider: MacroProvider) => (editorView: EditorView) => void;
}
export interface State {
    isOpen: boolean;
    emojiPickerOpen: boolean;
}
export default class ToolbarInsertBlock extends React.PureComponent<Props, State> {
    private pickerRef;
    private button?;
    state: State;
    componentWillReceiveProps(nextProps: Props): void;
    private onOpenChange;
    private handleTriggerClick;
    private toggleEmojiPicker;
    private renderPopup();
    private handleButtonRef;
    private handleDropDownButtonRef;
    private onPickerRef;
    private handleClickOutside;
    render(): JSX.Element | null;
    private createItems;
    private toggleLinkPanel;
    private insertMention;
    private createTable;
    private createDate;
    private createPlaceholderText;
    private insertLayoutColumns;
    private openMediaPicker;
    private insertHorizontalRule;
    private handleSelectedEmoji;
    private onItemActivated;
}
