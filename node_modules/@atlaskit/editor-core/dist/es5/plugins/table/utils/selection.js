"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prosemirror_tables_1 = require("prosemirror-tables");
var prosemirror_tables_2 = require("prosemirror-tables");
var prosemirror_utils_1 = require("prosemirror-utils");
exports.getCellSelection = function (state) {
    var selection = state.selection;
    if (selection instanceof prosemirror_tables_1.CellSelection) {
        return selection;
    }
};
exports.isHeaderRowSelected = function (state) {
    var cellSelection = exports.getCellSelection(state);
    if (cellSelection && cellSelection.isRowSelection()) {
        var $from = cellSelection.$from;
        var tableHeader = state.schema.nodes.tableHeader;
        for (var i = $from.depth; i > 0; i--) {
            if ($from.node(i).type === tableHeader) {
                return true;
            }
        }
    }
    return false;
};
exports.getSelectedColumn = function (state) {
    var cellSelection = exports.getCellSelection(state);
    var _a = cellSelection, $anchorCell = _a.$anchorCell, $headCell = _a.$headCell;
    var tableNode = $anchorCell.node(-1);
    var map = prosemirror_tables_2.TableMap.get(tableNode);
    var start = $anchorCell.start(-1);
    var anchor = map.colCount($anchorCell.pos - start);
    var head = map.colCount($headCell.pos - start);
    return { anchor: anchor, head: head };
};
exports.getSelectedRow = function (state) {
    var cellSelection = exports.getCellSelection(state);
    var _a = cellSelection, $anchorCell = _a.$anchorCell, $headCell = _a.$headCell;
    var anchor = $anchorCell.index(-1);
    var head = $headCell.index(-1);
    return { anchor: anchor, head: head };
};
exports.checkIfNumberColumnSelected = function (state) {
    var cellSelection = exports.getCellSelection(state);
    if (cellSelection) {
        var tableNode = cellSelection.$anchorCell.node(-1);
        if (tableNode.attrs.isNumberColumnEnabled &&
            prosemirror_utils_1.isColumnSelected(0)(state.selection)) {
            return true;
        }
    }
    return false;
};
exports.checkIfNumberColumnCellsSelected = function (state) {
    var cellSelection = exports.getCellSelection(state);
    if (cellSelection) {
        var tableNode = cellSelection.$anchorCell.node(-1);
        if (tableNode.attrs.isNumberColumnEnabled) {
            var map_1 = prosemirror_tables_2.TableMap.get(tableNode);
            var start_1 = cellSelection.$anchorCell.start(-1);
            var selected_1 = false;
            cellSelection.forEachCell(function (cell, pos) {
                var rect = map_1.findCell(pos - start_1);
                if (rect.left === 0) {
                    selected_1 = true;
                }
            });
            return selected_1;
        }
    }
    return false;
};
//# sourceMappingURL=selection.js.map