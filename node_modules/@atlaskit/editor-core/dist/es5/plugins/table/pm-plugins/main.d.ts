import { Node as PmNode } from 'prosemirror-model';
import { EditorState, Plugin, PluginKey } from 'prosemirror-state';
import { CellSelection } from 'prosemirror-tables';
import { EditorView, DecorationSet } from 'prosemirror-view';
import { Dispatch } from '../../../event-dispatcher';
import { TableLayout } from '@atlaskit/editor-common';
import { EventDispatcher } from '../../../event-dispatcher';
export declare type PermittedLayoutsDescriptor = (TableLayout)[] | 'all';
export interface PluginConfig {
    isHeaderRowRequired?: boolean;
    allowColumnResizing?: boolean;
    allowMergeCells?: boolean;
    allowNumberColumn?: boolean;
    allowBackgroundColor?: boolean;
    allowHeaderRow?: boolean;
    allowHeaderColumn?: boolean;
    stickToolbarToBottom?: boolean;
    permittedLayouts?: PermittedLayoutsDescriptor;
}
export declare class TableState {
    cellElement?: HTMLElement;
    tableElement?: HTMLElement;
    editorFocused: boolean;
    tableNode?: PmNode;
    cellSelection?: CellSelection;
    tableHidden: boolean;
    tableDisabled: boolean;
    tableActive: boolean;
    tableLayout?: TableLayout;
    view: EditorView;
    eventDispatcher: EventDispatcher | undefined;
    set: DecorationSet;
    allowColumnResizing: boolean;
    allowMergeCells: boolean;
    allowNumberColumn: boolean;
    allowBackgroundColor: boolean;
    allowHeaderRow: boolean;
    allowHeaderColumn: boolean;
    stickToolbarToBottom: boolean;
    permittedLayouts: PermittedLayoutsDescriptor;
    private isHeaderRowRequired;
    constructor(state: EditorState, eventDispatcher: EventDispatcher, pluginConfig: PluginConfig);
    removeTable: () => void;
    remove: () => void;
    convertFirstRowToHeader: () => void;
    updateEditorFocused(editorFocused: boolean): void;
    update(): boolean;
    setView(view: EditorView): void;
    isRequiredToAddHeader: () => boolean;
    addHeaderToTableNodes: (slice: PmNode, selectionStart: number) => void;
    setTableLayout: (layout: TableLayout) => boolean;
    isLayoutSupported: () => boolean;
    private updateSelection();
    private focusEditor();
    private moveCursorInsideTableTo(pos);
    private moveCursorTo(pos);
}
export declare const stateKey: PluginKey;
export declare const createPlugin: (dispatch: Dispatch<any>, eventDispatcher: EventDispatcher, pluginConfig: PluginConfig) => Plugin;
