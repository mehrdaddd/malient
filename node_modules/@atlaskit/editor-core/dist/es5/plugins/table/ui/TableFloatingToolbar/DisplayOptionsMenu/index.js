"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
var table_display_options_1 = require("@atlaskit/icon/glyph/editor/table-display-options");
var chevron_down_1 = require("@atlaskit/icon/glyph/chevron-down");
var done_1 = require("@atlaskit/icon/glyph/editor/done");
var util_shared_styles_1 = require("@atlaskit/util-shared-styles");
var DropdownMenu_1 = require("../../../../../ui/DropdownMenu");
var analytics_1 = require("../../../../../analytics");
var styles_1 = require("../styles");
var actions_1 = require("../../../actions");
var utils_1 = require("../../../utils");
var DisplayOptionsMenu = /** @class */ (function (_super) {
    tslib_1.__extends(DisplayOptionsMenu, _super);
    function DisplayOptionsMenu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isOpen: false,
        };
        _this.createItems = function () {
            var items = [];
            var icon = React.createElement(done_1.default, { primaryColor: util_shared_styles_1.akColorB400, label: "Selected" });
            var _a = _this.props, allowHeaderRow = _a.allowHeaderRow, allowHeaderColumn = _a.allowHeaderColumn, allowNumberColumn = _a.allowNumberColumn, state = _a.editorView.state;
            if (allowHeaderRow) {
                items.push({
                    elemBefore: utils_1.checkIfHeaderRowEnabled(state) ? icon : React.createElement(styles_1.Spacer, null),
                    content: 'Header row',
                    value: { name: 'header_row' },
                });
            }
            if (allowHeaderColumn) {
                items.push({
                    elemBefore: utils_1.checkIfHeaderColumnEnabled(state) ? icon : React.createElement(styles_1.Spacer, null),
                    content: 'Header column',
                    value: { name: 'header_column' },
                });
            }
            if (allowNumberColumn) {
                items.push({
                    elemBefore: utils_1.checkIfNumberColumnEnabled(state) ? icon : React.createElement(styles_1.Spacer, null),
                    content: 'Number column',
                    value: { name: 'number_column' },
                });
            }
            return [{ items: items }];
        };
        _this.onItemActivated = function (_a) {
            var item = _a.item;
            var _b = _this.props.editorView, state = _b.state, dispatch = _b.dispatch;
            switch (item.value.name) {
                case 'header_row':
                    analytics_1.analyticsService.trackEvent('atlassian.editor.format.table.toggleHeaderRow.button');
                    actions_1.toggleHeaderRow(state, dispatch);
                    _this.toggleOpen();
                    break;
                case 'header_column':
                    analytics_1.analyticsService.trackEvent('atlassian.editor.format.table.toggleHeaderColumn.button');
                    actions_1.toggleHeaderColumn(state, dispatch);
                    _this.toggleOpen();
                    break;
                case 'number_column':
                    analytics_1.analyticsService.trackEvent('atlassian.editor.format.table.toggleNumberColumn.button');
                    actions_1.toggleNumberColumn(state, dispatch);
                    _this.toggleOpen();
                    break;
            }
        };
        _this.toggleOpen = function () {
            _this.handleOpenChange({ isOpen: !_this.state.isOpen });
        };
        _this.handleOpenChange = function (_a) {
            var isOpen = _a.isOpen;
            _this.setState({ isOpen: isOpen });
        };
        return _this;
    }
    DisplayOptionsMenu.prototype.render = function () {
        var isOpen = this.state.isOpen;
        var mountPoint = this.props.mountPoint;
        return (React.createElement(DropdownMenu_1.default, { mountTo: mountPoint, items: this.createItems(), isOpen: isOpen, onOpenChange: this.handleOpenChange, onItemActivated: this.onItemActivated, fitHeight: 188, fitWidth: 180 },
            React.createElement(styles_1.ToolbarButtonWide, { spacing: "compact", selected: isOpen, title: "Toggle display options menu", onClick: this.toggleOpen, iconBefore: React.createElement(styles_1.TriggerWrapper, null,
                    React.createElement(table_display_options_1.default, { label: "Toggle display options menu" }),
                    React.createElement(styles_1.ExpandIconWrapper, null,
                        React.createElement(chevron_down_1.default, { label: "expand-dropdown-menu" }))) })));
    };
    return DisplayOptionsMenu;
}(react_1.Component));
exports.default = DisplayOptionsMenu;
//# sourceMappingURL=index.js.map