"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var styles_1 = require("./styles");
var prosemirror_utils_1 = require("prosemirror-utils");
var utils_1 = require("../../utils");
var TABLE_PADDING = 10;
exports.getLineMarkerWidth = function (tableElement, scroll) {
    var parentElement = tableElement.parentElement, offsetWidth = tableElement.offsetWidth;
    var diff = offsetWidth - parentElement.offsetWidth;
    var scrollDiff = scroll - diff > 0 ? scroll - diff : 0;
    return Math.min(offsetWidth + styles_1.toolbarSize, parentElement.offsetWidth + TABLE_PADDING - scrollDiff);
};
// collect a range of selected rows, to figure out where to draw the delete button
// and hide the insert row buttons between
//
// assumes only a single contiguous range of rows can be selected
var findTableSelection = function (state, elems, isTableObjSelected, ignoreNumberColumn) {
    var startIdx = null;
    var endIdx = null;
    var inSelection = function (idx) {
        if (startIdx === null) {
            return false;
        }
        return idx >= startIdx && idx <= endIdx;
    };
    var frontOfSelection = function (idx) {
        if (startIdx === null) {
            return false;
        }
        return idx >= startIdx && idx < endIdx;
    };
    for (var i = ignoreNumberColumn && utils_1.checkIfNumberColumnEnabled(state) ? 1 : 0, len = elems.length; i < len; i++) {
        if (isTableObjSelected(i)(state.selection)) {
            if (startIdx === null) {
                startIdx = i;
            }
        }
        else if (startIdx !== null && endIdx === null) {
            endIdx = i - 1;
        }
    }
    if (startIdx !== null && endIdx === null) {
        endIdx = elems.length - 1;
    }
    return {
        startIdx: startIdx,
        endIdx: endIdx,
        count: startIdx === null ? 0 : endIdx - startIdx + 1,
        hasMultipleSelection: startIdx !== null && startIdx !== endIdx,
        inSelection: inSelection,
        frontOfSelection: frontOfSelection,
    };
};
exports.findRowSelection = function (state, elems) {
    return findTableSelection(state, elems, prosemirror_utils_1.isRowSelected, false);
};
exports.findColumnSelection = function (state, elems) {
    return findTableSelection(state, elems, prosemirror_utils_1.isColumnSelected, false);
};
//# sourceMappingURL=utils.js.map