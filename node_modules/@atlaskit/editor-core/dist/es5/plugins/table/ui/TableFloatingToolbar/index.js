"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var styled_components_1 = require("styled-components");
var react_1 = require("react");
var React = require("react");
var editor_common_1 = require("@atlaskit/editor-common");
var remove_1 = require("@atlaskit/icon/glyph/editor/remove");
var media_full_width_1 = require("@atlaskit/icon/glyph/editor/media-full-width");
var media_wide_1 = require("@atlaskit/icon/glyph/editor/media-wide");
var media_center_1 = require("@atlaskit/icon/glyph/editor/media-center");
var styles_1 = require("./styles");
var AdvanceMenu_1 = require("./AdvanceMenu");
var BackgroundColorMenu_1 = require("./BackgroundColorMenu");
var DisplayOptionsMenu_1 = require("./DisplayOptionsMenu");
var actions_1 = require("../../actions");
// `Popup` doesn't work with -ve `offset` if it goes outside of the container hence the -ve margin
exports.Toolbar = styled_components_1.default.div(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  margin-top: -8px;\n  background-color: white;\n  border-radius: 3px;\n  box-shadow: rgba(9, 30, 66, 0.31) 0 0 1px,\n    rgba(9, 30, 66, 0.25) 0 4px 8px -2px;\n  padding: 4px 8px;\n  display: flex;\n\n  & > div:last-child button {\n    margin-right: 0;\n  }\n  & > div:first-child button {\n    margin-left: 0;\n  }\n"], ["\n  margin-top: -8px;\n  background-color: white;\n  border-radius: 3px;\n  box-shadow: rgba(9, 30, 66, 0.31) 0 0 1px,\n    rgba(9, 30, 66, 0.25) 0 4px 8px -2px;\n  padding: 4px 8px;\n  display: flex;\n\n  & > div:last-child button {\n    margin-right: 0;\n  }\n  & > div:first-child button {\n    margin-left: 0;\n  }\n"])));
var tableLayouts = {
    default: {
        icon: media_center_1.default,
        label: 'inline',
    },
    wide: {
        icon: media_wide_1.default,
        label: 'wide',
    },
    'full-width': {
        icon: media_full_width_1.default,
        label: 'full width',
    },
};
var TableFloatingToolbar = /** @class */ (function (_super) {
    tslib_1.__extends(TableFloatingToolbar, _super);
    function TableFloatingToolbar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isOpen: false,
        };
        _this.setTableinDanger = function () {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            actions_1.hoverTable(true)(state, dispatch);
        };
        _this.resetTableinDanger = function () {
            var _a = _this.props.editorView, state = _a.state, dispatch = _a.dispatch;
            actions_1.clearHoverTable(state, dispatch);
        };
        _this.removeTable = function () {
            var _a = _this.props, _b = _a.editorView, state = _b.state, dispatch = _b.dispatch, removeTable = _a.removeTable;
            actions_1.clearHoverTable(state, dispatch);
            removeTable();
        };
        return _this;
    }
    TableFloatingToolbar.prototype.render = function () {
        var _this = this;
        var _a = this.props, popupsMountPoint = _a.popupsMountPoint, popupsBoundariesElement = _a.popupsBoundariesElement, popupsScrollableElement = _a.popupsScrollableElement, tableElement = _a.tableElement, editorView = _a.editorView, allowMergeCells = _a.allowMergeCells, tableActive = _a.tableActive, tableLayout = _a.tableLayout, allowNumberColumn = _a.allowNumberColumn, allowBackgroundColor = _a.allowBackgroundColor, allowHeaderRow = _a.allowHeaderRow, allowHeaderColumn = _a.allowHeaderColumn, stickToolbarToBottom = _a.stickToolbarToBottom, isLayoutSupported = _a.isLayoutSupported;
        if (!tableElement || !tableActive) {
            return null;
        }
        var availableLayouts = [];
        if (this.props.permittedLayouts) {
            if (this.props.permittedLayouts === 'all') {
                availableLayouts = Object.keys(tableLayouts);
            }
            else {
                availableLayouts = this.props.permittedLayouts;
            }
        }
        var shouldDisableLayout = isLayoutSupported
            ? !isLayoutSupported()
            : false;
        var layoutButtons = Array.from(new Set(availableLayouts)).map(function (layoutName) {
            var label = "Change layout to " + tableLayouts[layoutName].label;
            var Icon = tableLayouts[layoutName].icon;
            var onClick = function () {
                _this.props.updateLayout(layoutName);
            };
            return (React.createElement(styles_1.ToolbarButton, { spacing: "compact", disabled: shouldDisableLayout, selected: tableLayout === layoutName, onClick: _this.props.updateLayout ? onClick : undefined, title: label, key: layoutName, iconBefore: React.createElement(Icon, { label: label }) }));
        });
        return (React.createElement(editor_common_1.Popup, { offset: [0, 20], target: tableElement, mountTo: popupsMountPoint, boundariesElement: popupsBoundariesElement, scrollableElement: popupsScrollableElement, stickToBottom: stickToolbarToBottom, alignY: "bottom", alignX: "center", ariaLabel: "Table floating controls" },
            React.createElement(exports.Toolbar, null,
                allowBackgroundColor && (React.createElement(BackgroundColorMenu_1.default, { editorView: editorView, palette: editor_common_1.tableBackgroundColorPalette, mountPoint: popupsMountPoint, borderColors: editor_common_1.tableBackgroundBorderColors })),
                (allowNumberColumn || allowHeaderRow || allowHeaderColumn) && (React.createElement(DisplayOptionsMenu_1.default, { editorView: editorView, mountPoint: popupsMountPoint, allowNumberColumn: allowNumberColumn, allowHeaderRow: allowHeaderRow, allowHeaderColumn: allowHeaderColumn })),
                allowMergeCells && (React.createElement(AdvanceMenu_1.default, { editorView: editorView, mountPoint: popupsMountPoint, allowMergeCells: allowMergeCells })),
                (allowBackgroundColor ||
                    allowNumberColumn ||
                    allowHeaderRow ||
                    allowHeaderColumn ||
                    allowMergeCells) && React.createElement(styles_1.Separator, { style: { height: 'auto' } }),
                layoutButtons,
                layoutButtons.length ? (React.createElement(styles_1.Separator, { style: { height: 'auto' } })) : null,
                React.createElement("div", { onMouseEnter: this.setTableinDanger, onMouseLeave: this.resetTableinDanger },
                    React.createElement(styles_1.ToolbarButtonDanger, { spacing: "compact", onClick: this.removeTable, title: "Remove table", iconBefore: React.createElement(remove_1.default, { label: "Remove table" }) })))));
    };
    return TableFloatingToolbar;
}(react_1.Component));
exports.default = TableFloatingToolbar;
var templateObject_1;
//# sourceMappingURL=index.js.map