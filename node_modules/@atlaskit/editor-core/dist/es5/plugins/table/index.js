"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var prosemirror_tables_1 = require("prosemirror-tables");
var editor_common_1 = require("@atlaskit/editor-common");
var WithPluginState_1 = require("../../ui/WithPluginState");
var TableFloatingToolbar_1 = require("./ui/TableFloatingToolbar");
var main_1 = require("./pm-plugins/main");
var keymap_1 = require("./pm-plugins/keymap");
var hover_selection_plugin_1 = require("./pm-plugins/hover-selection-plugin");
var number_column_plugin_1 = require("./pm-plugins/number-column-plugin");
var table_column_resizing_plugin_1 = require("./pm-plugins/table-column-resizing-plugin");
var pluginConfig = function (tablesConfig) {
    return !tablesConfig || typeof tablesConfig === 'boolean' ? {} : tablesConfig;
};
var tablesPlugin = {
    nodes: function () {
        return [
            { rank: 1700, name: 'table', node: editor_common_1.table },
            { rank: 1800, name: 'tableHeader', node: editor_common_1.tableHeader },
            { rank: 1900, name: 'tableRow', node: editor_common_1.tableRow },
            { rank: 2000, name: 'tableCell', node: editor_common_1.tableCell },
        ];
    },
    pmPlugins: function () {
        return [
            {
                rank: 900,
                plugin: function (_a) {
                    var allowTables = _a.props.allowTables, eventDispatcher = _a.eventDispatcher, dispatch = _a.dispatch;
                    return main_1.createPlugin(dispatch, eventDispatcher, pluginConfig(allowTables));
                },
            },
            {
                rank: 910,
                plugin: function (_a) {
                    var allowTables = _a.props.allowTables;
                    return pluginConfig(allowTables).allowColumnResizing
                        ? prosemirror_tables_1.columnResizing({ handleWidth: 6 })
                        : undefined;
                },
            },
            {
                rank: 920,
                plugin: function (_a) {
                    var allowTables = _a.props.allowTables;
                    return pluginConfig(allowTables).allowColumnResizing
                        ? table_column_resizing_plugin_1.default
                        : undefined;
                },
            },
            // Needs to be lower priority than prosemirror-tables.tableEditing
            // plugin as it is currently swallowing backspace events inside tables
            { rank: 905, plugin: function () { return keymap_1.keymapPlugin(); } },
            { rank: 930, plugin: function () { return prosemirror_tables_1.tableEditing(); } },
            { rank: 940, plugin: function () { return hover_selection_plugin_1.default; } },
            {
                rank: 920,
                plugin: function (_a) {
                    var allowTables = _a.props.allowTables;
                    return pluginConfig(allowTables).allowNumberColumn
                        ? number_column_plugin_1.default
                        : undefined;
                },
            },
        ];
    },
    contentComponent: function (_a) {
        var editorView = _a.editorView, popupsMountPoint = _a.popupsMountPoint, popupsBoundariesElement = _a.popupsBoundariesElement;
        return (React.createElement(WithPluginState_1.default, { plugins: { tablesState: main_1.stateKey }, render: function (_a) {
                var tablesState = _a.tablesState;
                return (React.createElement(TableFloatingToolbar_1.default, { editorView: editorView, popupsMountPoint: popupsMountPoint, popupsBoundariesElement: popupsBoundariesElement, tableElement: tablesState.tableElement, tableActive: tablesState.tableActive, cellSelection: tablesState.cellSelection, removeTable: tablesState.removeTable, tableLayout: tablesState.tableLayout, updateLayout: tablesState.setTableLayout, isLayoutSupported: tablesState.isLayoutSupported, allowMergeCells: tablesState.allowMergeCells, allowNumberColumn: tablesState.allowNumberColumn, allowBackgroundColor: tablesState.allowBackgroundColor, allowHeaderRow: tablesState.allowHeaderRow, allowHeaderColumn: tablesState.allowHeaderColumn, stickToolbarToBottom: tablesState.stickToolbarToBottom, permittedLayouts: tablesState.permittedLayouts }));
            } }));
    },
};
exports.default = tablesPlugin;
//# sourceMappingURL=index.js.map