"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var raf_schd_1 = require("raf-schd");
var prosemirror_tables_1 = require("prosemirror-tables");
var editor_common_1 = require("@atlaskit/editor-common");
var TableFloatingControls_1 = require("../ui/TableFloatingControls");
var ColumnControls_1 = require("../ui/TableFloatingControls/ColumnControls");
var main_1 = require("../pm-plugins/main");
var hover_selection_plugin_1 = require("../pm-plugins/hover-selection-plugin");
var actions_1 = require("../actions");
var width_1 = require("../../width");
var WithPluginState_1 = require("../../../ui/WithPluginState");
var editor_common_2 = require("@atlaskit/editor-common");
var isIE11 = editor_common_1.browser.ie_version === 11;
var SHADOW_MAX_WIDTH = 8;
var DEFAULT_CELL_MIN_WIDTH = 25;
var TableComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TableComponent, _super);
    function TableComponent(props) {
        var _this = _super.call(this, props) || this;
        _this.handleScroll = function (event) {
            if (!_this.wrapper ||
                event.target !== _this.wrapper ||
                !_this.table ||
                !_this.leftShadow ||
                !_this.rightShadow) {
                return;
            }
            var _a = event.target, scrollLeft = _a.scrollLeft, offsetWidth = _a.offsetWidth;
            var tableOffsetWidth = _this.table.offsetWidth;
            var diff = tableOffsetWidth - offsetWidth;
            var scrollDiff = scrollLeft - diff > 0 ? scrollLeft - diff : 0;
            var width = diff
                ? Math.min(SHADOW_MAX_WIDTH, SHADOW_MAX_WIDTH - scrollDiff + 2)
                : 0;
            var paddingLeft = getComputedStyle(_this.wrapper.parentElement)
                .paddingLeft;
            var paddingLeftPx = paddingLeft
                ? Number(paddingLeft.substr(0, paddingLeft.length - 2))
                : 0;
            _this.leftShadow.style.left = paddingLeftPx + "px";
            _this.leftShadow.style.width = Math.min(scrollLeft, SHADOW_MAX_WIDTH) + "px";
            _this.rightShadow.style.left = offsetWidth -
                width -
                scrollDiff +
                paddingLeftPx + "px";
            _this.rightShadow.style.width = width + "px";
        };
        _this.handleScrollDebounced = raf_schd_1.default(_this.handleScroll);
        return _this;
    }
    TableComponent.prototype.componentDidMount = function () {
        if (this.props.allowColumnResizing) {
            if (this.colgroup && this.table) {
                prosemirror_tables_1.updateColumnsOnResize(this.props.node, this.colgroup, this.table, this.props.cellMinWidth || DEFAULT_CELL_MIN_WIDTH);
            }
            if (this.wrapper && !isIE11) {
                this.wrapper.addEventListener('scroll', this.handleScrollDebounced);
            }
        }
    };
    TableComponent.prototype.componentWillUnmount = function () {
        if (this.wrapper && !isIE11) {
            this.wrapper.removeEventListener('scroll', this.handleScrollDebounced);
        }
        this.handleScrollDebounced.cancel();
    };
    TableComponent.prototype.render = function () {
        var _this = this;
        var _a = this.props, eventDispatcher = _a.eventDispatcher, view = _a.view, node = _a.node, allowColumnResizing = _a.allowColumnResizing;
        var columnShadows = allowColumnResizing
            ? [
                React.createElement("div", { key: "left", className: "table-shadow -left", ref: function (elem) {
                        _this.leftShadow = elem;
                    } }),
                React.createElement("div", { key: "right", className: "table-shadow -right", ref: function (elem) {
                        _this.rightShadow = elem;
                    } }),
            ]
            : [];
        // doesn't work well with WithPluginState
        var _b = hover_selection_plugin_1.pluginKey.getState(view.state), isTableHovered = _b.isTableHovered, isTableInDanger = _b.isTableInDanger;
        return (React.createElement(WithPluginState_1.default, { plugins: {
                containerWidth: width_1.pluginKey,
                pluginState: main_1.stateKey,
            }, eventDispatcher: eventDispatcher, editorView: view, render: function (_a) {
                var containerWidth = _a.containerWidth, pluginState = _a.pluginState;
                return (React.createElement("div", { style: {
                        width: editor_common_2.calcTableWidth(node.attrs.layout, containerWidth),
                    }, className: "table-container", "data-layout": node.attrs.layout },
                    React.createElement("div", { className: "table-row-controls-wrapper" },
                        React.createElement(TableFloatingControls_1.default, { editorView: view, tableElement: pluginState.tableElement, isTableHovered: isTableHovered, hoverTable: actions_1.hoverTable, hoverRows: actions_1.hoverRows, resetHoverSelection: actions_1.resetHoverSelection, insertColumn: actions_1.insertColumn, insertRow: actions_1.insertRow, remove: pluginState.remove, isTableInDanger: isTableInDanger })),
                    React.createElement("div", { className: "table-wrapper", ref: function (elem) {
                            _this.wrapper = elem;
                        } },
                        React.createElement("div", { className: "table-column-controls-wrapper" },
                            React.createElement(ColumnControls_1.default, { editorView: view, tableElement: pluginState.tableElement, isTableHovered: isTableHovered, insertColumn: actions_1.insertColumn, remove: pluginState.remove, hoverColumns: actions_1.hoverColumns, resetHoverSelection: actions_1.resetHoverSelection, isTableInDanger: isTableInDanger })),
                        React.createElement("table", { ref: function (elem) {
                                _this.table = elem;
                                _this.props.contentDOM(elem ? elem : undefined);
                            }, "data-number-column": node.attrs.isNumberColumnEnabled, "data-layout": node.attrs.layout, "data-autosize": node.attrs.__autoSize }, allowColumnResizing ? (React.createElement("colgroup", { ref: function (elem) {
                                _this.colgroup = elem;
                            } })) : null)),
                    columnShadows));
            } }));
    };
    TableComponent.prototype.componentDidUpdate = function () {
        var _a = this.props, allowColumnResizing = _a.allowColumnResizing, node = _a.node, cellMinWidth = _a.cellMinWidth;
        if (allowColumnResizing && this.colgroup && this.table) {
            prosemirror_tables_1.updateColumnsOnResize(node, this.colgroup, this.table, cellMinWidth || DEFAULT_CELL_MIN_WIDTH);
        }
    };
    return TableComponent;
}(React.Component));
exports.default = TableComponent;
//# sourceMappingURL=TableComponent.js.map