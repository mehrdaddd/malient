/// <reference types="react" />
import * as React from 'react';
import { EventDispatcher } from '../event-dispatcher';
export interface ConnectProps {
    [key: string]: any;
}
declare const _default: (WrappedComponent: React.ComponentClass<any>, eventDispatcher: EventDispatcher) => {
    new (props?: ConnectProps | undefined, context?: any): {
        componentDidMount(): void;
        componentWillUnmount(): void;
        render(): React.ComponentElement<Readonly<{
            children?: React.ReactNode;
        }> & Readonly<any>, React.Component<any, React.ComponentState>>;
        onChangeHandler: (nextState: any) => void;
        setState<K extends never>(f: (prevState: {}, props: ConnectProps) => Pick<{}, K>, callback?: (() => any) | undefined): void;
        setState<K extends never>(state: Pick<{}, K>, callback?: (() => any) | undefined): void;
        forceUpdate(callBack?: (() => any) | undefined): void;
        props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<ConnectProps>;
        state: Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
};
export default _default;
