/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { EditorView } from 'prosemirror-view';
import { Transformer } from '@atlaskit/editor-common';
import EditorActions from './actions';
import { EditorProps } from './types';
import { EventDispatcher } from './event-dispatcher';
export * from './types';
export default class Editor extends React.Component<EditorProps, {}> {
    static defaultProps: EditorProps;
    static contextTypes: {
        editorActions: PropTypes.Requireable<any>;
    };
    context: {
        editorActions?: EditorActions;
    };
    private providerFactory;
    private editorActions;
    constructor(props: EditorProps, context: any);
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: EditorProps): void;
    componentWillUnmount(): void;
    onEditorCreated(instance: {
        view: EditorView;
        eventDispatcher: EventDispatcher;
        transformer?: Transformer<string>;
    }): void;
    private deprecationWarnings(props);
    onEditorDestroyed(instance: {
        view: EditorView;
        transformer?: Transformer<string>;
    }): void;
    private registerEditorForActions(editorView, eventDispatcher, contentTransformer?);
    private unregisterEditorFromActions();
    private handleProviders(props);
    handleSave: (view: EditorView) => void;
    render(): JSX.Element;
}
export declare const EditorWithAnalytics: typeof Editor;
