import { Node as PMNode } from 'prosemirror-model';
import { EditorState, TextSelection, Transaction } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
export declare function setBlockType(view: EditorView, name: string): boolean;
export declare function setNormalText(): Command;
export declare function setHeading(level: number): Command;
/**
 * Sometimes a selection in the editor can be slightly offset, for example:
 * it's possible for a selection to start or end at an empty node at the very end of
 * a line. This isn't obvious by looking at the editor and it's likely not what the
 * user intended - so we need to adjust the selection a bit in scenarios like that.
 */
export declare function adjustSelectionInList(doc: any, selection: TextSelection): TextSelection;
export declare function preventDefault(): Command;
export declare function toggleList(listType: 'bulletList' | 'orderedList'): Command;
export declare function toggleBulletList(): Command;
export declare function toggleOrderedList(): Command;
export declare function wrapInList(nodeType: any): Command;
export declare function liftListItems(): Command;
export declare function insertBlockType(name: string): Command;
/**
 * Function will insert code block at current selection if block is empty or below current selection and set focus on it.
 */
export declare function insertCodeBlock(): Command;
export declare function showLinkPanel(): Command;
export declare function insertNewLine(): Command;
export declare function insertRule(): Command;
export declare function indentList(): Command;
export declare function outdentList(): Command;
export declare function shouldAppendParagraphAfterBlockNode(state: any): boolean;
export declare function insertNodesEndWithNewParagraph(nodes: PMNode[]): Command;
export declare function createNewParagraphAbove(state: EditorState, dispatch: (tr: Transaction) => void): boolean;
export declare function createNewParagraphBelow(state: EditorState, dispatch: (tr: Transaction) => void): boolean;
export declare function createParagraphNear(append?: boolean): Command;
export declare const removeEmptyHeadingAtStartOfDocument: Command;
export declare function createParagraphAtEnd(): Command;
export interface Command {
    (state: EditorState, dispatch: (tr: Transaction) => void, view?: EditorView): boolean;
}
