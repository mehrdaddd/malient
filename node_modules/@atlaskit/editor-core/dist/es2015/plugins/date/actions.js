import { NodeSelection } from 'prosemirror-state';
import { pluginKey } from './plugin';
export var insertDate = function (date) { return function (state, dispatch) {
    var schema = state.schema;
    var timestamp;
    if (date) {
        timestamp = Date.UTC(date.year, date.month - 1, date.day);
    }
    else {
        var currentDate = new Date();
        timestamp = Date.UTC(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
    }
    var dateNode = schema.nodes.date.create({ timestamp: timestamp });
    dispatch(state.tr
        .replaceSelectionWith(dateNode)
        .scrollIntoView()
        .setMeta(pluginKey, { element: null }));
    return true;
}; };
export var selectElement = function (element) { return function (state, dispatch) {
    dispatch(state.tr.setMeta(pluginKey, { element: element }));
    return true;
}; };
export var openDatePicker = function (domAtPos) { return function (state, dispatch) {
    var $from = state.selection.$from;
    var start = $from.parent.childAfter($from.parentOffset).offset +
        $from.start($from.depth);
    var parent = domAtPos(start).node;
    if (parent && parent.childNodes.length) {
        var index = $from.index($from.depth);
        var element = parent.childNodes[index - 1];
        if (element) {
            dispatch(state.tr
                .setMeta(pluginKey, { element: element })
                .setSelection(NodeSelection.create(state.doc, $from.pos - 1)));
        }
    }
    return false;
}; };
//# sourceMappingURL=actions.js.map