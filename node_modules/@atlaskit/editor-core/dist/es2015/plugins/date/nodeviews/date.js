import * as tslib_1 from "tslib";
import * as React from 'react';
import styled from 'styled-components';
import { akColorN40, akColorN800, akColorN30A, akColorR50, akColorR75, akColorR500, akBorderRadius, akColorB200, } from '@atlaskit/util-shared-styles';
import { timestampToString, timestampToTaskContext, isPastDate, } from '@atlaskit/editor-common';
import { selectElement } from '../actions';
import { defaultEditorFontStyles } from '../../../styles';
var Overlay = styled.div(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  background: transparent;\n  border-radius: ", ";\n  box-sizing: border-box;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n"], ["\n  background: transparent;\n  border-radius: ", ";\n  box-sizing: border-box;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n"])), akBorderRadius);
var DateNode = styled.span(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["\n  ", ";\n\n  background: ", ";\n  border-radius: ", ";\n  color: ", ";\n  padding: 2px 4px;\n  margin: 0 1px;\n  position: relative;\n  cursor: pointer;\n  transition: background 0.3s;\n  white-space: nowrap;\n\n  &:hover {\n    background: ", ";\n  }\n  .ProseMirror-selectednode & > div {\n    border: 2px solid ", ";\n  }\n  &.past-due {\n    background: ", ";\n    color: ", ";\n\n    &:hover {\n      background: ", ";\n    }\n  }\n"], ["\n  ", ";\n\n  background: ", ";\n  border-radius: ", ";\n  color: ", ";\n  padding: 2px 4px;\n  margin: 0 1px;\n  position: relative;\n  cursor: pointer;\n  transition: background 0.3s;\n  white-space: nowrap;\n\n  &:hover {\n    background: ", ";\n  }\n  .ProseMirror-selectednode & > div {\n    border: 2px solid ", ";\n  }\n  &.past-due {\n    background: ", ";\n    color: ", ";\n\n    &:hover {\n      background: ", ";\n    }\n  }\n"])), defaultEditorFontStyles, akColorN30A, akBorderRadius, akColorN800, akColorN40, akColorB200, akColorR50, akColorR500, akColorR75);
var DateNodeView = /** @class */ (function (_super) {
    tslib_1.__extends(DateNodeView, _super);
    function DateNodeView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleClick = function (event) {
            var _a = _this.props.view, state = _a.state, dispatch = _a.dispatch;
            selectElement(event.currentTarget.parentElement)(state, dispatch);
        };
        return _this;
    }
    DateNodeView.prototype.render = function () {
        var timestamp = this.props.node.attrs.timestamp;
        var _a = this.props.view.state, schema = _a.schema, selection = _a.selection;
        var withinTask = selection.$from.parent.type === schema.nodes.taskItem;
        return (React.createElement(DateNode, { onClick: this.handleClick, className: withinTask && isPastDate(timestamp) ? 'past-due' : '' },
            React.createElement(Overlay, null),
            withinTask
                ? timestampToTaskContext(timestamp)
                : timestampToString(timestamp)));
    };
    return DateNodeView;
}(React.Component));
export default DateNodeView;
var templateObject_1, templateObject_2;
//# sourceMappingURL=date.js.map