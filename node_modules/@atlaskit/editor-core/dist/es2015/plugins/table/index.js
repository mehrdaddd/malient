import * as React from 'react';
import { tableEditing, columnResizing } from 'prosemirror-tables';
import { table, tableCell, tableHeader, tableRow, } from '@atlaskit/editor-common';
import WithPluginState from '../../ui/WithPluginState';
import TableFloatingToolbar from './ui/TableFloatingToolbar';
import { createPlugin, stateKey } from './pm-plugins/main';
import { keymapPlugin } from './pm-plugins/keymap';
import hoverSelectionPlugin from './pm-plugins/hover-selection-plugin';
import tableNumberColumnPlugin from './pm-plugins/number-column-plugin';
import tableColumnResizingPlugin from './pm-plugins/table-column-resizing-plugin';
var pluginConfig = function (tablesConfig) {
    return !tablesConfig || typeof tablesConfig === 'boolean' ? {} : tablesConfig;
};
var tablesPlugin = {
    nodes: function () {
        return [
            { rank: 1700, name: 'table', node: table },
            { rank: 1800, name: 'tableHeader', node: tableHeader },
            { rank: 1900, name: 'tableRow', node: tableRow },
            { rank: 2000, name: 'tableCell', node: tableCell },
        ];
    },
    pmPlugins: function () {
        return [
            {
                rank: 900,
                plugin: function (_a) {
                    var allowTables = _a.props.allowTables, eventDispatcher = _a.eventDispatcher, dispatch = _a.dispatch;
                    return createPlugin(dispatch, eventDispatcher, pluginConfig(allowTables));
                },
            },
            {
                rank: 910,
                plugin: function (_a) {
                    var allowTables = _a.props.allowTables;
                    return pluginConfig(allowTables).allowColumnResizing
                        ? columnResizing({ handleWidth: 6 })
                        : undefined;
                },
            },
            {
                rank: 920,
                plugin: function (_a) {
                    var allowTables = _a.props.allowTables;
                    return pluginConfig(allowTables).allowColumnResizing
                        ? tableColumnResizingPlugin
                        : undefined;
                },
            },
            // Needs to be lower priority than prosemirror-tables.tableEditing
            // plugin as it is currently swallowing backspace events inside tables
            { rank: 905, plugin: function () { return keymapPlugin(); } },
            { rank: 930, plugin: function () { return tableEditing(); } },
            { rank: 940, plugin: function () { return hoverSelectionPlugin; } },
            {
                rank: 920,
                plugin: function (_a) {
                    var allowTables = _a.props.allowTables;
                    return pluginConfig(allowTables).allowNumberColumn
                        ? tableNumberColumnPlugin
                        : undefined;
                },
            },
        ];
    },
    contentComponent: function (_a) {
        var editorView = _a.editorView, popupsMountPoint = _a.popupsMountPoint, popupsBoundariesElement = _a.popupsBoundariesElement;
        return (React.createElement(WithPluginState, { plugins: { tablesState: stateKey }, render: function (_a) {
                var tablesState = _a.tablesState;
                return (React.createElement(TableFloatingToolbar, { editorView: editorView, popupsMountPoint: popupsMountPoint, popupsBoundariesElement: popupsBoundariesElement, tableElement: tablesState.tableElement, tableActive: tablesState.tableActive, cellSelection: tablesState.cellSelection, removeTable: tablesState.removeTable, tableLayout: tablesState.tableLayout, updateLayout: tablesState.setTableLayout, isLayoutSupported: tablesState.isLayoutSupported, allowMergeCells: tablesState.allowMergeCells, allowNumberColumn: tablesState.allowNumberColumn, allowBackgroundColor: tablesState.allowBackgroundColor, allowHeaderRow: tablesState.allowHeaderRow, allowHeaderColumn: tablesState.allowHeaderColumn, stickToolbarToBottom: tablesState.stickToolbarToBottom, permittedLayouts: tablesState.permittedLayouts }));
            } }));
    },
};
export default tablesPlugin;
//# sourceMappingURL=index.js.map