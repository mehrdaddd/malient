import { TableMap } from 'prosemirror-tables';
import { findTable } from 'prosemirror-utils';
import { Decoration, DecorationSet } from 'prosemirror-view';
import { stateKey as tablePluginKey } from '../pm-plugins/main';
export var createHoverDecorationSet = function (cells, state, danger) {
    var deco = cells.map(function (cell) {
        var classes = ['hoveredCell'];
        if (danger) {
            classes.push('danger');
        }
        return Decoration.node(cell.pos - 1, cell.pos + cell.node.nodeSize - 1, {
            class: classes.join(' '),
        });
    });
    return DecorationSet.create(state.doc, deco);
};
export var createControlsDecorationSet = function (editorView) {
    var pluginState = tablePluginKey.getState(editorView.state);
    var tableNode = pluginState.tableNode;
    var start = findTable(editorView.state.selection).pos;
    var before = start - 1;
    return DecorationSet.create(editorView.state.doc, [
        Decoration.node(before, before + tableNode.nodeSize, {
            class: "with-controls last-update-" + new Date().valueOf(),
        }),
    ]);
};
export var createNumberColumnDecorationSet = function (state) {
    var table = findTable(state.selection);
    if (!table || !table.node.attrs.isNumberColumnEnabled) {
        return null;
    }
    var start = findTable(state.selection).pos;
    var map = TableMap.get(table.node);
    var set = [];
    for (var i = 0, count = table.node.childCount; i < count; i++) {
        var cell = table.node.child(i).child(0);
        if (cell.type === state.schema.nodes.tableHeader) {
            continue;
        }
        var from = start + map.map[i * map.width];
        set.push(Decoration.node(from, from + cell.nodeSize, {
            contentEditable: false,
        }));
    }
    return DecorationSet.create(state.doc, set);
};
//# sourceMappingURL=decoration.js.map