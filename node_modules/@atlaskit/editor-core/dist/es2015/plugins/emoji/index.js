import * as React from 'react';
import { emoji, emojiQuery, WithProviders } from '@atlaskit/editor-common';
import { createPlugin, emojiPluginKey } from './pm-plugins/main';
import inputRulePlugin from './pm-plugins/input-rules';
import keymap from './pm-plugins/keymap';
import { inputRulePlugin as asciiInputRulePlugin } from './pm-plugins/ascii-input-rules';
import ToolbarEmojiPicker from './ui/ToolbarEmojiPicker';
import EmojiTypeAhead from './ui/EmojiTypeAhead';
var emojiPlugin = {
    nodes: function () {
        return [{ name: 'emoji', node: emoji, rank: 1600 }];
    },
    marks: function () {
        return [{ name: 'emojiQuery', mark: emojiQuery, rank: 1600 }];
    },
    pmPlugins: function () {
        return [
            {
                rank: 400,
                plugin: function (_a) {
                    var providerFactory = _a.providerFactory;
                    return createPlugin(providerFactory);
                },
            },
            { rank: 410, plugin: function (_a) {
                    var schema = _a.schema;
                    return inputRulePlugin(schema);
                } },
            { rank: 420, plugin: function (_a) {
                    var schema = _a.schema;
                    return keymap(schema);
                } },
            {
                rank: 430,
                plugin: function (_a) {
                    var schema = _a.schema, providerFactory = _a.providerFactory;
                    return asciiInputRulePlugin(schema, providerFactory);
                },
            },
        ];
    },
    contentComponent: function (_a) {
        var editorView = _a.editorView, providerFactory = _a.providerFactory, popupsMountPoint = _a.popupsMountPoint, popupsBoundariesElement = _a.popupsBoundariesElement, popupsScrollableElement = _a.popupsScrollableElement;
        var renderNode = function (providers) {
            return (React.createElement(EmojiTypeAhead, { editorView: editorView, pluginKey: emojiPluginKey, emojiProvider: providers.emojiProvider, popupsMountPoint: popupsMountPoint, popupsBoundariesElement: popupsBoundariesElement }));
        };
        return (React.createElement(WithProviders, { providerFactory: providerFactory, providers: ['emojiProvider'], renderNode: renderNode }));
    },
    secondaryToolbarComponent: function (_a) {
        var editorView = _a.editorView, eventDispatcher = _a.eventDispatcher, providerFactory = _a.providerFactory, appearance = _a.appearance, popupsMountPoint = _a.popupsMountPoint, popupsBoundariesElement = _a.popupsBoundariesElement, popupsScrollableElement = _a.popupsScrollableElement, disabled = _a.disabled;
        var renderNode = function (providers) {
            // numFollowingButtons must be changed if buttons are added after ToolbarEmojiPicker to the message editor
            return (React.createElement(ToolbarEmojiPicker, { editorView: editorView, pluginKey: emojiPluginKey, emojiProvider: providers.emojiProvider, numFollowingButtons: 4, isReducedSpacing: true, isDisabled: disabled, popupsMountPoint: popupsMountPoint, popupsBoundariesElement: popupsBoundariesElement, popupsScrollableElement: popupsScrollableElement }));
        };
        return (React.createElement(WithProviders, { providerFactory: providerFactory, providers: ['emojiProvider'], renderNode: renderNode }));
    },
};
export default emojiPlugin;
//# sourceMappingURL=index.js.map