import { Selection } from 'prosemirror-state';
import { Fragment } from 'prosemirror-model';
import { safeInsert } from 'prosemirror-utils';
import { isChromeWithSelectionBug } from '../../../utils';
import { pluginKey, ACTIONS } from '../pm-plugins/main';
import { findQueryMark } from '../utils/find-query-mark';
import { dismissCommand } from './dismiss';
export var selectCurrentItem = function () { return function (state, dispatch) {
    var _a = pluginKey.getState(state), active = _a.active, currentIndex = _a.currentIndex, items = _a.items, typeAheadHandler = _a.typeAheadHandler;
    if (!active || !typeAheadHandler) {
        return false;
    }
    if (!typeAheadHandler.selectItem || !items[currentIndex]) {
        return withTypeAheadQueryMarkPosition(state, function (start, end) {
            return insertFallbackCommand(start, end)(state, dispatch);
        });
    }
    return selectItem(typeAheadHandler, items[currentIndex])(state, dispatch);
}; };
export var selectSingleItemOrDismiss = function () { return function (state, dispatch) {
    var _a = pluginKey.getState(state), active = _a.active, items = _a.items, typeAheadHandler = _a.typeAheadHandler;
    if (!active || !typeAheadHandler || !typeAheadHandler.selectItem) {
        return false;
    }
    if (items.length === 1) {
        return selectItem(typeAheadHandler, items[0])(state, dispatch);
    }
    if (!items || items.length === 0) {
        return dismissCommand()(state, dispatch);
    }
    return false;
}; };
export var selectByIndex = function (index) { return function (state, dispatch) {
    var _a = pluginKey.getState(state), active = _a.active, items = _a.items, typeAheadHandler = _a.typeAheadHandler;
    if (!active ||
        !typeAheadHandler ||
        !typeAheadHandler.selectItem ||
        !items[index]) {
        return false;
    }
    return selectItem(typeAheadHandler, items[index])(state, dispatch);
}; };
export var selectItem = function (handler, item) { return function (state, dispatch) {
    return withTypeAheadQueryMarkPosition(state, function (start, end) {
        var replaceWith = function (node) {
            var tr = state.tr;
            tr = tr
                .setMeta(pluginKey, { action: ACTIONS.SELECT_CURRENT })
                .replaceWith(start, end, Fragment.empty);
            /**
             *
             * Replacing a type ahead query mark with a block node.
             *
             */
            if (node.isBlock) {
                tr = safeInsert(node)(tr);
                /**
                 *
                 * Replacing a type ahead query mark with an inline node.
                 *
                 */
            }
            else if (node.isInline) {
                var fragment = Fragment.fromArray([node, state.schema.text(' ')]);
                tr = tr.replaceWith(start, start, fragment);
                // This problem affects Chrome v58-62. See: https://github.com/ProseMirror/prosemirror/issues/710
                if (isChromeWithSelectionBug) {
                    document.getSelection().empty();
                }
                // Placing cursor after node + space.
                tr = tr.setSelection(Selection.near(tr.doc.resolve(start + fragment.size)));
            }
            dispatch(tr);
            return true;
        };
        if (handler.selectItem(state, item, replaceWith) === false) {
            return insertFallbackCommand(start, end)(state, dispatch);
        }
        return true;
    });
}; };
export var insertFallbackCommand = function (start, end) { return function (state, dispatch) {
    var _a = pluginKey.getState(state), query = _a.query, trigger = _a.trigger;
    var node = state.schema.text(trigger + query);
    dispatch(state.tr.replaceWith(start, end, node));
    return true;
}; };
export var withTypeAheadQueryMarkPosition = function (state, cb) {
    var doc = state.doc;
    var typeAheadQuery = state.schema.marks.typeAheadQuery;
    var queryMark = findQueryMark(typeAheadQuery, doc, 0, doc.nodeSize - 2);
    if (!queryMark) {
        return false;
    }
    return cb(queryMark.start, queryMark.end);
};
//# sourceMappingURL=select-item.js.map