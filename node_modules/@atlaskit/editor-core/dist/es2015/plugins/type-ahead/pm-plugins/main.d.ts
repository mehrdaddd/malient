import { Plugin, PluginKey, Transaction, EditorState } from 'prosemirror-state';
import { Dispatch } from '../../../event-dispatcher';
import { TypeAheadHandler, TypeAheadItem, TypeAheadItemsLoader } from '../types';
export declare const pluginKey: PluginKey;
export declare type PluginState = {
    active: boolean;
    prevActiveState: boolean;
    query: string;
    trigger: string | null;
    typeAheadHandler: TypeAheadHandler | null;
    items: Array<TypeAheadItem>;
    itemsLoader: TypeAheadItemsLoader;
    currentIndex: number;
};
export declare const ACTIONS: {
    SELECT_PREV: string;
    SELECT_NEXT: string;
    SELECT_CURRENT: string;
    ITEMS_LIST_UPDATED: string;
};
export declare function createInitialPluginState(prevActiveState?: boolean): PluginState;
export declare function createPlugin(dispatch: Dispatch, typeAhead: any): Plugin;
/**
 *
 * Action Handlers
 *
 */
export declare type ActionHandlerParams = {
    dispatch: Dispatch;
    pluginState: PluginState;
    tr: Transaction;
};
export declare function createItemsLoader(promiseOfItems: Promise<Array<TypeAheadItem>>): TypeAheadItemsLoader;
export declare function defaultActionHandler({dispatch, typeAhead, pluginState, state}: {
    dispatch: Dispatch;
    typeAhead: Array<TypeAheadHandler>;
    pluginState: PluginState;
    state: EditorState;
}): PluginState;
export declare function selectPrevActionHandler({dispatch, pluginState}: ActionHandlerParams): PluginState;
export declare function selectNextActionHandler({dispatch, pluginState}: ActionHandlerParams): PluginState;
export declare function itemsListUpdatedActionHandler({dispatch, pluginState, tr}: ActionHandlerParams): PluginState;
export declare function selectCurrentActionHandler({dispatch, pluginState}: ActionHandlerParams): PluginState;
