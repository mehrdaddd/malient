import { Fragment } from 'prosemirror-model';
import { isImage, setTextSelection, isTableCell } from '../../../utils';
import { insertNodesEndWithNewParagraph, shouldAppendParagraphAfterBlockNode, } from '../../../commands';
import { copyOptionalAttrsFromMediaState } from '../utils/media-common';
import { safeInsert } from 'prosemirror-utils';
export var insertMediaAsMediaSingle = function (view, node) {
    var state = view.state, dispatch = view.dispatch;
    var _a = state.schema.nodes, mediaSingle = _a.mediaSingle, media = _a.media;
    if (!mediaSingle) {
        return false;
    }
    // if not an image type media node
    if (node.type !== media || !isImage(node.attrs.__fileMimeType)) {
        return false;
    }
    var mediaSingleNode = mediaSingle.create({}, node);
    var nodes = [mediaSingleNode];
    return insertNodesEndWithNewParagraph(nodes)(state, dispatch);
};
export var insertMediaSingleNode = function (view, mediaState, collection) {
    if (!collection) {
        return false;
    }
    var state = view.state, dispatch = view.dispatch;
    var grandParent = state.selection.$from.node(-1);
    var node = createMediaSingleNode(state.schema, collection)(mediaState);
    var shouldSplit = grandParent && grandParent.type.validContent(Fragment.from(node));
    if (shouldSplit) {
        insertNodesEndWithNewParagraph([node])(state, dispatch);
        if (isTableCell(state)) {
            /** If table cell, the default is to move to the next cell, override to select paragraph */
            setTextSelection(view, state.selection.head + 1, state.selection.head + 1);
        }
    }
    else {
        dispatch(safeInsert(shouldAppendParagraphAfterBlockNode(view.state)
            ? Fragment.fromArray([node, state.schema.nodes.paragraph.create()])
            : node)(state.tr));
    }
    return true;
};
export var createMediaSingleNode = function (schema, collection) { return function (mediaState) {
    var id = mediaState.id, thumbnail = mediaState.thumbnail;
    var _a = (thumbnail && thumbnail.dimensions) || {
        width: undefined,
        height: undefined,
    }, width = _a.width, height = _a.height;
    var _b = schema.nodes, media = _b.media, mediaSingle = _b.mediaSingle;
    var mediaNode = media.create({
        id: id,
        type: 'file',
        collection: collection,
        width: width,
        height: height,
        __key: id,
    });
    copyOptionalAttrsFromMediaState(mediaState, mediaNode);
    return mediaSingle.create({}, mediaNode);
}; };
//# sourceMappingURL=media-single.js.map