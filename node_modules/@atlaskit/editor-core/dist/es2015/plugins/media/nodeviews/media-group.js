import * as tslib_1 from "tslib";
import * as assert from 'assert';
import * as React from 'react';
import { Component } from 'react';
import styled from 'styled-components';
import { FilmstripView } from '@atlaskit/media-filmstrip';
import { stateKey as mediaStateKey, } from '../pm-plugins/main';
// Need `padding-left` override for media item drop-shadow
var Wrapper = styled.div(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  margin-bottom: 8px;\n  &&& ul {\n    padding: 0;\n  }\n"], ["\n  margin-bottom: 8px;\n  &&& ul {\n    padding: 0;\n  }\n"])));
var MediaGroupNode = /** @class */ (function (_super) {
    tslib_1.__extends(MediaGroupNode, _super);
    function MediaGroupNode(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            animate: false,
            offset: 0,
        };
        _this.handleSize = function (_a) {
            var offset = _a.offset;
            return _this.setState({ offset: offset });
        };
        _this.handleScroll = function (_a) {
            var animate = _a.animate, offset = _a.offset;
            return _this.setState({ animate: animate, offset: offset });
        };
        _this.getMediaNodesIds = function (children) {
            return (React.Children.map(children, function (child) {
                return child.props.node.attrs.id;
            }) || []);
        };
        _this.mediaPluginState = mediaStateKey.getState(props.view.state);
        assert(_this.mediaPluginState, 'Media is not enabled');
        return _this;
    }
    /**
     * Save all childNodes ids into "mediaNodesIds"
     */
    MediaGroupNode.prototype.componentDidMount = function () {
        this.mediaNodesIds = this.getMediaNodesIds(this.props.children);
    };
    MediaGroupNode.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var children = this.getMediaNodesIds(this.props.children);
        var nextChildren = this.getMediaNodesIds(nextProps.children);
        if (children.length === nextChildren.length &&
            this.props.node.firstChild.attrs.__key ===
                nextProps.node.firstChild.attrs.__key &&
            this.state.offset === nextState.offset) {
            return false;
        }
        return true;
    };
    /**
     * Update "mediaNodesIds" and notify media plugin about removed nodes
     */
    MediaGroupNode.prototype.componentWillReceiveProps = function (nextProps) {
        var _this = this;
        var newMediaNodesIds = this.getMediaNodesIds(nextProps.children);
        var removedNodesIds = this.mediaNodesIds.filter(function (id) { return newMediaNodesIds.indexOf(id) === -1; });
        removedNodesIds.forEach(function (mediaNodeId) {
            _this.mediaPluginState.cancelInFlightUpload(mediaNodeId);
        });
        this.mediaNodesIds = newMediaNodesIds;
    };
    MediaGroupNode.prototype.render = function () {
        var _a = this.state, animate = _a.animate, offset = _a.offset;
        return (React.createElement(Wrapper, null,
            React.createElement(FilmstripView, { animate: animate, offset: offset, onSize: this.handleSize, onScroll: this.handleScroll }, this.props.children)));
    };
    return MediaGroupNode;
}(Component));
export default MediaGroupNode;
var templateObject_1;
//# sourceMappingURL=media-group.js.map