import * as React from 'react';
import { keymap } from 'prosemirror-keymap';
import { Plugin, PluginKey } from 'prosemirror-state';
import * as keymaps from '../../keymaps';
import { analyticsService } from '../../analytics';
import WithPluginState from '../../ui/WithPluginState';
import HelpDialog from './ui';
export var pluginKey = new PluginKey('helpDialogPlugin');
export var openHelpCommand = function (tr, dispatch) {
    tr = tr.setMeta(pluginKey, true);
    dispatch(tr);
};
export var closeHelpCommand = function (tr, dispatch) {
    tr = tr.setMeta(pluginKey, false);
    dispatch(tr);
};
export var stopPropagationCommand = function (e) { return e.stopPropagation(); };
export function createPlugin(dispatch) {
    return new Plugin({
        key: pluginKey,
        state: {
            init: function () {
                return { isVisible: false };
            },
            apply: function (tr, value, state) {
                var isVisible = tr.getMeta(pluginKey);
                var currentState = pluginKey.getState(state);
                if (isVisible !== undefined && isVisible !== currentState.isVisible) {
                    var newState = { isVisible: isVisible };
                    dispatch(pluginKey, newState);
                    return newState;
                }
                return currentState;
            },
        },
    });
}
var helpDialog = {
    pmPlugins: function () {
        return [
            { rank: 2200, plugin: function (_a) {
                    var dispatch = _a.dispatch;
                    return createPlugin(dispatch);
                } },
            { rank: 2210, plugin: function (_a) {
                    var schema = _a.schema;
                    return keymapPlugin(schema);
                } },
        ];
    },
    contentComponent: function (_a) {
        var editorView = _a.editorView, appearance = _a.appearance;
        return (React.createElement(WithPluginState, { plugins: {
                helpDialog: pluginKey,
            }, render: function (_a) {
                var _b = _a.helpDialog, helpDialog = _b === void 0 ? {} : _b;
                return (React.createElement(HelpDialog, { appearance: appearance, editorView: editorView, isVisible: helpDialog.isVisible }));
            } }));
    },
};
var keymapPlugin = function (schema) {
    var list = {};
    keymaps.bindKeymapWithCommand(keymaps.openHelp.common, function (state, dispatch) {
        var tr = state.tr;
        var isVisible = tr.getMeta(pluginKey);
        if (!isVisible) {
            analyticsService.trackEvent('atlassian.editor.help.keyboard');
            openHelpCommand(tr, dispatch);
        }
        return true;
    }, list);
    return keymap(list);
};
export default helpDialog;
//# sourceMappingURL=index.js.map