import { keymap } from 'prosemirror-keymap';
import * as keymaps from '../../../keymaps';
import { arrow, deleteNode } from '../actions';
export default function keymapPlugin() {
    var map = {};
    keymaps.bindKeymapWithCommand(keymaps.moveLeft.common, function (state, dispatch, view) {
        var endOfTextblock = view ? view.endOfTextblock.bind(view) : undefined;
        return arrow(0 /* BACKWARD */, endOfTextblock)(state, dispatch);
    }, map);
    keymaps.bindKeymapWithCommand(keymaps.moveRight.common, function (state, dispatch, view) {
        var endOfTextblock = view ? view.endOfTextblock.bind(view) : undefined;
        return arrow(1 /* FORWARD */, endOfTextblock)(state, dispatch);
    }, map);
    // default PM's Backspace doesn't handle removing block nodes when cursor is after it
    keymaps.bindKeymapWithCommand(keymaps.backspace.common, deleteNode(0 /* BACKWARD */), map);
    // handle Delete key (remove node before the cursor)
    keymaps.bindKeymapWithCommand(keymaps.deleteKey.common, deleteNode(1 /* FORWARD */), map);
    return keymap(map);
}
//# sourceMappingURL=keymap.js.map