import { EditorState, Plugin, PluginKey } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
export declare type DomAtPos = (pos: number) => {
    node: HTMLElement;
    offset: number;
};
export interface PanelType {
    panelType: 'info' | 'note' | 'success' | 'warning' | 'error';
}
export declare const availablePanelType: {
    panelType: string;
}[];
export declare class PanelState {
    private state;
    private activeNode;
    private changeHandlers;
    element?: HTMLElement | undefined;
    activePanelType?: string | undefined;
    toolbarVisible?: boolean | undefined;
    editorFocused: boolean;
    constructor(state: EditorState);
    updateEditorFocused(editorFocused: boolean): void;
    changePanelType(view: EditorView, {panelType}: PanelType): void;
    removePanel(view: EditorView): void;
    subscribe(cb: PanelStateSubscriber): void;
    unsubscribe(cb: PanelStateSubscriber): void;
    update(state: EditorState, domAtPos: DomAtPos, domEvent?: boolean): void;
    private getActivePanel();
    private getDomElement(domAtPos);
}
export declare type PanelStateSubscriber = (state: PanelState) => any;
export declare const stateKey: PluginKey;
export declare const createPlugin: () => Plugin;
