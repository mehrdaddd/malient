import * as tslib_1 from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import styled from 'styled-components';
import { akBorderRadius, akGridSizeUnitless, akColorG50, akColorP50, akColorB50, akColorY50, akColorR50, akColorG400, akColorP400, akColorB400, akColorY400, akColorR400, } from '@atlaskit/util-shared-styles';
import InfoIcon from '@atlaskit/icon/glyph/editor/info';
import SuccessIcon from '@atlaskit/icon/glyph/editor/success';
import NoteIcon from '@atlaskit/icon/glyph/editor/note';
import WarningIcon from '@atlaskit/icon/glyph/editor/warning';
import ErrorIcon from '@atlaskit/icon/glyph/editor/error';
import { ContentNodeView } from '../../../nodeviews';
var panelColor = {
    info: akColorB50,
    note: akColorP50,
    success: akColorG50,
    warning: akColorY50,
    error: akColorR50,
};
var iconColor = {
    info: akColorB400,
    note: akColorP400,
    success: akColorG400,
    warning: akColorY400,
    error: akColorR400,
};
var panelIcons = {
    info: InfoIcon,
    success: SuccessIcon,
    note: NoteIcon,
    warning: WarningIcon,
    error: ErrorIcon,
};
// tslint:disable-next-line:variable-name
var Wrapper = styled.div(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  border-radius: ", ";\n  margin: ", "px 0;\n  padding: ", "px;\n"], ["\n  border-radius: ", ";\n  margin: ", "px 0;\n  padding: ", "px;\n"])), akBorderRadius, akGridSizeUnitless / 2, akGridSizeUnitless);
// tslint:disable-next-line:variable-name
var ContentWrapper = styled.div(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["\n  margin: 1px 0 1px ", "px;\n"], ["\n  margin: 1px 0 1px ", "px;\n"])), akGridSizeUnitless * 4);
// tslint:disable-next-line:variable-name
var IconWrapper = styled.span(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["\n  height: 24px;\n  width: 24px;\n  position: absolute;\n"], ["\n  height: 24px;\n  width: 24px;\n  position: absolute;\n"])));
var Panel = /** @class */ (function (_super) {
    tslib_1.__extends(Panel, _super);
    function Panel(node, view, getPos) {
        var _this = _super.call(this, node, view) || this;
        _this.node = node;
        _this.panelType = node.attrs.panelType;
        _this.renderReactComponent();
        return _this;
    }
    Panel.prototype.renderReactComponent = function () {
        var panelType = this.panelType;
        this.domRef = document.createElement('div');
        this.domRef.setAttribute('data-panel-type', this.panelType);
        // tslint:disable-next-line:variable-name
        var Icon = panelIcons[panelType];
        ReactDOM.render(React.createElement(Wrapper, { style: { background: panelColor[panelType] } },
            React.createElement(IconWrapper, { style: { color: iconColor[panelType] } },
                React.createElement(Icon, { label: "Panel " + panelType })),
            React.createElement(ContentWrapper, { innerRef: this.handleRef })), this.domRef);
    };
    Object.defineProperty(Panel.prototype, "dom", {
        get: function () {
            return this.domRef;
        },
        enumerable: true,
        configurable: true
    });
    Panel.prototype.update = function (node) {
        if (node.attrs.panelType !== this.node.attrs.panelType ||
            node.type !== this.node.type) {
            return false;
        }
        return true;
    };
    Panel.prototype.destroy = function () {
        ReactDOM.unmountComponentAtNode(this.domRef);
        this.domRef = undefined;
        _super.prototype.destroy.call(this);
    };
    return Panel;
}(ContentNodeView));
export var panelNodeView = function (node, view, getPos) {
    return new Panel(node, view, getPos);
};
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=panel.js.map