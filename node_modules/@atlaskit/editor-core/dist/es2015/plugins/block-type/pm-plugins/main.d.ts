import { EditorState, Plugin, PluginKey } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { BlockType } from '../types';
export declare type StateChangeHandler = (state: BlockTypeState) => any;
export declare type BlockTypeStateSubscriber = (state: BlockTypeState) => any;
/**
 *
 * Plugin State
 *
 */
export declare class BlockTypeState {
    private changeHandlers;
    private state;
    currentBlockType: BlockType;
    blockTypesDisabled: boolean;
    availableBlockTypes: BlockType[];
    availableWrapperBlockTypes: BlockType[];
    isCodeBlock: boolean;
    constructor(state: EditorState);
    subscribe(cb: StateChangeHandler): void;
    unsubscribe(cb: StateChangeHandler): void;
    setBlockType(name: string, view: EditorView): boolean;
    insertBlockType(name: string, view: EditorView): boolean;
    update(newEditorState: any, dirty?: boolean): void;
    private triggerOnChange();
    private detectBlockType();
    private nodeBlockType;
    private isBlockTypeSchemaSupported;
}
export declare const stateKey: PluginKey;
export declare const createPlugin: (appearance?: any) => Plugin;
