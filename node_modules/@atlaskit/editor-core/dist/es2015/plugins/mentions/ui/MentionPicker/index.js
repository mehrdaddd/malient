import * as tslib_1 from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import { Popup } from '@atlaskit/editor-common';
import { MentionPicker as AkMentionPicker, isSpecialMention, } from '@atlaskit/mention';
import { analyticsService } from '../../../../analytics';
import { getInsertTypeForKey, InsertType, } from '../../../../analytics/fabric-analytics-helper';
var MentionPicker = /** @class */ (function (_super) {
    tslib_1.__extends(MentionPicker, _super);
    function MentionPicker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {};
        _this.handlePluginStateChange = function (state) {
            var anchorElement = state.anchorElement, query = state.query, focused = state.focused;
            _this.setState({ anchorElement: anchorElement, query: query, focused: focused });
        };
        _this.handleOnOpen = function () {
            _this.pickerOpenTime = Date.now();
        };
        _this.calculateElapsedTime = function () {
            _this.pickerElapsedTime = Date.now() - _this.pickerOpenTime;
        };
        _this.handleOnClose = function () {
            _this.calculateElapsedTime();
            analyticsService.trackEvent('atlassian.fabric.mention.picker.close', {
                duration: _this.pickerElapsedTime || 0,
            });
            return true;
        };
        _this.handleMentionPickerRef = function (ref) {
            _this.picker = ref;
        };
        _this.handleSelectedMention = function (mention) {
            _this.calculateElapsedTime();
            _this.pluginState.insertMention(mention);
            _this.fireMentionInsertAnalytics(mention);
        };
        _this.handleSelectPrevious = function () {
            if (_this.picker) {
                _this.picker.selectPrevious();
            }
            return true;
        };
        _this.handleSelectNext = function () {
            if (_this.picker) {
                _this.picker.selectNext();
            }
            return true;
        };
        _this.handleSelectCurrent = function (key) {
            if (_this.getMentionsCount() > 0 && _this.picker) {
                _this.insertType = getInsertTypeForKey(key);
                _this.picker.chooseCurrentSelection();
            }
            else {
                _this.insertType = undefined;
                _this.pluginState.dismiss();
            }
            _this.handleOnClose();
            return true;
        };
        _this.fireMentionInsertAnalytics = function (mention) {
            var accessLevel = mention.accessLevel;
            var lastQuery = _this.pluginState && _this.pluginState.lastQuery;
            var contextIdentifier = _this.state.contextIdentifierProvider
                ? {
                    objectId: _this.state.contextIdentifierProvider.objectId,
                    containerId: _this.state.contextIdentifierProvider.containerId,
                }
                : {};
            analyticsService.trackEvent('atlassian.fabric.mention.picker.insert', tslib_1.__assign({ mode: _this.insertType || InsertType.SELECTED, isSpecial: isSpecialMention(mention) || false, accessLevel: accessLevel || '', queryLength: lastQuery ? lastQuery.length : 0, duration: _this.pickerElapsedTime || 0, mentionee: mention.id }, contextIdentifier));
            _this.insertType = undefined;
        };
        _this.handleSpaceTyped = function () {
            analyticsService.trackEvent('atlassian.fabric.mention.picker.space', {});
        };
        return _this;
    }
    MentionPicker.prototype.componentWillMount = function () {
        this.pickerOpenTime = 0;
        this.pickerElapsedTime = 0;
        this.setPluginState(this.props);
    };
    MentionPicker.prototype.componentDidMount = function () {
        this.resolveResourceProvider(this.props.mentionProvider);
        this.resolveContextIdentifierProvider(this.props.contextIdentifierProvider);
    };
    MentionPicker.prototype.componentWillUnmount = function () {
        var pluginState = this.pluginState;
        if (pluginState) {
            pluginState.unsubscribe(this.handlePluginStateChange);
        }
    };
    MentionPicker.prototype.componentWillUpdate = function (nextProps) {
        if (!this.pluginState) {
            this.setPluginState(nextProps);
        }
    };
    MentionPicker.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.mentionProvider !== this.props.mentionProvider) {
            this.resolveResourceProvider(nextProps.mentionProvider);
        }
        if (nextProps.contextIdentifierProvider !==
            this.props.contextIdentifierProvider) {
            this.resolveContextIdentifierProvider(nextProps.contextIdentifierProvider);
        }
    };
    MentionPicker.prototype.setPluginState = function (props) {
        var editorView = props.editorView, pluginKey = props.pluginKey;
        if (!editorView) {
            return;
        }
        var pluginState = pluginKey.getState(editorView.state);
        if (pluginState) {
            this.pluginState = pluginState;
            pluginState.subscribe(this.handlePluginStateChange);
            pluginState.onSelectPrevious = this.handleSelectPrevious;
            pluginState.onSelectNext = this.handleSelectNext;
            pluginState.onSelectCurrent = this.handleSelectCurrent;
            pluginState.onDismiss = this.handleOnClose;
            pluginState.onSpaceTyped = this.handleSpaceTyped;
        }
    };
    MentionPicker.prototype.resolveResourceProvider = function (resourceProvider) {
        var _this = this;
        if (resourceProvider) {
            resourceProvider.then(function (mentionProvider) {
                _this.setState({ mentionProvider: mentionProvider });
            });
        }
        else {
            this.setState({ mentionProvider: undefined });
        }
    };
    MentionPicker.prototype.resolveContextIdentifierProvider = function (contextIdentifierPromise) {
        var _this = this;
        if (contextIdentifierPromise) {
            contextIdentifierPromise.then(function (contextIdentifierProvider) {
                _this.setState({ contextIdentifierProvider: contextIdentifierProvider });
            });
        }
        else {
            this.setState({ contextIdentifierProvider: undefined });
        }
    };
    MentionPicker.prototype.render = function () {
        var _a = this.state, focused = _a.focused, anchorElement = _a.anchorElement, query = _a.query, mentionProvider = _a.mentionProvider;
        var _b = this.props, popupsBoundariesElement = _b.popupsBoundariesElement, popupsMountPoint = _b.popupsMountPoint, presenceProvider = _b.presenceProvider, popupsScrollableElement = _b.popupsScrollableElement;
        if (!focused || !anchorElement || query === undefined || !mentionProvider) {
            return null;
        }
        return (React.createElement(Popup, { target: anchorElement, fitHeight: 300, fitWidth: 340, boundariesElement: popupsBoundariesElement, mountTo: popupsMountPoint, scrollableElement: popupsScrollableElement, offset: [0, 3] },
            React.createElement(AkMentionPicker, { resourceProvider: mentionProvider, presenceProvider: presenceProvider, onSelection: this.handleSelectedMention, onOpen: this.handleOnOpen, onClose: this.handleOnClose, query: query, ref: this.handleMentionPickerRef })));
    };
    MentionPicker.prototype.getMentionsCount = function () {
        return (this.picker && this.picker.mentionsCount()) || 0;
    };
    return MentionPicker;
}(PureComponent));
export default MentionPicker;
//# sourceMappingURL=index.js.map