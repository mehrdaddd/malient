import * as tslib_1 from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import BoldIcon from '@atlaskit/icon/glyph/editor/bold';
import ItalicIcon from '@atlaskit/icon/glyph/editor/italic';
import { analyticsDecorator as analytics } from '../../../../analytics';
import { toggleBold, toggleItalic, tooltip } from '../../../../keymaps';
import ToolbarButton from '../../../../ui/ToolbarButton';
import { ButtonGroup } from '../../../../ui/styles';
var ToolbarTextFormatting = /** @class */ (function (_super) {
    tslib_1.__extends(ToolbarTextFormatting, _super);
    function ToolbarTextFormatting() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {};
        _this.handlePluginStateChange = function (pluginState) {
            _this.setState({
                boldActive: pluginState.strongActive,
                boldDisabled: pluginState.strongDisabled,
                boldHidden: pluginState.strongHidden,
                italicActive: pluginState.emActive,
                italicDisabled: pluginState.emDisabled,
                italicHidden: pluginState.emHidden,
                underlineActive: pluginState.underlineActive,
                underlineDisabled: pluginState.underlineDisabled,
                underlineHidden: pluginState.underlineHidden,
            });
        };
        _this.handleBoldClick = function () {
            if (!_this.state.boldDisabled) {
                return _this.props.pluginState.toggleStrong(_this.props.editorView);
            }
            return false;
        };
        _this.handleItalicClick = function () {
            if (!_this.state.italicDisabled) {
                return _this.props.pluginState.toggleEm(_this.props.editorView);
            }
            return false;
        };
        return _this;
    }
    ToolbarTextFormatting.prototype.componentDidMount = function () {
        this.props.pluginState.subscribe(this.handlePluginStateChange);
    };
    ToolbarTextFormatting.prototype.componentWillUnmount = function () {
        this.props.pluginState.unsubscribe(this.handlePluginStateChange);
    };
    ToolbarTextFormatting.prototype.render = function () {
        var _a = this.props, disabled = _a.disabled, isReducedSpacing = _a.isReducedSpacing;
        return (React.createElement(ButtonGroup, { width: isReducedSpacing ? 'small' : 'large' },
            this.state.boldHidden ? null : (React.createElement(ToolbarButton, { spacing: isReducedSpacing ? 'none' : 'default', onClick: this.handleBoldClick, selected: this.state.boldActive, disabled: disabled || this.state.boldDisabled, title: tooltip(toggleBold), iconBefore: React.createElement(BoldIcon, { label: "Bold" }) })),
            this.state.italicHidden ? null : (React.createElement(ToolbarButton, { spacing: isReducedSpacing ? 'none' : 'default', onClick: this.handleItalicClick, selected: this.state.italicActive, disabled: disabled || this.state.italicDisabled, title: tooltip(toggleItalic), iconBefore: React.createElement(ItalicIcon, { label: "Italic" }) }))));
    };
    tslib_1.__decorate([
        analytics('atlassian.editor.format.strong.button')
    ], ToolbarTextFormatting.prototype, "handleBoldClick", void 0);
    tslib_1.__decorate([
        analytics('atlassian.editor.format.em.button')
    ], ToolbarTextFormatting.prototype, "handleItalicClick", void 0);
    return ToolbarTextFormatting;
}(PureComponent));
export default ToolbarTextFormatting;
//# sourceMappingURL=index.js.map