import * as tslib_1 from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import MoreIcon from '@atlaskit/icon/glyph/editor/more';
import { analyticsService } from '../../../../analytics';
import { toggleUnderline, toggleStrikethrough, toggleCode, clearFormatting, tooltip, } from '../../../../keymaps';
import ToolbarButton from '../../../../ui/ToolbarButton';
import DropdownMenu from '../../../../ui/DropdownMenu';
import { TriggerWrapper, Wrapper, Separator } from '../../../../ui/styles';
var ToolbarAdvancedTextFormatting = /** @class */ (function (_super) {
    tslib_1.__extends(ToolbarAdvancedTextFormatting, _super);
    function ToolbarAdvancedTextFormatting() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isOpen: false,
        };
        _this.onOpenChange = function (attrs) {
            _this.setState({
                isOpen: attrs.isOpen,
            });
        };
        _this.handleTriggerClick = function () {
            _this.onOpenChange({ isOpen: !_this.state.isOpen });
        };
        _this.createItems = function () {
            var _a = _this.props, pluginStateTextFormatting = _a.pluginStateTextFormatting, pluginStateClearFormatting = _a.pluginStateClearFormatting;
            var items = [];
            if (pluginStateTextFormatting) {
                var _b = _this.state, underlineHidden = _b.underlineHidden, codeHidden = _b.codeHidden, strikeHidden = _b.strikeHidden, subscriptHidden = _b.subscriptHidden, superscriptHidden = _b.superscriptHidden;
                if (!underlineHidden) {
                    _this.addRecordToItems(items, 'Underline', 'underline', tooltip(toggleUnderline, true));
                }
                if (!strikeHidden) {
                    _this.addRecordToItems(items, 'Strikethrough', 'strike', tooltip(toggleStrikethrough, true));
                }
                if (!codeHidden) {
                    _this.addRecordToItems(items, 'Code', 'code', tooltip(toggleCode, true));
                }
                if (!subscriptHidden) {
                    _this.addRecordToItems(items, 'Subscript', 'subscript');
                }
                if (!superscriptHidden) {
                    _this.addRecordToItems(items, 'Superscript', 'superscript');
                }
            }
            if (pluginStateClearFormatting) {
                _this.addRecordToItems(items, 'Clear Formatting', 'clearFormatting', tooltip(clearFormatting, true));
            }
            return [
                {
                    items: items,
                },
            ];
        };
        _this.addRecordToItems = function (items, content, value, tooltipDescription) {
            items.push({
                content: content,
                value: value,
                isActive: _this.state[value + "Active"],
                isDisabled: _this.state[value + "Disabled"],
                tooltipDescription: tooltipDescription,
                tooltipPosition: 'right',
            });
        };
        _this.handlePluginStateTextFormattingChange = function (pluginState) {
            _this.setState({
                underlineActive: pluginState.underlineActive,
                underlineDisabled: pluginState.underlineDisabled,
                underlineHidden: pluginState.underlineHidden,
                codeActive: pluginState.codeActive,
                codeDisabled: pluginState.codeDisabled,
                codeHidden: pluginState.codeHidden,
                strikethroughActive: pluginState.strikeActive,
                strikethroughDisabled: pluginState.strikeDisabled,
                strikeHidden: pluginState.strikeHidden,
                subscriptActive: pluginState.subscriptActive,
                subscriptDisabled: pluginState.subscriptDisabled,
                subscriptHidden: pluginState.subscriptHidden,
                superscriptActive: pluginState.superscriptActive,
                superscriptDisabled: pluginState.superscriptDisabled,
                superscriptHidden: pluginState.superscriptHidden,
            });
        };
        _this.handlePluginStateClearFormattingChange = function (pluginState) {
            _this.setState({
                clearFormattingDisabled: !pluginState.formattingIsPresent,
            });
        };
        _this.onItemActivated = function (_a) {
            var item = _a.item;
            analyticsService.trackEvent("atlassian.editor.format." + item.value + ".button");
            var _b = _this.props, pluginStateTextFormatting = _b.pluginStateTextFormatting, pluginStateClearFormatting = _b.pluginStateClearFormatting;
            switch (item.value) {
                case 'underline':
                    pluginStateTextFormatting.toggleUnderline(_this.props.editorView);
                    break;
                case 'code':
                    pluginStateTextFormatting.toggleCode(_this.props.editorView);
                    break;
                case 'strike':
                    pluginStateTextFormatting.toggleStrike(_this.props.editorView);
                    break;
                case 'subscript':
                    pluginStateTextFormatting.toggleSubscript(_this.props.editorView);
                    break;
                case 'superscript':
                    pluginStateTextFormatting.toggleSuperscript(_this.props.editorView);
                    break;
                case 'clearFormatting':
                    pluginStateClearFormatting.clearFormatting(_this.props.editorView);
                    break;
            }
            _this.setState({ isOpen: false });
        };
        return _this;
    }
    ToolbarAdvancedTextFormatting.prototype.componentDidMount = function () {
        var _a = this.props, pluginStateTextFormatting = _a.pluginStateTextFormatting, pluginStateClearFormatting = _a.pluginStateClearFormatting;
        if (pluginStateTextFormatting) {
            pluginStateTextFormatting.subscribe(this.handlePluginStateTextFormattingChange);
        }
        if (pluginStateClearFormatting) {
            pluginStateClearFormatting.subscribe(this.handlePluginStateClearFormattingChange);
        }
    };
    ToolbarAdvancedTextFormatting.prototype.componentWillUnmount = function () {
        var _a = this.props, pluginStateTextFormatting = _a.pluginStateTextFormatting, pluginStateClearFormatting = _a.pluginStateClearFormatting;
        if (pluginStateTextFormatting) {
            pluginStateTextFormatting.unsubscribe(this.handlePluginStateTextFormattingChange);
        }
        if (pluginStateClearFormatting) {
            pluginStateClearFormatting.unsubscribe(this.handlePluginStateClearFormattingChange);
        }
    };
    ToolbarAdvancedTextFormatting.prototype.render = function () {
        var _this = this;
        var _a = this.state, isOpen = _a.isOpen, codeActive = _a.codeActive, underlineActive = _a.underlineActive, strikethroughActive = _a.strikethroughActive, subscriptActive = _a.subscriptActive, superscriptActive = _a.superscriptActive, codeDisabled = _a.codeDisabled, underlineDisabled = _a.underlineDisabled, strikethroughDisabled = _a.strikethroughDisabled, clearFormattingDisabled = _a.clearFormattingDisabled, subscriptDisabled = _a.subscriptDisabled, superscriptDisabled = _a.superscriptDisabled;
        var _b = this.props, popupsMountPoint = _b.popupsMountPoint, popupsBoundariesElement = _b.popupsBoundariesElement, popupsScrollableElement = _b.popupsScrollableElement, isReducedSpacing = _b.isReducedSpacing;
        var items = this.createItems();
        var toolbarButtonFactory = function (disabled) { return (React.createElement(ToolbarButton, { spacing: isReducedSpacing ? 'none' : 'default', selected: isOpen ||
                underlineActive ||
                codeActive ||
                strikethroughActive ||
                subscriptActive ||
                superscriptActive, disabled: disabled, onClick: _this.handleTriggerClick, iconBefore: React.createElement(TriggerWrapper, null,
                React.createElement(MoreIcon, { label: "Open or close advance text formatting dropdown" })) })); };
        if (!this.props.isDisabled &&
            !(strikethroughDisabled &&
                clearFormattingDisabled &&
                codeDisabled &&
                subscriptDisabled &&
                superscriptDisabled &&
                underlineDisabled) &&
            items[0].items.length > 0) {
            return (React.createElement(Wrapper, null,
                React.createElement(DropdownMenu, { items: items, onItemActivated: this.onItemActivated, onOpenChange: this.onOpenChange, mountTo: popupsMountPoint, boundariesElement: popupsBoundariesElement, scrollableElement: popupsScrollableElement, isOpen: isOpen, fitHeight: 188, fitWidth: 136 }, toolbarButtonFactory(false)),
                React.createElement(Separator, null)));
        }
        else {
            return (React.createElement(Wrapper, null,
                React.createElement("div", null, toolbarButtonFactory(true)),
                React.createElement(Separator, null)));
        }
    };
    return ToolbarAdvancedTextFormatting;
}(PureComponent));
export default ToolbarAdvancedTextFormatting;
//# sourceMappingURL=index.js.map