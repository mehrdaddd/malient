import { Plugin, PluginKey } from 'prosemirror-state';
import { clearFormatting, FORMATTING_MARK_TYPES, FORMATTING_NODE_TYPES, } from '../commands/clear-formatting';
var ClearFormattingState = /** @class */ (function () {
    function ClearFormattingState(state) {
        var _this = this;
        this.formattingIsPresent = false;
        this.changeHandlers = [];
        this.blockStylingIsPresent = function () {
            var state = _this.state;
            var _a = state.selection, from = _a.from, to = _a.to;
            var isBlockStyling = false;
            state.doc.nodesBetween(from, to, function (node, pos) {
                if (FORMATTING_NODE_TYPES.indexOf(node.type.name) !== -1) {
                    isBlockStyling = true;
                    return false;
                }
                return true;
            });
            return isBlockStyling;
        };
        this.changeHandlers = [];
        this.update(state);
    }
    ClearFormattingState.prototype.subscribe = function (cb) {
        this.changeHandlers.push(cb);
        cb(this);
    };
    ClearFormattingState.prototype.unsubscribe = function (cb) {
        this.changeHandlers = this.changeHandlers.filter(function (ch) { return ch !== cb; });
    };
    ClearFormattingState.prototype.update = function (newEditorState) {
        var _this = this;
        this.state = newEditorState;
        var state = this.state;
        this.activeMarkTypes = FORMATTING_MARK_TYPES.filter(function (mark) {
            return state.schema.marks[mark] && _this.markIsActive(state.schema.marks[mark]);
        });
        var formattingIsPresent = this.activeMarkTypes.length > 0 || this.blockStylingIsPresent();
        if (formattingIsPresent !== this.formattingIsPresent) {
            this.formattingIsPresent = formattingIsPresent;
            this.triggerOnChange();
        }
    };
    ClearFormattingState.prototype.clearFormatting = function (view) {
        clearFormatting()(view.state, view.dispatch);
    };
    ClearFormattingState.prototype.triggerOnChange = function () {
        var _this = this;
        this.changeHandlers.forEach(function (cb) { return cb(_this); });
    };
    ClearFormattingState.prototype.markIsActive = function (mark) {
        var state = this.state;
        var _a = state.selection, from = _a.from, to = _a.to, empty = _a.empty;
        if (empty) {
            return !!mark.isInSet(state.selection.$from.marks());
        }
        return state.doc.rangeHasMark(from, to, mark);
    };
    return ClearFormattingState;
}());
export { ClearFormattingState };
export var stateKey = new PluginKey('clearFormattingPlugin');
export var plugin = new Plugin({
    state: {
        init: function (config, state) {
            return new ClearFormattingState(state);
        },
        apply: function (tr, pluginState, oldState, newState) {
            pluginState.update(newState);
            return pluginState;
        },
    },
    key: stateKey,
});
//# sourceMappingURL=clear-formatting.js.map