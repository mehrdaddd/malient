import * as React from 'react';
import { em, strong, strike, subsup, underline, code, } from '@atlaskit/editor-common';
import { ButtonGroup } from '../../ui/styles';
import { plugin as textFormattingPlugin, stateKey as textFormattingStateKey, } from './pm-plugins/main';
import { plugin as clearFormattingPlugin, stateKey as clearFormattingStateKey, } from './pm-plugins/clear-formatting';
import textFormattingCursorPlugin from './pm-plugins/cursor';
import textFormattingInputRulePlugin from './pm-plugins/input-rule';
import clearFormattingKeymapPlugin from './pm-plugins/clear-formatting-keymap';
import textFormattingSmartInputRulePlugin from './pm-plugins/smart-input-rule';
import ToolbarTextFormatting from './ui/ToolbarTextFormatting';
import ToolbarAdvancedTextFormatting from './ui/ToolbarAdvancedTextFormatting';
var textFormatting = function (options) { return ({
    marks: function () {
        return [
            { name: 'em', mark: em, rank: 200 },
            { name: 'strong', mark: strong, rank: 300 },
            { name: 'strike', mark: strike, rank: 400 },
        ]
            .concat(options.disableCode ? [] : { name: 'code', mark: code, rank: 700 })
            .concat(options.disableSuperscriptAndSubscript
            ? []
            : { name: 'subsup', mark: subsup, rank: 500 })
            .concat(options.disableUnderline
            ? []
            : { name: 'underline', mark: underline, rank: 600 });
    },
    pmPlugins: function () {
        return [
            { rank: 800, plugin: function () { return textFormattingPlugin; } },
            { rank: 805, plugin: function () { return textFormattingCursorPlugin; } },
            {
                rank: 810,
                plugin: function (_a) {
                    var schema = _a.schema;
                    return textFormattingInputRulePlugin(schema);
                },
            },
            {
                rank: 811,
                plugin: function (_a) {
                    var schema = _a.schema;
                    return !options.disableSmartTextCompletion
                        ? textFormattingSmartInputRulePlugin
                        : undefined;
                },
            },
            { rank: 820, plugin: function () { return clearFormattingPlugin; } },
            {
                rank: 830,
                plugin: function (_a) {
                    var schema = _a.schema;
                    return clearFormattingKeymapPlugin(schema);
                },
            },
        ];
    },
    primaryToolbarComponent: function (_a) {
        var editorView = _a.editorView, popupsMountPoint = _a.popupsMountPoint, popupsScrollableElement = _a.popupsScrollableElement, isToolbarReducedSpacing = _a.isToolbarReducedSpacing, disabled = _a.disabled;
        var textFormattingPluginState = textFormattingStateKey.getState(editorView.state);
        var clearFormattingPluginState = clearFormattingStateKey.getState(editorView.state);
        return (React.createElement(ButtonGroup, { width: isToolbarReducedSpacing ? 'small' : 'large' },
            React.createElement(ToolbarTextFormatting, { disabled: disabled, editorView: editorView, pluginState: textFormattingPluginState, isReducedSpacing: isToolbarReducedSpacing }),
            React.createElement(ToolbarAdvancedTextFormatting, { editorView: editorView, isDisabled: disabled, isReducedSpacing: isToolbarReducedSpacing, pluginStateTextFormatting: textFormattingPluginState, pluginStateClearFormatting: clearFormattingPluginState, popupsMountPoint: popupsMountPoint, popupsScrollableElement: popupsScrollableElement })));
    },
}); };
export default textFormatting;
//# sourceMappingURL=index.js.map