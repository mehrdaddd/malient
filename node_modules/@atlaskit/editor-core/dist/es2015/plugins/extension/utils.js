import { NodeSelection } from 'prosemirror-state';
import { findParentNodeOfType, findSelectedNodeOfType, } from 'prosemirror-utils';
export var getExtensionNode = function (state) {
    var selection = state.selection, schema = state.schema;
    var _a = schema.nodes, extension = _a.extension, inlineExtension = _a.inlineExtension, bodiedExtension = _a.bodiedExtension;
    if (selection instanceof NodeSelection) {
        var selectedNode = findSelectedNodeOfType([
            extension,
            inlineExtension,
            bodiedExtension,
        ])(selection);
        if (selectedNode) {
            return selectedNode.node;
        }
    }
    var parent = findParentNodeOfType(bodiedExtension)(selection);
    if (parent) {
        return parent.node;
    }
};
//# sourceMappingURL=utils.js.map