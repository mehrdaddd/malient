import { Schema } from 'prosemirror-model';
import { EditorState, Plugin, PluginKey } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
export declare type StateChangeHandler = (state: ListsState) => any;
/**
 *
 * Plugin State
 *
 */
export declare class ListsState {
    private changeHandlers;
    bulletListActive: boolean;
    bulletListDisabled: boolean;
    bulletListHidden: boolean;
    orderedListActive: boolean;
    orderedListDisabled: boolean;
    orderedListHidden: boolean;
    constructor(state: EditorState);
    subscribe(cb: StateChangeHandler): void;
    unsubscribe(cb: StateChangeHandler): void;
    toggleBulletList(view: EditorView): boolean;
    toggleOrderedList(view: EditorView): boolean;
    update(newEditorState: any): void;
    private triggerOnChange();
    private isWrappingPossible(nodeType, state);
}
export declare const stateKey: PluginKey;
export declare const plugin: Plugin;
declare const plugins: (schema: Schema) => Plugin[];
export default plugins;
