import * as tslib_1 from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import BulletListIcon from '@atlaskit/icon/glyph/editor/bullet-list';
import NumberListIcon from '@atlaskit/icon/glyph/editor/number-list';
import TaskIcon from '@atlaskit/icon/glyph/editor/task';
import ExpandIcon from '@atlaskit/icon/glyph/chevron-down';
import { analyticsDecorator as analytics } from '../../../../analytics';
import { toggleBulletList, toggleOrderedList, tooltip, } from '../../../../keymaps';
import ToolbarButton from '../../../../ui/ToolbarButton';
import DropdownMenu from '../../../../ui/DropdownMenu';
import { ButtonGroup, Separator, Wrapper, ExpandIconWrapper, } from '../../../../ui/styles';
import { changeToTaskDecision } from '../../../tasks-and-decisions/commands';
var ToolbarLists = /** @class */ (function (_super) {
    tslib_1.__extends(ToolbarLists, _super);
    function ToolbarLists() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            bulletListActive: false,
            bulletListDisabled: false,
            bulletListHidden: false,
            orderedListActive: false,
            orderedListDisabled: false,
            orderedListHidden: false,
            isDropdownOpen: false,
        };
        _this.handleTriggerClick = function () {
            var isDropdownOpen = !_this.state.isDropdownOpen;
            _this.setState({
                isDropdownOpen: isDropdownOpen,
            });
        };
        _this.createItems = function () {
            var _a = _this.state, bulletListDisabled = _a.bulletListDisabled, orderedListDisabled = _a.orderedListDisabled, bulletListActive = _a.bulletListActive, orderedListActive = _a.orderedListActive;
            var items = [];
            items.push({
                content: 'Bullet List',
                value: { name: 'bullet_list' },
                isDisabled: bulletListDisabled,
                isActive: bulletListActive,
                tooltipDescription: 'Numbered list',
                tooltipPosition: 'right',
                elemBefore: React.createElement(BulletListIcon, { label: "Numbered list" }),
            });
            items.push({
                content: 'Ordered List',
                value: { name: 'ordered_list' },
                isDisabled: orderedListDisabled,
                isActive: orderedListActive,
                tooltipDescription: 'Ordered list',
                tooltipPosition: 'right',
                elemBefore: React.createElement(NumberListIcon, { label: "Ordered list" }),
            });
            if (_this.props.enableTaskToolbar) {
                items.push({
                    content: 'Create action',
                    value: { name: 'action' },
                    isDisabled: false,
                    isActive: false,
                    tooltipDescription: 'Create action',
                    tooltipPosition: 'right',
                    elemBefore: React.createElement(TaskIcon, { label: "Create action" }),
                });
            }
            return [
                {
                    items: items,
                },
            ];
        };
        _this.handlePluginStateChange = function (pluginState) {
            _this.setState({
                bulletListActive: pluginState.bulletListActive,
                bulletListDisabled: pluginState.bulletListDisabled,
                bulletListHidden: pluginState.bulletListHidden,
                orderedListActive: pluginState.orderedListActive,
                orderedListDisabled: pluginState.orderedListDisabled,
                orderedListHidden: pluginState.orderedListHidden,
            });
        };
        _this.handleFuturePluginStateChange = function (pluginState) {
            _this.setState({
                bulletListActive: pluginState.bulletListActive,
                bulletListDisabled: pluginState.bulletListDisabled,
                bulletListHidden: pluginState.bulletListHidden,
                orderedListActive: pluginState.orderedListActive,
                orderedListDisabled: pluginState.orderedListDisabled,
                orderedListHidden: pluginState.orderedListHidden,
            });
        };
        _this.handleBulletListClick = function () {
            if (!_this.state.bulletListDisabled) {
                if (_this.props.editorView) {
                    return _this.props.pluginState.toggleBulletList(_this.props.editorView);
                }
                return _this.props.pluginState.toggleBulletList(_this.props.editorView);
            }
            return false;
        };
        _this.handleOrderedListClick = function () {
            if (!_this.state.orderedListDisabled) {
                if (_this.props.editorView) {
                    return _this.props.pluginState.toggleOrderedList(_this.props.editorView);
                }
                return _this.props.pluginState.toggleOrderedList(_this.props.editorView);
            }
            return false;
        };
        _this.handleCreateAction = function () {
            var editorView = _this.props.editorView;
            if (!editorView) {
                return false;
            }
            changeToTaskDecision(editorView, 'taskList');
            return true;
        };
        _this.onItemActivated = function (_a) {
            var item = _a.item;
            _this.setState({ isDropdownOpen: false });
            switch (item.value.name) {
                case 'bullet_list':
                    _this.handleBulletListClick();
                    break;
                case 'ordered_list':
                    _this.handleOrderedListClick();
                    break;
                case 'action':
                    _this.handleCreateAction();
                    break;
            }
        };
        return _this;
    }
    ToolbarLists.prototype.componentDidMount = function () {
        if (this.props.editorView) {
            this.props.pluginState.subscribe(this.handleFuturePluginStateChange);
        }
        else {
            this.props.pluginState.subscribe(this.handlePluginStateChange);
        }
    };
    ToolbarLists.prototype.componentWillUnmount = function () {
        if (this.props.editorView) {
            this.props.pluginState.unsubscribe(this.handleFuturePluginStateChange);
        }
        else {
            this.props.pluginState.unsubscribe(this.handlePluginStateChange);
        }
    };
    ToolbarLists.prototype.render = function () {
        var _a = this.props, disabled = _a.disabled, isSmall = _a.isSmall, isReducedSpacing = _a.isReducedSpacing, isSeparator = _a.isSeparator, enableTaskToolbar = _a.enableTaskToolbar;
        var _b = this.state, bulletListActive = _b.bulletListActive, bulletListDisabled = _b.bulletListDisabled, orderedListActive = _b.orderedListActive, orderedListDisabled = _b.orderedListDisabled, isDropdownOpen = _b.isDropdownOpen;
        if (!isSmall) {
            return (React.createElement(ButtonGroup, { width: isReducedSpacing ? 'small' : 'large' },
                this.state.bulletListHidden ? null : (React.createElement(ToolbarButton, { spacing: isReducedSpacing ? 'none' : 'default', onClick: this.handleBulletListClick, selected: bulletListActive, disabled: bulletListDisabled || disabled, title: tooltip(toggleBulletList), iconBefore: React.createElement(BulletListIcon, { label: "Unordered list" }) })),
                this.state.orderedListHidden ? null : (React.createElement(ToolbarButton, { spacing: isReducedSpacing ? 'none' : 'default', onClick: this.handleOrderedListClick, selected: orderedListActive, disabled: orderedListDisabled || disabled, title: tooltip(toggleOrderedList), iconBefore: React.createElement(NumberListIcon, { label: "Ordered list" }) })),
                enableTaskToolbar && (React.createElement(ToolbarButton, { spacing: isReducedSpacing ? 'none' : 'default', onClick: this.handleCreateAction, disabled: disabled, title: "Create action []", iconBefore: React.createElement(TaskIcon, { label: "Create action" }) })),
                isSeparator && React.createElement(Separator, null)));
        }
        else {
            var items = this.createItems();
            var _c = this.props, popupsMountPoint = _c.popupsMountPoint, popupsBoundariesElement = _c.popupsBoundariesElement, popupsScrollableElement = _c.popupsScrollableElement;
            return (React.createElement(Wrapper, null,
                React.createElement(DropdownMenu, { items: items, onItemActivated: this.onItemActivated, mountTo: popupsMountPoint, boundariesElement: popupsBoundariesElement, scrollableElement: popupsScrollableElement, isOpen: isDropdownOpen, fitHeight: 188, fitWidth: 175 },
                    React.createElement(ToolbarButton, { spacing: isReducedSpacing ? 'none' : 'default', selected: bulletListActive || orderedListActive, disabled: disabled, onClick: this.handleTriggerClick, iconBefore: React.createElement(Wrapper, null,
                            React.createElement(BulletListIcon, { label: "Add list" }),
                            React.createElement(ExpandIconWrapper, null,
                                React.createElement(ExpandIcon, { label: "Open or close insert block dropdown" }))) })),
                isSeparator && React.createElement(Separator, null)));
        }
    };
    tslib_1.__decorate([
        analytics('atlassian.editor.format.list.bullet.button')
    ], ToolbarLists.prototype, "handleBulletListClick", void 0);
    tslib_1.__decorate([
        analytics('atlassian.editor.format.list.numbered.button')
    ], ToolbarLists.prototype, "handleOrderedListClick", void 0);
    tslib_1.__decorate([
        analytics('atlassian.fabric.action.trigger.button')
    ], ToolbarLists.prototype, "handleCreateAction", void 0);
    return ToolbarLists;
}(PureComponent));
export default ToolbarLists;
//# sourceMappingURL=index.js.map