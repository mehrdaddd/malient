import * as tslib_1 from "tslib";
import { borderRadius, colors } from '@atlaskit/theme';
import * as cx from 'classnames';
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { PureComponent } from 'react';
import { style, keyframes } from 'typestyle';
var akBorderRadius = borderRadius();
var akColorN900 = colors.N900;
var animateDown = keyframes({
    '0%': {
        opacity: 0,
        transform: 'translateY(0)',
        animationTimingFunction: 'cubic-bezier(0.23830050393398, 0, 0.25586732616931, 0.79011192334632)',
    },
    '20%': {
        opacity: 0.8,
        transform: 'translateY(8px)',
        animationTimingFunction: 'cubic-bezier(0.21787238302442, 0.98324004924648, 0.58694150667646, 1)',
    },
    '100%': {
        opacity: 1,
        transform: 'translateY(10px)',
    },
});
var animateUp = keyframes({
    '0%': {
        opacity: 0,
        transform: 'translateY(0)',
        animationTimingFunction: 'cubic-bezier(0.23830050393398, 0, 0.25586732616931, 0.79011192334632)',
    },
    '20%': {
        opacity: 0.8,
        transform: 'translateY(-8px)',
        animationTimingFunction: 'cubic-bezier(0.21787238302442, 0.98324004924648, 0.58694150667646, 1)',
    },
    '100%': {
        opacity: 1,
        transform: 'translateY(-10px)',
    },
});
var tooltip = style({
    position: 'fixed',
    background: akColorN900,
    boxSizing: 'border-box',
    color: '#fff',
    padding: '5px',
    borderRadius: akBorderRadius,
    maxWidth: '150px',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    $nest: {
        ul: {
            listStyle: 'none',
            margin: 0,
            padding: 0,
            textAlign: 'left',
        },
        li: {
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            marginTop: 0,
            fontWeight: 600,
        },
        'li:first-child': {
            textTransform: 'capitalize',
            fontWeight: 800,
        },
        '&.animateDown': {
            transform: 'translateY(10px)',
            animation: animateDown + " 1.1s 200ms backwards",
        },
        '&.animateUp': {
            transform: 'translateY(-10px)',
            animation: animateUp + " 1.1s 200ms backwards",
        },
    },
});
var ReactionTooltip = /** @class */ (function (_super) {
    tslib_1.__extends(ReactionTooltip, _super);
    function ReactionTooltip(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            animateDown: true,
        };
        return _this;
    }
    ReactionTooltip.prototype.componentDidMount = function () {
        this.updatePosition();
    };
    ReactionTooltip.prototype.componentDidUpdate = function () {
        this.updatePosition();
    };
    ReactionTooltip.prototype.updatePosition = function () {
        var target = ReactDOM.findDOMNode(this.props.target);
        var popup = ReactDOM.findDOMNode(this);
        var targetRect = target.getBoundingClientRect();
        var popupRect = popup.getBoundingClientRect();
        var bounding = document.body.getBoundingClientRect();
        var top = targetRect.top + targetRect.height;
        if (top + popupRect.height > bounding.bottom) {
            top = targetRect.top - popupRect.height;
            this.setState({
                animateDown: false,
            });
        }
        popup.style.left = targetRect.left + "px";
        popup.style.top = top + "px";
    };
    ReactionTooltip.prototype.render = function () {
        var _a = this.props, emojiName = _a.emojiName, users = _a.users;
        var classNames = cx(tooltip, 'reaction-tooltip', {
            animateDown: this.state.animateDown,
            animateUp: !this.state.animateDown,
        });
        var overflowCount = users.length - 10;
        var overflowLabel = overflowCount > 0 ? React.createElement("li", null,
            "+",
            overflowCount,
            "...") : null;
        return (React.createElement("span", { className: classNames },
            React.createElement("ul", null,
                emojiName ? React.createElement("li", null, emojiName) : null,
                users.slice(0, 9).map(function (user, index) {
                    return React.createElement("li", { key: index }, user.displayName);
                }),
                overflowLabel)));
    };
    return ReactionTooltip;
}(PureComponent));
export default ReactionTooltip;
//# sourceMappingURL=reaction-tooltip.js.map