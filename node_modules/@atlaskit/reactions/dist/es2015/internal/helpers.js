export var isLeftClick = function (event) {
    return event.button === 0 &&
        !event.altKey &&
        !event.ctrlKey &&
        !event.metaKey &&
        !event.shiftKey;
};
export var findIndex = function (array, predicate) {
    var index = -1;
    array.some(function (item, i) {
        if (predicate(item)) {
            index = i;
            return true;
        }
        return false;
    });
    return index;
};
export var updateReadonlyArray = function (array, index, updater) {
    return array.map(function (value, i) {
        if (i === index) {
            return updater(value);
        }
        return value;
    });
};
export var unique = function (array, predicate) {
    var seen = {};
    return array.filter(function (item) { return (seen[predicate(item)] ? false : (seen[predicate(item)] = true)); });
};
export var equalEmojiId = function (l, r) {
    if (isEmojiId(l) && isEmojiId(r)) {
        return l === r || (l && r && l.id === r.id && l.shortName === r.shortName);
    }
    else {
        return l === r;
    }
};
var isEmojiId = function (emojiId) {
    return emojiId.id !== undefined;
};
export var compareEmojiId = function (l, r) {
    return l.localeCompare(r);
};
export var sortByRelevance = function (a, b) {
    if (a.count > b.count) {
        return -1;
    }
    else if (a.count < b.count) {
        return 1;
    }
    else {
        return compareEmojiId(a.emojiId, b.emojiId);
    }
};
export var sortByPreviousPosition = function (reactions) {
    var indexes = reactions.reduce(function (map, reaction, index) {
        map[reaction.emojiId] = index;
        return map;
    }, {});
    var getPosition = function (_a) {
        var emojiId = _a.emojiId;
        return indexes[emojiId] === undefined ? reactions.length : indexes[emojiId];
    };
    return function (a, b) { return getPosition(a) - getPosition(b); };
};
export var isPromise = function (p) {
    return !!(p && p.then);
};
//# sourceMappingURL=helpers.js.map