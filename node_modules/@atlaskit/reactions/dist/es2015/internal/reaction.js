import * as tslib_1 from "tslib";
import { ResourcedEmoji } from '@atlaskit/emoji';
import { borderRadius, colors } from '@atlaskit/theme';
import * as cx from 'classnames';
import * as React from 'react';
import { PureComponent } from 'react';
import { style } from 'typestyle';
import { isLeftClick } from './helpers';
import { analyticsService } from '../analytics';
import ReactionTooltip from './reaction-tooltip';
import { isPromise } from './helpers';
import Counter from './counter';
import FlashAnimation from './flash-animation';
var akBorderRadius = borderRadius();
var akColorN30A = colors.N30A;
var akColorN400 = colors.N400;
var emojiStyle = style({
    transformOrigin: 'center center 0',
    margin: '0 4px',
});
var reactionStyle = style({
    outline: 'none',
    display: 'flex',
    flexDirection: 'row',
    minWidth: '36px',
    height: '24px',
    lineHeight: '24px',
    background: 'transparent',
    border: '0',
    borderRadius: akBorderRadius,
    color: akColorN400,
    cursor: 'pointer',
    padding: 0,
    margin: 0,
    transition: '200ms ease-in-out',
    $nest: { '&:hover': { background: akColorN30A } },
});
var flashStyle = style({
    display: 'flex',
    flexDirection: 'row',
    borderRadius: akBorderRadius,
});
var counterStyle = style({
    padding: '0 4px 0 0',
});
var Reaction = /** @class */ (function (_super) {
    tslib_1.__extends(Reaction, _super);
    function Reaction(props) {
        var _this = _super.call(this, props) || this;
        _this.handleMouseDown = function (event) {
            event.preventDefault();
            if (_this.props.onClick && isLeftClick(event)) {
                var reaction = _this.props.reaction;
                analyticsService.trackEvent('reactions.reaction.click', reaction);
                _this.props.onClick(_this.props.reaction.emojiId, event);
            }
        };
        _this.handleMouseOver = function (event) {
            event.preventDefault();
            var _a = _this.props, onMouseOver = _a.onMouseOver, reaction = _a.reaction;
            if (onMouseOver) {
                if (!reaction.users || !reaction.users.length) {
                    onMouseOver(_this.props.reaction, event);
                }
            }
        };
        _this.handleFlashRef = function (flash) {
            _this.flashRef = flash;
        };
        _this.flash = function () {
            if (_this.flashRef) {
                _this.flashRef.flash();
            }
        };
        _this.state = {};
        return _this;
    }
    Reaction.prototype.componentDidUpdate = function (_a) {
        var prevReaction = _a.reaction;
        if (!prevReaction.reacted && this.props.reaction.reacted) {
            this.flash();
        }
    };
    Reaction.prototype.componentDidMount = function () {
        var _this = this;
        this.mounted = true;
        this.props.emojiProvider.then(function (emojiResource) {
            var foundEmoji = emojiResource.findByEmojiId({
                shortName: '',
                id: _this.props.reaction.emojiId,
            });
            if (isPromise(foundEmoji)) {
                foundEmoji.then(function (emoji) {
                    if (emoji) {
                        if (_this.mounted) {
                            _this.setState({
                                emojiName: emoji.name,
                            });
                        }
                    }
                });
            }
            else if (foundEmoji) {
                _this.setState({
                    emojiName: foundEmoji.name,
                });
            }
        });
        if (this.props.flashOnMount && this.props.reaction.reacted) {
            this.flash();
        }
    };
    Reaction.prototype.componentWillUnmount = function () {
        this.mounted = false;
    };
    Reaction.prototype.render = function () {
        var _a = this.props, emojiProvider = _a.emojiProvider, reaction = _a.reaction, classNameProp = _a.className;
        var emojiName = this.state.emojiName;
        var classNames = cx(reactionStyle, classNameProp);
        var emojiId = { id: reaction.emojiId, shortName: '' };
        return (React.createElement(ReactionTooltip, { emojiName: emojiName, reaction: reaction },
            React.createElement("button", { className: classNames, onMouseUp: this.handleMouseDown, onMouseOver: this.handleMouseOver },
                React.createElement(FlashAnimation, { ref: this.handleFlashRef, className: flashStyle },
                    React.createElement("div", { className: emojiStyle },
                        React.createElement(ResourcedEmoji, { emojiProvider: emojiProvider, emojiId: emojiId, fitToHeight: 16 })),
                    React.createElement(Counter, { className: counterStyle, value: reaction.count, highlight: reaction.reacted })))));
    };
    Reaction.defaultProps = {
        flash: false,
        className: undefined,
        onMouseOver: undefined,
        flashOnMount: false,
    };
    return Reaction;
}(PureComponent));
export default Reaction;
//# sourceMappingURL=reaction.js.map