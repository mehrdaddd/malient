import { ReactionsProvider, Reactions, Listener, ObjectReactionKey, ReactionSummary, SubscriptionHandler, ReactionsState } from './types';
export default abstract class AbstractReactionsResource implements ReactionsProvider {
    protected excludeArisFromAutoPoll: string[];
    protected cachedReactions: {
        readonly [key: string]: ReactionsState;
    };
    protected subscribers: {
        [ari: string]: Listener[];
    };
    protected lastActionForAri: {
        [ari: string]: number;
    };
    private batchedKeys;
    private debounced;
    private loadingStatus;
    private errorStatus;
    protected autoPoll(autoPollInterval: any): void;
    private findReaction(key, emojiId);
    private findReactionIndex(key, emojiId);
    private hasReacted(key, emojiId);
    toggleReaction(containerAri: string, ari: string, emojiId: string): Promise<ReactionsState>;
    notifyUpdated(containerAri: string, ari: string, state: Readonly<ReactionsState>): void;
    objectReactionKeyToString(key: ObjectReactionKey): string;
    objectReactionKey(containerAri: string, ari: string): string;
    subscribe(subscriptionKey: ObjectReactionKey, handler: SubscriptionHandler): void;
    unsubscribe(subscriptionKey: ObjectReactionKey, handler: Function): void;
    private queueAri(subscriptionKey);
    private dequeueAri(subscriptionKey);
    private excludeAriFromAutoPoll(ari);
    private includeAriInAutoPoll(ari);
    protected optimisticAddReaction(containerAri: string, ari: string, emojiId: string): void;
    protected optimisticDeleteReaction(containerAri: string, ari: string, emojiId: string): void;
    abstract addReaction(containerAri: string, ari: string, emojiId: string): Promise<ReactionsState>;
    abstract deleteReaction(containerAri: string, ari: string, emojiId: string): Promise<ReactionsState>;
    abstract getReactions(keys: ObjectReactionKey[]): Promise<Reactions>;
    abstract getDetailedReaction(reaction: ReactionSummary): Promise<ReactionSummary>;
    abstract fetchReactionDetails(reaction: ReactionSummary): Promise<ReactionSummary>;
}
