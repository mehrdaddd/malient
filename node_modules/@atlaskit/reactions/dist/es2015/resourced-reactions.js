import * as tslib_1 from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import Reactions from './reactions';
var ResourcedReactions = /** @class */ (function (_super) {
    tslib_1.__extends(ResourcedReactions, _super);
    function ResourcedReactions(props) {
        var _this = _super.call(this, props) || this;
        _this.handleReactionClick = function (emojiId) {
            var reactionsProvider = _this.state.reactionsProvider;
            var _a = _this.props, containerAri = _a.containerAri, ari = _a.ari;
            if (reactionsProvider) {
                reactionsProvider.toggleReaction(containerAri, ari, emojiId);
            }
        };
        _this.handleReactionHover = function (reaction) {
            var reactionsProvider = _this.state.reactionsProvider;
            if (reactionsProvider) {
                reactionsProvider.fetchReactionDetails(reaction);
            }
        };
        _this.state = {
            reactionsProvider: null,
        };
        return _this;
    }
    ResourcedReactions.prototype.refreshReactions = function (reactionsProviderPromise) {
        var _this = this;
        if (reactionsProviderPromise) {
            reactionsProviderPromise.then(function (reactionsProvider) {
                _this.setState({
                    reactionsProvider: reactionsProvider,
                });
            });
        }
    };
    ResourcedReactions.prototype.componentDidMount = function () {
        if (!this.state.reactionsProvider) {
            this.refreshReactions(this.props.reactionsProvider);
        }
    };
    ResourcedReactions.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.reactionsProvider !== this.props.reactionsProvider) {
            this.refreshReactions(nextProps.reactionsProvider);
        }
    };
    ResourcedReactions.prototype.render = function () {
        var reactionsProvider = this.state.reactionsProvider;
        if (!reactionsProvider) {
            return null;
        }
        var _a = this.props, ari = _a.ari, containerAri = _a.containerAri, boundariesElement = _a.boundariesElement, emojiProvider = _a.emojiProvider, allowAllEmojis = _a.allowAllEmojis;
        return (React.createElement(Reactions, { ari: ari, containerAri: containerAri, emojiProvider: emojiProvider, reactionsProvider: reactionsProvider, onReactionClick: this.handleReactionClick, onReactionHover: this.handleReactionHover, boundariesElement: boundariesElement, allowAllEmojis: allowAllEmojis }));
    };
    return ResourcedReactions;
}(PureComponent));
export default ResourcedReactions;
//# sourceMappingURL=resourced-reactions.js.map