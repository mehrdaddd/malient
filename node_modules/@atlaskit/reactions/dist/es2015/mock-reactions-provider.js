import * as tslib_1 from "tslib";
import { equalEmojiId, findIndex, updateReadonlyArray, } from './internal/helpers';
import { default as AbstractReactionsProvider, ReactionStatus, } from './reactions-resource';
import { defaultReactionsByShortName } from './internal/selector';
var MockReactionsProvider = /** @class */ (function (_super) {
    tslib_1.__extends(MockReactionsProvider, _super);
    function MockReactionsProvider() {
        var _this = _super.call(this) || this;
        _this.cachedReactions = (_a = {},
            _a[_this.objectReactionKey('ari:cloud:owner:demo-cloud-id:container/1', 'ari:cloud:owner:demo-cloud-id:item/1')] = {
                status: ReactionStatus.ready,
                reactions: [
                    {
                        ari: 'ari:cloud:owner:demo-cloud-id:item/1',
                        containerAri: 'ari:cloud:owner:demo-cloud-id:container/1',
                        emojiId: defaultReactionsByShortName.get(':fire:').id,
                        count: 1,
                        reacted: true,
                    },
                    {
                        ari: 'ari:cloud:owner:demo-cloud-id:item/1',
                        containerAri: 'ari:cloud:owner:demo-cloud-id:container/1',
                        emojiId: defaultReactionsByShortName.get(':thumbsup:')
                            .id,
                        count: 9,
                        reacted: false,
                    },
                    {
                        ari: 'ari:cloud:owner:demo-cloud-id:item/1',
                        containerAri: 'ari:cloud:owner:demo-cloud-id:container/1',
                        emojiId: defaultReactionsByShortName.get(':thumbsdown:').id,
                        count: 5,
                        reacted: false,
                    },
                    {
                        ari: 'ari:cloud:owner:demo-cloud-id:item/1',
                        containerAri: 'ari:cloud:owner:demo-cloud-id:container/1',
                        emojiId: defaultReactionsByShortName.get(':heart_eyes:').id,
                        count: 100,
                        reacted: false,
                    },
                ],
            },
            _a);
        return _this;
        var _a;
    }
    MockReactionsProvider.prototype.getReactions = function (keys) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            keys.forEach(function (key) {
                if (!_this.cachedReactions[_this.objectReactionKey(key.containerAri, key.ari)]) {
                    _this.cachedReactions = tslib_1.__assign({}, _this.cachedReactions, (_a = {}, _a[_this.objectReactionKey(key.containerAri, key.ari)] = {
                        status: ReactionStatus.ready,
                        reactions: [],
                    }, _a));
                }
                var _a;
            });
            var results = {};
            Object.keys(_this.cachedReactions).forEach(function (cacheKey) {
                var objectReactions = _this.cachedReactions[cacheKey];
                if (objectReactions.status === ReactionStatus.ready) {
                    var ari = cacheKey.split('|')[1];
                    results[ari] = objectReactions.reactions;
                }
            });
            resolve(results);
        });
    };
    MockReactionsProvider.prototype.getDetailedReaction = function (reaction) {
        return new Promise(function (resolve, reject) {
            var users = [
                {
                    id: 'oscar',
                    displayName: 'Oscar Wallhult',
                },
                {
                    id: 'julien',
                    displayName: 'Julien Michel Hoarau',
                },
                {
                    id: 'craig',
                    displayName: 'Craig Petchell',
                },
                {
                    id: 'jerome',
                    displayName: 'Jerome Touffe-Blin',
                },
            ].slice(0, Math.floor(Math.random() * 3) + 1);
            resolve(tslib_1.__assign({}, reaction, { users: users }));
        });
    };
    MockReactionsProvider.prototype.fetchReactionDetails = function (reaction) {
        var _this = this;
        var containerAri = reaction.containerAri, ari = reaction.ari, emojiId = reaction.emojiId;
        return new Promise(function (resolve, reject) {
            _this.getDetailedReaction(reaction).then(function (reactionDetails) {
                if (!_this.cachedReactions[ari]) {
                    _this.cachedReactions = tslib_1.__assign({}, _this.cachedReactions, (_a = {}, _a[ari] = {
                        status: ReactionStatus.ready,
                        reactions: [],
                    }, _a));
                }
                var key = _this.objectReactionKey(containerAri, ari);
                var reactionsState = _this.cachedReactions[key];
                if (reactionsState.status === ReactionStatus.ready) {
                    var reactionIndex_1 = findIndex(reactionsState.reactions, function (r) { return r.emojiId === emojiId; });
                    setTimeout(function () {
                        if (reactionIndex_1 !== -1) {
                            reactionsState.reactions = updateReadonlyArray(reactionsState.reactions, reactionIndex_1, function (_) { return reactionDetails; });
                        }
                        else {
                            reactionsState.reactions = reactionsState.reactions.concat(reactionDetails);
                        }
                        _this.notifyUpdated(containerAri, ari, _this.cachedReactions[key]);
                        resolve(reactionDetails);
                    }, 1);
                }
                var _a;
            });
        });
    };
    MockReactionsProvider.prototype.addReaction = function (containerAri, ari, emojiId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var key = _this.objectReactionKey(containerAri, ari);
            var reactionsState = _this.cachedReactions[key];
            if (reactionsState.status === ReactionStatus.ready) {
                var index = findIndex(reactionsState.reactions, function (reaction) {
                    return equalEmojiId(reaction.emojiId, emojiId);
                });
                if (index !== -1) {
                    var reaction = reactionsState.reactions[index];
                    reaction.reacted = true;
                    reaction.count++;
                }
                else {
                    reactionsState.reactions = reactionsState.reactions.concat({
                        ari: ari,
                        containerAri: containerAri,
                        emojiId: emojiId,
                        count: 1,
                        reacted: true,
                    });
                }
            }
            resolve(_this.cachedReactions[key]);
        });
    };
    MockReactionsProvider.prototype.deleteReaction = function (containerAri, ari, emojiId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var key = _this.objectReactionKey(containerAri, ari);
            var reactionsState = _this.cachedReactions[key];
            if (reactionsState.status === ReactionStatus.ready) {
                var index_1 = findIndex(reactionsState.reactions, function (reaction) {
                    return equalEmojiId(reaction.emojiId, emojiId);
                });
                var reaction = reactionsState.reactions[index_1];
                reaction.reacted = false;
                reaction.count--;
                if (reaction.count < 1) {
                    reactionsState.reactions = reactionsState.reactions.filter(function (value, i) { return index_1 === i; });
                }
            }
            resolve(_this.cachedReactions[key]);
        });
    };
    return MockReactionsProvider;
}(AbstractReactionsProvider));
export default MockReactionsProvider;
export var reactionsProvider = new MockReactionsProvider();
export var reactionsProviderPromise = Promise.resolve(reactionsProvider);
//# sourceMappingURL=mock-reactions-provider.js.map