"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var emoji_1 = require("@atlaskit/emoji");
var layer_1 = require("@atlaskit/layer");
var theme_1 = require("@atlaskit/theme");
var cx = require("classnames");
var React = require("react");
var react_1 = require("react");
var ReactDOM = require("react-dom");
var typestyle_1 = require("typestyle");
var selector_1 = require("./internal/selector");
var trigger_1 = require("./internal/trigger");
var analytics_1 = require("./analytics");
var akBorderRadius = theme_1.borderRadius();
var akColorN0 = theme_1.colors.N0;
var akColorN50A = theme_1.colors.N50A;
var akColorN60A = theme_1.colors.N60A;
var pickerStyle = typestyle_1.style({
    verticalAlign: 'middle',
    $nest: {
        '&.miniMode': {
            display: 'inline-block',
            marginRight: '4px',
        },
    },
});
var contentStyle = typestyle_1.style({
    display: 'flex',
});
var popupStyle = typestyle_1.style({
    background: akColorN0,
    borderRadius: akBorderRadius,
    boxShadow: "0 4px 8px -2px " + akColorN50A + ", 0 0 1px " + akColorN60A,
    $nest: {
        '&> div': {
            boxShadow: undefined,
        },
    },
});
var ReactionPicker = /** @class */ (function (_super) {
    tslib_1.__extends(ReactionPicker, _super);
    function ReactionPicker(props) {
        var _this = _super.call(this, props) || this;
        _this.handleClickOutside = function (e) {
            var isOpen = _this.state.isOpen;
            if (!isOpen) {
                return;
            }
            var domNode = ReactDOM.findDOMNode(_this);
            if (!domNode || (e.target instanceof Node && !domNode.contains(e.target))) {
                _this.close();
            }
        };
        _this.showFullPicker = function (e) {
            e.preventDefault();
            analytics_1.analyticsService.trackEvent('reactions.picker.show');
            _this.setState({
                isOpen: true,
                showFullPicker: true,
            });
        };
        _this.onEmojiSelected = function (emoji) {
            var onSelection = _this.props.onSelection;
            analytics_1.analyticsService.trackEvent('reactions.picker.emoji.selected', {
                emojiId: emoji.id,
            });
            onSelection(emoji.id);
            _this.close();
        };
        _this.onTriggerClick = function () {
            analytics_1.analyticsService.trackEvent('reactions.picker.trigger.click');
            _this.setState({
                isOpen: !_this.state.isOpen,
                showFullPicker: false,
            });
        };
        _this.state = {
            isOpen: false,
            showFullPicker: false,
        };
        return _this;
    }
    ReactionPicker.prototype.componentDidMount = function () {
        document.addEventListener('click', this.handleClickOutside);
    };
    ReactionPicker.prototype.componentWillUnmount = function () {
        document.removeEventListener('click', this.handleClickOutside);
    };
    ReactionPicker.prototype.close = function () {
        analytics_1.analyticsService.trackEvent('reactions.picker.close');
        this.setState({
            isOpen: false,
            showFullPicker: false,
        });
    };
    ReactionPicker.prototype.renderSelector = function () {
        var _a = this.props, emojiProvider = _a.emojiProvider, allowAllEmojis = _a.allowAllEmojis;
        return (React.createElement("div", { className: contentStyle },
            React.createElement(selector_1.default, { emojiProvider: emojiProvider, onSelection: this.onEmojiSelected, showMore: allowAllEmojis, onMoreClick: this.showFullPicker })));
    };
    ReactionPicker.prototype.renderEmojiPicker = function () {
        var emojiProvider = this.props.emojiProvider;
        return (React.createElement(emoji_1.EmojiPicker, { emojiProvider: emojiProvider, onSelection: this.onEmojiSelected }));
    };
    ReactionPicker.prototype.renderContent = function () {
        var showFullPicker = this.state.showFullPicker;
        return showFullPicker ? this.renderEmojiPicker() : this.renderSelector();
    };
    ReactionPicker.prototype.renderPopup = function () {
        var isOpen = this.state.isOpen;
        if (!isOpen) {
            return null;
        }
        return React.createElement("div", { className: popupStyle }, this.renderContent());
    };
    ReactionPicker.prototype.renderTrigger = function (content) {
        var miniMode = this.props.miniMode;
        return (React.createElement(layer_1.default, { content: content, position: "bottom left", autoFlip: ['top', 'bottom'], boundariesElement: "scrollParent" },
            React.createElement(trigger_1.default, { onClick: this.onTriggerClick, miniMode: miniMode, disabled: this.props.disabled })));
    };
    ReactionPicker.prototype.render = function () {
        var isOpen = this.state.isOpen;
        var miniMode = this.props.miniMode;
        var classNames = cx(pickerStyle, {
            isOpen: isOpen,
            miniMode: miniMode,
        }, this.props.className);
        return (React.createElement("div", { className: classNames }, this.renderTrigger(this.renderPopup())));
    };
    ReactionPicker.defaultProps = {
        disabled: false,
    };
    return ReactionPicker;
}(react_1.PureComponent));
exports.default = ReactionPicker;
//# sourceMappingURL=reaction-picker.js.map