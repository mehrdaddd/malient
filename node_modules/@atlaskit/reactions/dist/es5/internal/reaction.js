"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var emoji_1 = require("@atlaskit/emoji");
var theme_1 = require("@atlaskit/theme");
var cx = require("classnames");
var React = require("react");
var react_1 = require("react");
var typestyle_1 = require("typestyle");
var helpers_1 = require("./helpers");
var analytics_1 = require("../analytics");
var reaction_tooltip_1 = require("./reaction-tooltip");
var helpers_2 = require("./helpers");
var counter_1 = require("./counter");
var flash_animation_1 = require("./flash-animation");
var akBorderRadius = theme_1.borderRadius();
var akColorN30A = theme_1.colors.N30A;
var akColorN400 = theme_1.colors.N400;
var emojiStyle = typestyle_1.style({
    transformOrigin: 'center center 0',
    margin: '0 4px',
});
var reactionStyle = typestyle_1.style({
    outline: 'none',
    display: 'flex',
    flexDirection: 'row',
    minWidth: '36px',
    height: '24px',
    lineHeight: '24px',
    background: 'transparent',
    border: '0',
    borderRadius: akBorderRadius,
    color: akColorN400,
    cursor: 'pointer',
    padding: 0,
    margin: 0,
    transition: '200ms ease-in-out',
    $nest: {
        '&:hover': {
            background: akColorN30A,
            $nest: {
                '> .reaction-tooltip': {
                    display: 'block',
                },
            },
        },
    },
});
var flashStyle = typestyle_1.style({
    display: 'flex',
    flexDirection: 'row',
    borderRadius: akBorderRadius,
});
var counterStyle = typestyle_1.style({
    padding: '0 4px 0 0',
});
var Reaction = /** @class */ (function (_super) {
    tslib_1.__extends(Reaction, _super);
    function Reaction(props) {
        var _this = _super.call(this, props) || this;
        _this.handleMouseDown = function (event) {
            event.preventDefault();
            if (_this.props.onClick && helpers_1.isLeftClick(event)) {
                var reaction = _this.props.reaction;
                analytics_1.analyticsService.trackEvent('reactions.reaction.click', reaction);
                _this.props.onClick(_this.props.reaction.emojiId, event);
            }
        };
        _this.handleMouseOver = function (event) {
            event.preventDefault();
            var _a = _this.props, onMouseOver = _a.onMouseOver, reaction = _a.reaction;
            if (onMouseOver) {
                if (!reaction.users || !reaction.users.length) {
                    onMouseOver(_this.props.reaction, event);
                }
                _this.tooltipTimeout = setTimeout(function () {
                    if (_this.mounted) {
                        _this.setState({
                            showTooltip: true,
                        });
                    }
                }, 500);
                _this.timeouts.push(_this.tooltipTimeout);
            }
        };
        _this.handleMouseOut = function (event) {
            event.preventDefault();
            if (_this.props.onMouseOver) {
                clearTimeout(_this.tooltipTimeout);
                _this.setState({
                    showTooltip: false,
                });
            }
        };
        _this.handleFlashRef = function (flash) {
            _this.flashRef = flash;
        };
        _this.flash = function () {
            if (_this.flashRef) {
                _this.flashRef.flash();
            }
        };
        _this.state = {
            showTooltip: false,
            emojiName: undefined,
        };
        _this.timeouts = [];
        return _this;
    }
    Reaction.prototype.componentDidUpdate = function (_a) {
        var prevReaction = _a.reaction;
        if (!prevReaction.reacted && this.props.reaction.reacted) {
            this.flash();
        }
    };
    Reaction.prototype.componentDidMount = function () {
        var _this = this;
        this.mounted = true;
        this.props.emojiProvider.then(function (emojiResource) {
            var foundEmoji = emojiResource.findByEmojiId({
                shortName: '',
                id: _this.props.reaction.emojiId,
            });
            if (helpers_2.isPromise(foundEmoji)) {
                foundEmoji.then(function (emoji) {
                    if (emoji) {
                        if (_this.mounted) {
                            _this.setState({
                                emojiName: emoji.name,
                            });
                        }
                    }
                });
            }
            else if (foundEmoji) {
                _this.setState({
                    emojiName: foundEmoji.name,
                });
            }
        });
        if (this.props.flashOnMount && this.props.reaction.reacted) {
            this.flash();
        }
    };
    Reaction.prototype.componentWillUnmount = function () {
        this.timeouts.forEach(clearTimeout);
        this.mounted = false;
    };
    Reaction.prototype.render = function () {
        var _a = this.props, emojiProvider = _a.emojiProvider, reaction = _a.reaction, classNameProp = _a.className;
        var _b = this.state, emojiName = _b.emojiName, showTooltip = _b.showTooltip;
        var classNames = cx(reactionStyle, classNameProp);
        var users = reaction.users;
        var emojiId = { id: reaction.emojiId, shortName: '' };
        var tooltip = showTooltip && users && users.length ? (React.createElement(reaction_tooltip_1.default, { target: this, emojiName: emojiName, users: users })) : null;
        return (React.createElement("button", { className: classNames, onMouseUp: this.handleMouseDown, onMouseOver: this.handleMouseOver, onMouseOut: this.handleMouseOut },
            tooltip,
            React.createElement(flash_animation_1.default, { ref: this.handleFlashRef, className: flashStyle },
                React.createElement("div", { className: emojiStyle },
                    React.createElement(emoji_1.ResourcedEmoji, { emojiProvider: emojiProvider, emojiId: emojiId, fitToHeight: 16 })),
                React.createElement(counter_1.default, { className: counterStyle, value: reaction.count, highlight: reaction.reacted }))));
    };
    Reaction.defaultProps = {
        flash: false,
        className: undefined,
        onMouseOver: undefined,
        flashOnMount: false,
    };
    return Reaction;
}(react_1.PureComponent));
exports.default = Reaction;
//# sourceMappingURL=reaction.js.map