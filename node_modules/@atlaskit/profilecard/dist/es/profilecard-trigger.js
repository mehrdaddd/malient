import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import AkLayer from '@atlaskit/layer';

import PositionWrapper from './components/PositionWrapper';
import withOuterListeners from './components/withOuterListeners';
import AkProfilecardResourced from './profilecard-resourced';

import { AnimationWrapper } from './styled/Trigger';

var allowedPositions = ['top left', 'top right', 'right top', 'right bottom', 'bottom right', 'bottom left', 'left bottom', 'left top'];

var AkLayerWithOuterListeners = withOuterListeners(AkLayer);

var ProfilecardTrigger = function (_PureComponent) {
  _inherits(ProfilecardTrigger, _PureComponent);

  function ProfilecardTrigger(props) {
    _classCallCheck(this, ProfilecardTrigger);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

    _this.handleLayerFlipChange = function (_ref) {
      var flipped = _ref.flipped;

      _this.setState({ isFlipped: flipped });
    };

    _this.hideProfilecard = function () {
      clearTimeout(_this.showTimer);

      _this.hideTimer = setTimeout(function () {
        _this.setState({ visible: false });
      }, _this.hideDelay);
    };

    _this.showProfilecard = function () {
      clearTimeout(_this.hideTimer);

      _this.showTimer = setTimeout(function () {
        _this.setState({ visible: true });
      }, _this.showDelay);
    };

    _this.showDelay = 500;
    _this.hideDelay = 250;

    _this.state = {
      visible: false,
      isFlipped: false
    };
    return _this;
  }

  ProfilecardTrigger.prototype.renderProfilecard = function renderProfilecard() {
    return React.createElement(
      PositionWrapper,
      {
        position: this.props.position,
        isFlipped: this.state.isFlipped
      },
      React.createElement(
        AnimationWrapper,
        {
          position: this.props.position,
          isFlipped: this.state.isFlipped
        },
        React.createElement(AkProfilecardResourced, {
          userId: this.props.userId,
          cloudId: this.props.cloudId,
          resourceClient: this.props.resourceClient,
          actions: this.props.actions,
          analytics: this.props.analytics
        })
      )
    );
  };

  ProfilecardTrigger.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        position = _props.position,
        trigger = _props.trigger;


    var Layer = trigger === 'hover' ? AkLayer : AkLayerWithOuterListeners;
    var containerListeners = {};
    var layerListeners = {};

    if (trigger === 'hover') {
      containerListeners.onMouseEnter = this.showProfilecard;
      containerListeners.onMouseLeave = this.hideProfilecard;
    } else {
      containerListeners.onClick = this.showProfilecard;

      layerListeners.handleClickOutside = this.hideProfilecard;
      layerListeners.handleEscapeKeydown = this.hideProfilecard;
    }

    return React.createElement(
      'div',
      _extends({ style: { display: 'inline-block', maxWidth: '100%' } }, containerListeners),
      this.state.visible ? React.createElement(
        Layer,
        _extends({
          autoFlip: true,
          content: this.renderProfilecard(),
          offset: '0 4',
          onFlippedChange: this.handleLayerFlipChange,
          position: position
        }, layerListeners),
        children
      ) : children
    );
  };

  return ProfilecardTrigger;
}(PureComponent);

ProfilecardTrigger.propTypes = {
  children: PropTypes.element.isRequired,
  position: PropTypes.oneOf(allowedPositions),
  userId: PropTypes.string.isRequired,
  cloudId: PropTypes.string,
  actions: PropTypes.arrayOf(PropTypes.shape({
    callback: PropTypes.func,
    label: PropTypes.string
  })),
  resourceClient: PropTypes.shape({
    getProfile: PropTypes.func,
    getCachedProfile: PropTypes.func,
    makeRequest: PropTypes.func
  }).isRequired,
  trigger: PropTypes.oneOf(['click', 'hover']),
  analytics: PropTypes.func
};
ProfilecardTrigger.defaultProps = {
  position: 'top left',
  actions: [],
  trigger: 'hover'
};
export default ProfilecardTrigger;