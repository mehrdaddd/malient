import _Object$keys from 'babel-runtime/core-js/object/keys';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import { colors } from '@atlaskit/theme';
import AkSpinner from '@atlaskit/spinner';
import AkAvatar from '@atlaskit/avatar';
import AkButton from '@atlaskit/button';

import ErrorMessage from './components/ErrorMessage';
import HeightTransitionWrapper from './components/HeightTransitionWrapper';
import IconLabel from './components/IconLabel';
import presences from './internal/presences';

import { CardContainer, SpinnerContainer, ProfileImage, CardContent, DetailsGroup, FullNameLabel, JobTitleLabel, AppTitleLabel, ActionsFlexSpacer, ActionButtonGroup, DeactivatedInfo } from './styled/Card';

var Profilecard = function (_PureComponent) {
  _inherits(Profilecard, _PureComponent);

  function Profilecard(options) {
    _classCallCheck(this, Profilecard);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, options));

    _this._durationSince = function (from) {
      var fromParsed = parseInt(from, 10) || 0;
      return fromParsed > 0 ? Date.now() - fromParsed : null;
    };

    _this._timeOpen = null;

    _this.clientFetchProfile = function () {
      var _this$props;

      _this.props.analytics('profile-card.reload', {});
      (_this$props = _this.props).clientFetchProfile.apply(_this$props, arguments);
    };
    return _this;
  }

  Profilecard.prototype.componentDidMount = function componentDidMount() {
    this._timeOpen = Date.now();
    this.props.analytics('profile-card.view', {});
  };

  Profilecard.prototype.renderActionsButtons = function renderActionsButtons() {
    var _this2 = this;

    if (this.props.actions.length === 0) {
      return null;
    }

    return React.createElement(
      ActionButtonGroup,
      null,
      this.props.actions.map(function (action, idx) {
        return React.createElement(
          AkButton,
          {
            appearance: idx === 0 ? 'default' : 'subtle',
            compact: true,
            key: action.label,
            onClick: function onClick() {
              _this2.props.analytics('profile-card.click', {
                id: action.id || null,
                duration: _this2._durationSince(_this2._timeOpen)
              });
              action.callback.apply(action, arguments);
            }
          },
          action.label
        );
      })
    );
  };

  Profilecard.prototype.renderErrorMessage = function renderErrorMessage() {
    return React.createElement(ErrorMessage, {
      reload: this.props.clientFetchProfile && this.clientFetchProfile,
      errorType: this.props.errorType
    });
  };

  Profilecard.prototype.renderCardDetailsDefault = function renderCardDetailsDefault() {
    var validPresence = presences[this.props.presence];

    return React.createElement(
      DetailsGroup,
      null,
      React.createElement(
        FullNameLabel,
        {
          noMeta: !this.props.meta
        },
        this.props.fullName
      ),
      this.props.meta && React.createElement(
        JobTitleLabel,
        null,
        this.props.meta
      ),
      React.createElement(
        IconLabel,
        { icon: this.props.presence },
        !!validPresence && this.props.presenceMessage || validPresence
      ),
      React.createElement(
        IconLabel,
        { icon: 'email' },
        this.props.email
      ),
      React.createElement(
        IconLabel,
        { icon: 'mention' },
        this.props.nickname && '@' + this.props.nickname
      ),
      React.createElement(
        IconLabel,
        { icon: 'time' },
        this.props.timestring
      ),
      React.createElement(
        IconLabel,
        { icon: 'location' },
        this.props.location
      )
    );
  };

  Profilecard.prototype.renderCardDetailsDeactivated = function renderCardDetailsDeactivated() {
    var userName = this.props.isCensored ? this.props.nickname : this.props.fullName;

    return React.createElement(
      DetailsGroup,
      null,
      React.createElement(
        FullNameLabel,
        { noMeta: true },
        userName
      ),
      React.createElement(
        DeactivatedInfo,
        null,
        'This user is no longer available'
      )
    );
  };

  Profilecard.prototype.renderCardDetailsCensored = function renderCardDetailsCensored() {
    return React.createElement(
      DetailsGroup,
      null,
      React.createElement(
        FullNameLabel,
        { noMeta: true },
        this.props.nickname
      )
    );
  };

  Profilecard.prototype.renderCardDetailsApp = function renderCardDetailsApp() {
    return React.createElement(
      DetailsGroup,
      null,
      React.createElement(
        FullNameLabel,
        null,
        this.props.fullName
      ),
      React.createElement(
        AppTitleLabel,
        null,
        'App'
      ),
      React.createElement(
        IconLabel,
        { icon: 'mention' },
        this.props.nickname && '@' + this.props.nickname
      )
    );
  };

  Profilecard.prototype.renderCardDetails = function renderCardDetails() {
    if (this.props.isBot) {
      return this.renderCardDetailsApp();
    } else if (!this.props.isActive) {
      return this.renderCardDetailsDeactivated();
    } else if (this.props.isCensored) {
      return this.renderCardDetailsCensored();
    }

    return this.renderCardDetailsDefault();
  };

  Profilecard.prototype.renderProfilecard = function renderProfilecard() {
    this.props.analytics('profile-card.loaded', {
      duration: this._durationSince(this._timeOpen)
    });

    return React.createElement(
      CardContainer,
      null,
      React.createElement(
        ProfileImage,
        null,
        React.createElement(AkAvatar, {
          size: 'xlarge',
          src: this.props.isActive ? this.props.avatarUrl : null,
          borderColor: colors.N0
        })
      ),
      React.createElement(
        CardContent,
        null,
        this.renderCardDetails(),
        React.createElement(ActionsFlexSpacer, null),
        this.renderActionsButtons()
      )
    );
  };

  Profilecard.prototype.render = function render() {
    var cardContent = null;

    if (this.props.hasError) {
      this.props.analytics('profile-card.error', {});

      cardContent = this.renderErrorMessage();
    } else if (this.props.isLoading) {
      cardContent = React.createElement(
        SpinnerContainer,
        null,
        React.createElement(AkSpinner, null)
      );
    } else if (this.props.fullName) {
      cardContent = this.renderProfilecard();
    }

    return React.createElement(
      HeightTransitionWrapper,
      null,
      cardContent
    );
  };

  return Profilecard;
}(PureComponent);

Profilecard.propTypes = {
  isCensored: PropTypes.bool,
  isActive: PropTypes.bool,
  isBot: PropTypes.bool,
  avatarUrl: PropTypes.string,
  fullName: PropTypes.string,
  meta: PropTypes.string,
  nickname: PropTypes.string,
  email: PropTypes.string,
  location: PropTypes.string,
  timestring: PropTypes.string,
  presence: PropTypes.oneOf(_Object$keys(presences)),
  actions: PropTypes.arrayOf(PropTypes.shape({
    callback: PropTypes.function,
    id: PropTypes.string,
    label: PropTypes.string
  })),
  isLoading: PropTypes.bool,
  hasError: PropTypes.bool,
  errorType: PropTypes.shape({
    reason: PropTypes.oneOf(['default', 'NotFound'])
  }),
  clientFetchProfile: PropTypes.func,
  analytics: PropTypes.func,
  presenceMessage: PropTypes.string
};
Profilecard.defaultProps = {
  isCurrentUser: false,
  isCensored: false,
  isActive: true,
  isBot: false,
  isNotMentionable: false,
  presence: 'none',
  actions: [],
  isLoading: false,
  hasError: false,
  analytics: function analytics() {},
  presenceMessage: ''
};
export default Profilecard;