import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';

import AkProfilecardStatic from './profilecard';

var ProfilecardResourced = function (_PureComponent) {
  _inherits(ProfilecardResourced, _PureComponent);

  function ProfilecardResourced(props) {
    _classCallCheck(this, ProfilecardResourced);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

    _this._isMounted = false;

    _this.state = {
      isLoading: false,
      hasError: false,
      error: null,
      data: {}
    };

    _this.clientFetchProfile = _this.clientFetchProfile.bind(_this);
    return _this;
  }

  ProfilecardResourced.prototype.componentDidMount = function componentDidMount() {
    this._isMounted = true;
    this.clientFetchProfile();
  };

  ProfilecardResourced.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.userId !== prevProps.userId || this.props.cloudId !== prevProps.cloudId) {
      this.clientFetchProfile();
    }
  };

  ProfilecardResourced.prototype.componentWillUnmount = function componentWillUnmount() {
    this._isMounted = false;
  };

  ProfilecardResourced.prototype.clientFetchProfile = function clientFetchProfile() {
    var _this2 = this;

    var _props = this.props,
        cloudId = _props.cloudId,
        userId = _props.userId;


    this.setState({
      isLoading: true,
      hasError: false,
      data: {}
    });

    this.props.resourceClient.getProfile(cloudId, userId).then(function (res) {
      return _this2.handleClientSuccess(res);
    }, function (err) {
      return _this2.handleClientError(err);
    }).catch(function (err) {
      return _this2.handleClientError(err);
    });
  };

  ProfilecardResourced.prototype.handleClientSuccess = function handleClientSuccess(res) {
    if (!this._isMounted) {
      return;
    }

    this.setState({
      isLoading: false,
      hasError: false,
      data: res
    });
  };

  ProfilecardResourced.prototype.handleClientError = function handleClientError(err) {
    if (!this._isMounted) {
      return;
    }
    this.setState({
      isLoading: false,
      hasError: true,
      error: err
    });
  };

  ProfilecardResourced.prototype.filterActions = function filterActions() {
    var _this3 = this;

    return this.props.actions.filter(function (action) {
      if (!action.shouldRender) {
        return true;
      } else if (typeof action.shouldRender !== 'function') {
        return Boolean(action.shouldRender);
      }

      return action.shouldRender(_this3.state.data);
    });
  };

  ProfilecardResourced.prototype.render = function render() {
    var newProps = _extends({
      isLoading: this.state.isLoading,
      hasError: this.state.hasError,
      errorType: this.state.error,
      clientFetchProfile: this.clientFetchProfile,
      analytics: this.props.analytics
    }, this.state.data);

    return React.createElement(AkProfilecardStatic, _extends({}, newProps, { actions: this.filterActions() }));
  };

  return ProfilecardResourced;
}(PureComponent);

ProfilecardResourced.propTypes = {
  userId: PropTypes.string.isRequired,
  cloudId: PropTypes.string.isRequired,
  actions: PropTypes.arrayOf(PropTypes.shape({
    callback: PropTypes.func,
    shouldRender: PropTypes.func,
    id: PropTypes.string,
    label: PropTypes.string
  })),
  resourceClient: PropTypes.shape({
    getProfile: PropTypes.func,
    getCachedProfile: PropTypes.func,
    makeRequest: PropTypes.func
  }).isRequired,
  analytics: PropTypes.func
};
ProfilecardResourced.defaultProps = {
  actions: []
};
export default ProfilecardResourced;