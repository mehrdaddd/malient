import _taggedTemplateLiteral from 'babel-runtime/helpers/taggedTemplateLiteral';

var _templateObject = _taggedTemplateLiteral(['translateY(', 'px)'], ['translateY(', 'px)']),
    _templateObject2 = _taggedTemplateLiteral(['translateX(', 'px)'], ['translateX(', 'px)']),
    _templateObject3 = _taggedTemplateLiteral(['', ''], ['', '']),
    _templateObject4 = _taggedTemplateLiteral(['\n  animation: ', ' ', 's ', 's backwards;\n'], ['\n  animation: ', ' ', 's ', 's backwards;\n']);

import styled, { keyframes } from 'styled-components';
import { akAnimationMixins, akGridSizeUnitless } from '@atlaskit/util-shared-styles';

var createBold = akAnimationMixins.createBold,
    interpolate = akAnimationMixins.interpolate;

// animation constants

var animDistance = 2 * akGridSizeUnitless;
var animDelay = 0.1;
var animTime = animDelay + 1;

// properties to animate
var slideUp = {
  property: 'transform',
  value: interpolate(_templateObject, function (t) {
    return t;
  }),
  deltas: [{ from: animDistance, to: 0 }]
};
var slideDown = {
  property: 'transform',
  value: interpolate(_templateObject, function (t) {
    return t;
  }),
  deltas: [{ from: -animDistance, to: 0 }]
};
var slideLeft = {
  property: 'transform',
  value: interpolate(_templateObject2, function (t) {
    return t;
  }),
  deltas: [{ from: animDistance, to: 0 }]
};
var slideRight = {
  property: 'transform',
  value: interpolate(_templateObject2, function (t) {
    return t;
  }),
  deltas: [{ from: -animDistance, to: 0 }]
};
var fadeIn = {
  property: 'opacity',
  deltas: [{ from: 0, to: 1 }]
};

var KEYFRAMES = {
  bottom: keyframes(_templateObject3, createBold([slideDown, fadeIn])),
  left: keyframes(_templateObject3, createBold([slideLeft, fadeIn])),
  right: keyframes(_templateObject3, createBold([slideRight, fadeIn])),
  top: keyframes(_templateObject3, createBold([slideUp, fadeIn]))
};

var KEYFRAMES_FLIPPED = {
  bottom: KEYFRAMES.top,
  left: KEYFRAMES.right,
  right: KEYFRAMES.left,
  top: KEYFRAMES.bottom
};

export var getKeyframeName = function getKeyframeName(props) {
  var position = props.position,
      isFlipped = props.isFlipped;

  var mainPosition = position.split(' ')[0];

  return isFlipped ? KEYFRAMES_FLIPPED[mainPosition] : KEYFRAMES[mainPosition];
};

export var AnimationWrapper = styled.div(_templateObject4, function (props) {
  return getKeyframeName(props);
}, animTime, animDelay);