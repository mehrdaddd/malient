import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import IconError from '@atlaskit/icon/glyph/cross-circle';
import AkButton from '@atlaskit/button';

import { ErrorWrapper, ErrorTitle, ErrorText } from '../styled/Error';

var ErrorMessage = function (_PureComponent) {
  _inherits(ErrorMessage, _PureComponent);

  function ErrorMessage() {
    var _temp, _this, _ret;

    _classCallCheck(this, ErrorMessage);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.renderNotFound = function () {
      return React.createElement(
        ErrorTitle,
        null,
        'The user is no longer available for the site'
      );
    }, _this.renderDefault = function () {
      return React.createElement(
        ErrorTitle,
        null,
        'Oops, looks like we\u2019re having issues',
        React.createElement('br', null),
        _this.props.reload ? React.createElement(
          ErrorText,
          null,
          'Try again and we\u2019ll give it another shot'
        ) : null
      );
    }, _this.renderRetryButton = function () {
      return _this.props.reload ? React.createElement(
        AkButton,
        {
          appearance: 'link',
          compact: true,
          onClick: _this.props.reload
        },
        'Try again'
      ) : null;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  ErrorMessage.prototype.renderErrorContent = function renderErrorContent() {
    var reason = this.props.errorType.reason;


    switch (reason) {
      case 'NotFound':
        return this.renderNotFound();

      default:
        return this.renderDefault();
    }
  };

  ErrorMessage.prototype.render = function render() {
    return React.createElement(
      ErrorWrapper,
      null,
      React.createElement(IconError, { label: 'icon error', size: 'xlarge' }),
      this.renderErrorContent(),
      this.renderRetryButton()
    );
  };

  return ErrorMessage;
}(PureComponent);

ErrorMessage.propTypes = {
  reload: PropTypes.func,
  errorType: PropTypes.shape({
    reason: PropTypes.string
  })
};
ErrorMessage.defaultProps = {
  errorType: {
    reason: 'default'
  }
};
export default ErrorMessage;