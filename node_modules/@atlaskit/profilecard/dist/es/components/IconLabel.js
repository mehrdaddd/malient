import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
import IconLocation from '@atlaskit/icon/glyph/location';
import IconRecent from '@atlaskit/icon/glyph/recent';
import IconMention from '@atlaskit/icon/glyph/mention';
import IconEmail from '@atlaskit/icon/glyph/email';
import { Presence } from '@atlaskit/avatar';

import { DetailsLabel, DetailsLabelIcon, DetailsLabelText } from '../styled/Card';

var icons = {
  location: IconLocation,
  time: IconRecent,
  mention: IconMention,
  email: IconEmail,
  available: function available() {
    return React.createElement(Presence, { presence: 'online', borderColor: 'transparent' });
  },
  unavailable: function unavailable() {
    return React.createElement(Presence, { presence: 'offline', borderColor: 'transparent' });
  },
  busy: function busy() {
    return React.createElement(Presence, { presence: 'busy', borderColor: 'transparent' });
  },
  focus: function focus() {
    return React.createElement(Presence, { presence: 'focus', borderColor: 'transparent' });
  }
};

var IconLabel = function (_PureComponent) {
  _inherits(IconLabel, _PureComponent);

  function IconLabel() {
    _classCallCheck(this, IconLabel);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  IconLabel.prototype.render = function render() {
    if (!this.props.children) {
      return null;
    }

    var IconElement = icons[this.props.icon];
    var displayIcon = IconElement ? React.createElement(IconElement, { label: 'icon ' + this.props.icon }) : null;

    return React.createElement(
      DetailsLabel,
      null,
      React.createElement(
        DetailsLabelIcon,
        null,
        displayIcon
      ),
      React.createElement(
        DetailsLabelText,
        null,
        this.props.children
      )
    );
  };

  return IconLabel;
}(PureComponent);

IconLabel.propTypes = {
  icon: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node])
};
export default IconLabel;