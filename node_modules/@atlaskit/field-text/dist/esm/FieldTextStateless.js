import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import Base, { Label } from '@atlaskit/field-base';
import Input from './styled/Input';

var FieldTextStateless = function (_Component) {
  _inherits(FieldTextStateless, _Component);

  function FieldTextStateless() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FieldTextStateless);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FieldTextStateless.__proto__ || _Object$getPrototypeOf(FieldTextStateless)).call.apply(_ref, [this].concat(args))), _this), _this.handleInputRef = function (input) {
      _this.input = input;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FieldTextStateless, [{
    key: 'focus',
    value: function focus() {
      if (this.input) {
        this.input.focus();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        null,
        React.createElement(Label, {
          htmlFor: this.props.id,
          isDisabled: this.props.disabled,
          isLabelHidden: this.props.isLabelHidden,
          isRequired: this.props.required,
          label: this.props.label || ''
        }),
        React.createElement(
          Base,
          {
            invalidMessage: this.props.invalidMessage,
            isCompact: this.props.compact,
            isDisabled: this.props.disabled,
            isFitContainerWidthEnabled: this.props.shouldFitContainer,
            isInvalid: this.props.isInvalid,
            isReadOnly: this.props.isReadOnly,
            isRequired: this.props.required,
            isValidationHidden: this.props.isValidationHidden
          },
          React.createElement(Input, {
            autoComplete: this.props.autoComplete,
            autoFocus: this.props.autoFocus,
            disabled: this.props.disabled,
            form: this.props.form,
            id: this.props.id,
            innerRef: this.handleInputRef,
            maxLength: this.props.maxLength,
            min: this.props.min,
            max: this.props.max,
            name: this.props.name,
            onBlur: this.props.onBlur,
            onChange: this.props.onChange,
            onFocus: this.props.onFocus,
            onKeyDown: this.props.onKeyDown,
            onKeyPress: this.props.onKeyPress,
            onKeyUp: this.props.onKeyUp,
            pattern: this.props.pattern,
            placeholder: this.props.placeholder,
            readOnly: this.props.isReadOnly,
            required: this.props.required,
            spellCheck: this.props.isSpellCheckEnabled,
            type: this.props.type,
            value: this.props.value
          })
        )
      );
    }
  }]);

  return FieldTextStateless;
}(Component);

FieldTextStateless.defaultProps = {
  compact: false,
  disabled: false,
  isInvalid: false,
  isReadOnly: false,
  isSpellCheckEnabled: true,
  onChange: function onChange() {},
  required: false,
  type: 'text',
  isValidationHidden: false
};
export default FieldTextStateless;