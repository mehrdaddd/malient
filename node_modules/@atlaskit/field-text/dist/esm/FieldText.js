import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import FieldTextStateless from './FieldTextStateless';

var FieldText = function (_Component) {
  _inherits(FieldText, _Component);

  function FieldText() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FieldText);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FieldText.__proto__ || _Object$getPrototypeOf(FieldText)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: _this.props.value
    }, _this.handleOnChange = function (e) {
      _this.setState({ value: e.target.value });
      if (_this.props.onChange) {
        _this.props.onChange(e);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FieldText, [{
    key: 'focus',
    value: function focus() {
      if (this.input) {
        this.input.focus();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return React.createElement(FieldTextStateless, _extends({}, this.props, {
        value: this.state.value,
        onChange: this.handleOnChange,
        ref: function ref(fieldRef) {
          // $FlowFixMe - TODO: Why input is being typed as FieldTextStateless and erroring?
          _this2.input = fieldRef;
        }
      }));
    }
  }]);

  return FieldText;
}(Component);

FieldText.defaultProps = {
  onChange: function onChange() {}
};
export default FieldText;