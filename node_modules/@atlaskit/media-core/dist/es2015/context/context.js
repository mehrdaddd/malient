import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/startWith';
import { uploadFile, } from '@atlaskit/media-store';
import { MediaItemProvider, MediaUrlPreviewProvider, } from '../providers/';
import { RemoteMediaCollectionProviderFactory } from '../providers/remoteMediaCollectionProviderFactory';
import { MediaDataUriService, } from '../services/dataUriService';
import { MediaBlobService } from '../services/blobService';
import { MediaLinkService } from '../services/linkService';
import { LRUCache } from 'lru-fast';
import { DEFAULT_COLLECTION_PAGE_SIZE } from '../services/collectionService';
var DEFAULT_CACHE_SIZE = 200;
var ContextFactory = /** @class */ (function () {
    function ContextFactory() {
    }
    ContextFactory.create = function (config) {
        return new ContextImpl(config);
    };
    return ContextFactory;
}());
export { ContextFactory };
var ContextImpl = /** @class */ (function () {
    function ContextImpl(config) {
        this.config = config;
        this.collectionPool = RemoteMediaCollectionProviderFactory.createPool();
        this.itemPool = MediaItemProvider.createPool();
        this.urlPreviewPool = MediaUrlPreviewProvider.createPool();
        this.fileItemCache = new LRUCache(config.cacheSize || DEFAULT_CACHE_SIZE);
        this.localPreviewCache = new LRUCache(10);
    }
    ContextImpl.prototype.getMediaItemProvider = function (id, mediaItemType, collectionName, mediaItem) {
        var isMediaItemLink = mediaItem && mediaItem.type === 'link';
        var isMediaItemFileAndNotPending = mediaItem &&
            mediaItem.type === 'file' &&
            mediaItem.details.processingStatus !== 'pending';
        if (mediaItem && (isMediaItemLink || isMediaItemFileAndNotPending)) {
            return {
                observable: function () {
                    return Observable.of(mediaItem);
                },
            };
        }
        var provider = MediaItemProvider.fromPool(this.itemPool, this.apiConfig, this.fileItemCache, mediaItemType, id, collectionName);
        if (mediaItem) {
            return {
                observable: function () {
                    return provider.observable().startWith(mediaItem);
                },
            };
        }
        return provider;
    };
    ContextImpl.prototype.getMediaCollectionProvider = function (collectionName, pageSize) {
        if (pageSize === void 0) { pageSize = DEFAULT_COLLECTION_PAGE_SIZE; }
        return RemoteMediaCollectionProviderFactory.fromPool(this.collectionPool, this.apiConfig, collectionName, pageSize);
    };
    ContextImpl.prototype.getDataUriService = function (collectionName) {
        return new MediaDataUriService(this.config.authProvider, this.config.serviceHost, collectionName);
    };
    ContextImpl.prototype.setLocalPreview = function (id, preview) {
        this.localPreviewCache.set(id, preview);
    };
    ContextImpl.prototype.getLocalPreview = function (id) {
        return this.localPreviewCache.get(id);
    };
    ContextImpl.prototype.removeLocalPreview = function (id) {
        this.localPreviewCache.remove(id);
    };
    ContextImpl.prototype.getBlobService = function (collectionName) {
        return new MediaBlobService(this.config.authProvider, this.config.serviceHost, collectionName);
    };
    ContextImpl.prototype.getUrlPreviewProvider = function (url) {
        return MediaUrlPreviewProvider.fromPool(this.urlPreviewPool, this.apiConfig, url);
    };
    ContextImpl.prototype.addLinkItem = function (url, collectionName, metadata) {
        var linkService = new MediaLinkService(this.apiConfig);
        return linkService.addLinkItem(url, collectionName, metadata);
    };
    ContextImpl.prototype.uploadFile = function (file, callbacks) {
        return uploadFile(file, this.apiConfig, callbacks);
    };
    ContextImpl.prototype.refreshCollection = function (collectionName, pageSize) {
        this.getMediaCollectionProvider(collectionName, pageSize).refresh();
    };
    Object.defineProperty(ContextImpl.prototype, "apiConfig", {
        get: function () {
            return {
                serviceHost: this.config.serviceHost,
                authProvider: this.config.authProvider,
            };
        },
        enumerable: true,
        configurable: true
    });
    return ContextImpl;
}());
//# sourceMappingURL=context.js.map