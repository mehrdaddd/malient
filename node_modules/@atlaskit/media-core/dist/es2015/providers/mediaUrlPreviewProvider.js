import * as tslib_1 from "tslib";
import { UrlPreviewProvider } from './urlPreviewProvider';
import { Pool } from './util/pool';
import { observableFromObservablePool } from './util/observableFromObservablePool';
var MediaUrlPreviewProvider = /** @class */ (function (_super) {
    tslib_1.__extends(MediaUrlPreviewProvider, _super);
    function MediaUrlPreviewProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MediaUrlPreviewProvider.fromMediaApi = function (config, url) {
        return UrlPreviewProvider.fromMediaApi(config, url);
    };
    MediaUrlPreviewProvider.fromPool = function (pool, config, url) {
        return {
            observable: function () {
                return observableFromObservablePool(pool, url, function () {
                    return MediaUrlPreviewProvider.fromMediaApi(config, url).observable();
                });
            },
        };
    };
    MediaUrlPreviewProvider.createPool = function () {
        return new Pool();
    };
    return MediaUrlPreviewProvider;
}(UrlPreviewProvider));
export { MediaUrlPreviewProvider };
//# sourceMappingURL=mediaUrlPreviewProvider.js.map