import { FileProvider, FILE_PROVIDER_RETRY_INTERVAL } from './fileProvider';
import { LinkProvider } from './linkProvider';
import { Pool } from './util/pool';
import { observableFromObservablePool } from './util/observableFromObservablePool';
var MediaItemProvider = /** @class */ (function () {
    function MediaItemProvider() {
    }
    MediaItemProvider.fromMediaApi = function (config, fileItemCache, mediaItemType, id, collection) {
        switch (mediaItemType) {
            case 'file':
                return FileProvider.fromMediaApi(config, fileItemCache, id, collection, FILE_PROVIDER_RETRY_INTERVAL);
            case 'link':
                return LinkProvider.fromMediaApi(config, id, collection);
            default:
                throw new Error('invalid media type ' + mediaItemType);
        }
    };
    MediaItemProvider.fromPool = function (pool, config, fileItemCache, mediaItemType, id, collection) {
        return {
            observable: function () {
                var poolId = [mediaItemType, id, collection].join('-');
                return observableFromObservablePool(pool, poolId, function () {
                    return MediaItemProvider.fromMediaApi(config, fileItemCache, mediaItemType, id, collection).observable();
                });
            },
        };
    };
    MediaItemProvider.createPool = function () {
        return new Pool();
    };
    return MediaItemProvider;
}());
export { MediaItemProvider };
//# sourceMappingURL=mediaItemProvider.js.map