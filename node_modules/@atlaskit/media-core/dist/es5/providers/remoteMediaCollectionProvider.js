"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("rxjs/Subject");
require("rxjs/add/operator/publishReplay");
var index_1 = require("../index");
var RemoteMediaCollectionProvider = /** @class */ (function () {
    function RemoteMediaCollectionProvider(collectionService, collectionName, pageSize, sortDirection) {
        var _this = this;
        this.collectionService = collectionService;
        this.collectionName = collectionName;
        this.pageSize = pageSize;
        this.sortDirection = sortDirection;
        this.subject = new Subject_1.Subject();
        this.connectableObservable = this.subject.publishReplay(1);
        this.items = [];
        this.nextInclusiveStartKey = undefined;
        this.isLoading = false;
        this.onAxiosError = function (error) {
            _this.isLoading = false;
            if (error.response && error.response.status === 404) {
                _this.subject.next(new index_1.CollectionNotFoundError());
            }
            else {
                _this.subject.next(error);
            }
        };
        this.connectableObservable.connect();
        this.loadNextPage();
    }
    RemoteMediaCollectionProvider.prototype.observable = function () {
        return this.connectableObservable;
    };
    RemoteMediaCollectionProvider.prototype.loadNextPage = function () {
        var _this = this;
        if (this.isLoading) {
            return;
        }
        else {
            this.isLoading = true;
        }
        this.collectionService
            .getCollectionItems(this.collectionName, this.pageSize, this.nextInclusiveStartKey, this.sortDirection, 'full')
            .then(function (response) {
            _this.isLoading = false;
            (_a = _this.items).push.apply(_a, response.items);
            var mediaCollection = {
                id: _this.collectionName,
                items: _this.items,
            };
            _this.nextInclusiveStartKey = response.nextInclusiveStartKey;
            _this.subject.next(mediaCollection);
            var _a;
        })
            .catch(this.onAxiosError);
    };
    RemoteMediaCollectionProvider.prototype.refresh = function () {
        var _this = this;
        if (this.isLoading) {
            return;
        }
        else {
            this.isLoading = true;
        }
        var oldFirstItemDetails = this.items[0] && this.items[0].details;
        var oldFirstItemId = oldFirstItemDetails && oldFirstItemDetails.id;
        var oldFirstItemOccurrenceKey = oldFirstItemDetails && oldFirstItemDetails.occurrenceKey;
        var newItems = [];
        var nextInclusiveStartKey;
        var fetchNewItems = function () {
            _this.collectionService
                .getCollectionItems(_this.collectionName, _this.pageSize, nextInclusiveStartKey, _this.sortDirection, 'full')
                .then(function (res) {
                var reachedFirstOldItem = false;
                for (var _i = 0, _a = res.items; _i < _a.length; _i++) {
                    var newItem = _a[_i];
                    var _b = newItem.details, id = _b.id, occurrenceKey = _b.occurrenceKey;
                    var reachedFirstItemAlreadyInCollection = id === oldFirstItemId &&
                        occurrenceKey === oldFirstItemOccurrenceKey;
                    if (reachedFirstItemAlreadyInCollection) {
                        reachedFirstOldItem = true;
                        break;
                    }
                    newItems.push(newItem);
                }
                if (reachedFirstOldItem) {
                    _this.isLoading = false;
                    _this.items = newItems.concat(_this.items);
                    _this.subject.next({
                        id: _this.collectionName,
                        items: _this.items,
                    });
                }
                else if (res.nextInclusiveStartKey) {
                    nextInclusiveStartKey = res.nextInclusiveStartKey;
                    fetchNewItems();
                }
            })
                .catch(_this.onAxiosError);
        };
        fetchNewItems();
    };
    return RemoteMediaCollectionProvider;
}());
exports.RemoteMediaCollectionProvider = RemoteMediaCollectionProvider;
//# sourceMappingURL=remoteMediaCollectionProvider.js.map