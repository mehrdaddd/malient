"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("rxjs/Observable");
require("rxjs/add/observable/of");
require("rxjs/add/operator/startWith");
var media_store_1 = require("@atlaskit/media-store");
var _1 = require("../providers/");
var remoteMediaCollectionProviderFactory_1 = require("../providers/remoteMediaCollectionProviderFactory");
var dataUriService_1 = require("../services/dataUriService");
var blobService_1 = require("../services/blobService");
var linkService_1 = require("../services/linkService");
var lru_fast_1 = require("lru-fast");
var collectionService_1 = require("../services/collectionService");
var DEFAULT_CACHE_SIZE = 200;
var ContextFactory = /** @class */ (function () {
    function ContextFactory() {
    }
    ContextFactory.create = function (config) {
        return new ContextImpl(config);
    };
    return ContextFactory;
}());
exports.ContextFactory = ContextFactory;
var ContextImpl = /** @class */ (function () {
    function ContextImpl(config) {
        this.config = config;
        this.collectionPool = remoteMediaCollectionProviderFactory_1.RemoteMediaCollectionProviderFactory.createPool();
        this.itemPool = _1.MediaItemProvider.createPool();
        this.urlPreviewPool = _1.MediaUrlPreviewProvider.createPool();
        this.fileItemCache = new lru_fast_1.LRUCache(config.cacheSize || DEFAULT_CACHE_SIZE);
        this.localPreviewCache = new lru_fast_1.LRUCache(10);
    }
    ContextImpl.prototype.getMediaItemProvider = function (id, mediaItemType, collectionName, mediaItem) {
        var isMediaItemLink = mediaItem && mediaItem.type === 'link';
        var isMediaItemFileAndNotPending = mediaItem &&
            mediaItem.type === 'file' &&
            mediaItem.details.processingStatus !== 'pending';
        if (mediaItem && (isMediaItemLink || isMediaItemFileAndNotPending)) {
            return {
                observable: function () {
                    return Observable_1.Observable.of(mediaItem);
                },
            };
        }
        var provider = _1.MediaItemProvider.fromPool(this.itemPool, this.apiConfig, this.fileItemCache, mediaItemType, id, collectionName);
        if (mediaItem) {
            return {
                observable: function () {
                    return provider.observable().startWith(mediaItem);
                },
            };
        }
        return provider;
    };
    ContextImpl.prototype.getMediaCollectionProvider = function (collectionName, pageSize) {
        if (pageSize === void 0) { pageSize = collectionService_1.DEFAULT_COLLECTION_PAGE_SIZE; }
        return remoteMediaCollectionProviderFactory_1.RemoteMediaCollectionProviderFactory.fromPool(this.collectionPool, this.apiConfig, collectionName, pageSize);
    };
    ContextImpl.prototype.getDataUriService = function (collectionName) {
        return new dataUriService_1.MediaDataUriService(this.config.authProvider, this.config.serviceHost, collectionName);
    };
    ContextImpl.prototype.setLocalPreview = function (id, preview) {
        this.localPreviewCache.set(id, preview);
    };
    ContextImpl.prototype.getLocalPreview = function (id) {
        return this.localPreviewCache.get(id);
    };
    ContextImpl.prototype.removeLocalPreview = function (id) {
        this.localPreviewCache.remove(id);
    };
    ContextImpl.prototype.getBlobService = function (collectionName) {
        return new blobService_1.MediaBlobService(this.config.authProvider, this.config.serviceHost, collectionName);
    };
    ContextImpl.prototype.getUrlPreviewProvider = function (url) {
        return _1.MediaUrlPreviewProvider.fromPool(this.urlPreviewPool, this.apiConfig, url);
    };
    ContextImpl.prototype.addLinkItem = function (url, collectionName, metadata) {
        var linkService = new linkService_1.MediaLinkService(this.apiConfig);
        return linkService.addLinkItem(url, collectionName, metadata);
    };
    ContextImpl.prototype.uploadFile = function (file, callbacks) {
        return media_store_1.uploadFile(file, this.apiConfig, callbacks);
    };
    ContextImpl.prototype.refreshCollection = function (collectionName, pageSize) {
        this.getMediaCollectionProvider(collectionName, pageSize).refresh();
    };
    Object.defineProperty(ContextImpl.prototype, "apiConfig", {
        get: function () {
            return {
                serviceHost: this.config.serviceHost,
                authProvider: this.config.authProvider,
            };
        },
        enumerable: true,
        configurable: true
    });
    return ContextImpl;
}());
//# sourceMappingURL=context.js.map