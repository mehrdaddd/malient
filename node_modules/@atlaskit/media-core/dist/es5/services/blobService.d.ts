import { AuthProvider } from '@atlaskit/media-store';
import { CreateRequestFunc, Response } from './util/createRequest';
import { MediaItem } from '../';
export declare type ImageResizeMode = 'crop' | 'fit' | 'full-fit';
export interface FetchImageOptions {
    width: number;
    height: number;
    mode?: ImageResizeMode;
    allowAnimated?: boolean;
}
export interface BlobService {
    fetchOriginalBlob(mediaItem: MediaItem): Promise<Blob>;
    fetchOriginalBlobCancelable(mediaItem: MediaItem): Response<Blob>;
    fetchImageBlob(mediaItem: MediaItem, options: FetchImageOptions): Promise<Blob>;
    fetchImageBlobCancelable(mediaItem: MediaItem, options: FetchImageOptions): Response<Blob>;
}
export declare class MediaBlobService implements BlobService {
    private readonly authProvider;
    private readonly serviceHost;
    private readonly collectionName;
    request: CreateRequestFunc;
    constructor(authProvider: AuthProvider, serviceHost: string, collectionName?: string | undefined);
    fetchOriginalBlob(mediaItem: MediaItem): Promise<Blob>;
    fetchOriginalBlobCancelable(mediaItem: MediaItem): Response<Blob>;
    fetchImageBlob(mediaItem: MediaItem, options: FetchImageOptions): Promise<Blob>;
    fetchImageBlobCancelable(mediaItem: MediaItem, {width, height, mode, allowAnimated}: FetchImageOptions): Response<Blob>;
    fetchSomeBlob(url: string, params: Object): Response<Blob>;
}
