"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var axios_1 = require("axios");
var media_store_1 = require("@atlaskit/media-store");
var utils_1 = require("../../utils");
var addAcceptHeader = function (headers) {
    return utils_1.checkWebpSupport().then(function (isWebpSupported) {
        // q=0.8 stands for 'quality factor' => http://stackoverflow.com/a/10496722
        if (isWebpSupported) {
            headers.accept = 'image/webp,image/*,*/*;q=0.8';
        }
        else {
            headers.accept = 'image/*,*/*;q=0.8';
        }
        return headers;
    });
};
var buildHeaders = function (auth, baseHeaders, preventPreflight, responseType) {
    var headers = tslib_1.__assign({}, baseHeaders, { 'Content-Type': 'application/json' });
    // We can add custom headers if we don't want to avoid preflight - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Request-Method
    if (!preventPreflight) {
        if (media_store_1.isAsapBasedAuth(auth)) {
            headers['X-Issuer'] = auth.asapIssuer;
        }
        else if (media_store_1.isClientBasedAuth(auth)) {
            headers['X-Client-Id'] = auth.clientId;
        }
        headers['Authorization'] = "Bearer " + auth.token;
    }
    if (responseType === 'image') {
        return addAcceptHeader(headers);
    }
    return Promise.resolve(headers);
};
var buildParams = function (auth, baseParams, preventPreflight, collection) {
    var authParams = {};
    if (preventPreflight) {
        authParams.token = auth.token;
        if (media_store_1.isClientBasedAuth(auth)) {
            authParams.client = auth.clientId;
        }
        else if (media_store_1.isAsapBasedAuth(auth)) {
            authParams.issuer = auth.asapIssuer;
        }
    }
    return Promise.resolve(tslib_1.__assign({ collection: collection }, baseParams, authParams));
};
var responseTypeToAxios = function (responseType) {
    responseType = responseType || 'json';
    var responseTypeMap = {
        image: 'blob',
        json: 'json',
    };
    return responseTypeMap[responseType];
};
exports.default = function (requesterOptions) {
    var preventPreflight = requesterOptions.preventPreflight, collectionName = requesterOptions.collectionName, _a = requesterOptions.config, authProvider = _a.authProvider, serviceHost = _a.serviceHost;
    return function (requestOptions) {
        var url = requestOptions.url, headers = requestOptions.headers, params = requestOptions.params, responseType = requestOptions.responseType, method = requestOptions.method, data = requestOptions.data;
        var acquireAuth = authProvider({ collectionName: collectionName });
        var createHeadersAndParams = function (auth) {
            return Promise.all([
                buildHeaders(auth, headers, preventPreflight, responseType),
                buildParams(auth, params, preventPreflight, collectionName),
            ]);
        };
        var source = axios_1.default.CancelToken.source();
        var sendAxiosRequest = function (_a) {
            var headers = _a[0], params = _a[1];
            return axios_1.default({
                method: method || 'get',
                url: url,
                baseURL: serviceHost,
                headers: headers,
                params: params,
                data: data,
                responseType: responseTypeToAxios(responseType),
                cancelToken: source.token,
            });
        };
        var response = acquireAuth
            .then(createHeadersAndParams)
            .then(sendAxiosRequest)
            .then(function (response) { return response.data; });
        var cancel = function (message) { return source.cancel(message); };
        return { response: response, cancel: cancel };
    };
};
//# sourceMappingURL=createRequest.js.map