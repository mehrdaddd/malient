import _Object$assign from 'babel-runtime/core-js/object/assign';
import _Object$keys from 'babel-runtime/core-js/object/keys';


var FLIPPED_POSITION = {
  top: 'bottom',
  right: 'left',
  bottom: 'top',
  left: 'right'
};

// Get viewport height excluding scrollbars


function getViewportHeight() {
  var docEl = document.documentElement;
  return docEl && docEl.clientHeight || window.innerHeight || 0;
}

// Get viewport width excluding scrollbars
function getViewportWidth() {
  var docEl = document.documentElement;
  return docEl && docEl.clientWidth || window.innerWidth || 0;
}

// Returns a top or left position that shifts the original coord to within viewport
function shiftCoord(coordName, coords, gutter) {
  var shiftedCoord = {};
  if (coordName === 'top' || coordName === 'left') {
    shiftedCoord[coordName] = 0 + gutter;
  }

  if (coordName === 'bottom') {
    var amountClipped = coords.bottom - getViewportHeight();
    var shiftedTop = coords.top - amountClipped - gutter;

    shiftedCoord.top = shiftedTop >= 0 ? shiftedTop : 0 + gutter;
  } else if (coordName === 'right') {
    var _amountClipped = coords.right - getViewportWidth();
    var shiftedLeft = coords.left - _amountClipped - gutter;

    shiftedCoord.left = shiftedLeft >= 0 ? shiftedLeft : 0 + gutter;
  }

  return shiftedCoord;
}

// Returns a map of positions to whether they fit in viewport
function getViewportBounds(_ref, gutter) {
  var top = _ref.top,
      right = _ref.right,
      bottom = _ref.bottom,
      left = _ref.left;

  return {
    top: top >= 0 + gutter,
    left: left >= 0 + gutter,
    bottom: bottom <= getViewportHeight() - gutter,
    right: right <= getViewportWidth() - gutter
  };
}

// Get the viewport bounds for each position coord
function getAllViewportBounds(allCoords, gutter) {
  var viewportBounds = {};
  _Object$keys(allCoords).forEach(function (position) {
    var coords = allCoords[position];

    viewportBounds[position] = getViewportBounds(coords, gutter);
  });

  return viewportBounds;
}

// Adjust the position and top/left coords to fit inside viewport
// Performs flipping on the primary axis and shifting on the secondary axis
function adjustPosition(originalPosition, positionCoords, gutter) {
  var flippedPosition = FLIPPED_POSITION[originalPosition];

  var viewportBounds = getAllViewportBounds(positionCoords, gutter);

  // Should flip if the original position was not within bounds and the new position is
  var shouldFlip = !viewportBounds[originalPosition][originalPosition] && viewportBounds[flippedPosition][originalPosition];

  var adjustedPosition = shouldFlip ? flippedPosition : originalPosition;

  // Check secondary axis, for positional shift
  var shiftedCoords = {};
  var secondaryPositions = _Object$keys(FLIPPED_POSITION).filter(function (position) {
    return position !== originalPosition && position !== flippedPosition;
  });

  secondaryPositions.forEach(function (position) {
    var inViewport = viewportBounds[adjustedPosition][position];
    if (!inViewport) {
      _Object$assign(shiftedCoords, shiftCoord(position, positionCoords[adjustedPosition], gutter));
    }
  });

  // adjust positions with flipped position on main axis + shifted position on secondary axis
  var left = shiftedCoords.left != null ? shiftedCoords.left : positionCoords[adjustedPosition].left;
  var top = shiftedCoords.top != null ? shiftedCoords.top : positionCoords[adjustedPosition].top;

  return { left: left, top: top, adjustedPosition: adjustedPosition };
}

function getCoords(_ref2) {
  var targetRect = _ref2.targetRect,
      tooltipRect = _ref2.tooltipRect,
      gutter = _ref2.gutter;

  return {
    top: {
      top: targetRect.top - (tooltipRect.height + gutter),
      right: targetRect.right - (targetRect.width - tooltipRect.width) / 2,
      bottom: targetRect.top - gutter,
      left: targetRect.left + (targetRect.width - tooltipRect.width) / 2
    },
    right: {
      top: targetRect.top + (targetRect.height - tooltipRect.height) / 2,
      right: targetRect.right + gutter + tooltipRect.width,
      bottom: targetRect.bottom - (targetRect.height - tooltipRect.height) / 2,
      left: targetRect.right + gutter
    },
    bottom: {
      top: targetRect.bottom + gutter,
      right: targetRect.right - (targetRect.width - tooltipRect.width) / 2,
      bottom: targetRect.bottom + gutter + tooltipRect.height,
      left: targetRect.left + (targetRect.width - tooltipRect.width) / 2
    },
    left: {
      top: targetRect.top + (targetRect.height - tooltipRect.height) / 2,
      right: targetRect.left - gutter,
      bottom: targetRect.bottom - (targetRect.height - tooltipRect.height) / 2,
      left: targetRect.left - (tooltipRect.width + gutter)
    }
  };
}

function getMouseCoords(_ref3) {
  var mouseCoordinates = _ref3.mouseCoordinates,
      tooltipRect = _ref3.tooltipRect,
      gutter = _ref3.gutter;

  var cursorPaddingRight = 8;
  var cursorPaddingBottom = 16;
  return {
    top: {
      top: mouseCoordinates.top - (tooltipRect.height + gutter),
      right: mouseCoordinates.left + tooltipRect.width / 2,
      bottom: mouseCoordinates.top - gutter,
      left: mouseCoordinates.left - tooltipRect.width / 2
    },
    right: {
      top: mouseCoordinates.top - tooltipRect.height / 2,
      right: mouseCoordinates.left + cursorPaddingRight + gutter + tooltipRect.width,
      bottom: mouseCoordinates.top + tooltipRect.height / 2,
      left: mouseCoordinates.left + cursorPaddingRight + gutter
    },
    bottom: {
      top: mouseCoordinates.top + cursorPaddingBottom + gutter,
      right: mouseCoordinates.left + tooltipRect.width / 2,
      bottom: mouseCoordinates.top + cursorPaddingBottom + gutter + tooltipRect.height,
      left: mouseCoordinates.left - tooltipRect.width / 2
    },
    left: {
      top: mouseCoordinates.top - tooltipRect.height / 2,
      right: mouseCoordinates.left - gutter,
      bottom: mouseCoordinates.top + tooltipRect.height / 2,
      left: mouseCoordinates.left - (tooltipRect.width + gutter)
    }
  };
}

function getMousePosition(_ref4) {
  var mousePosition = _ref4.mousePosition,
      tooltip = _ref4.tooltip,
      mouseCoordinates = _ref4.mouseCoordinates;

  var noPosition = {
    coordinates: { left: 0, top: 0 },
    position: 'mouse',
    mousePosition: 'bottom'
  };

  if (!mousePosition) throw new Error('Property "mousePosition" is required.');
  if (!tooltip) throw new Error('Property "tooltip" is required.');

  if (!mouseCoordinates) return noPosition;

  // get the original coordinates
  var gutter = 8;
  var tooltipRect = tooltip.getBoundingClientRect();

  var POSITIONS = getMouseCoords({ mouseCoordinates: mouseCoordinates, tooltipRect: tooltipRect, gutter: gutter });

  var _adjustPosition = adjustPosition(mousePosition, POSITIONS, gutter),
      left = _adjustPosition.left,
      top = _adjustPosition.top,
      adjustedPosition = _adjustPosition.adjustedPosition;

  return {
    coordinates: { left: left, top: top },
    position: 'mouse',
    mousePosition: adjustedPosition
  };
}

/**
 * Gets the coordinates and adjusted position of a tooltip.
 * Position will be flipped on the primary axis with respect to the initial position
 * if there is not enough space in the viewport.
 * Coordinates will be shifted along the secondary axis to render within viewport.
 */
export default function getPosition(_ref5) {
  var position = _ref5.position,
      target = _ref5.target,
      tooltip = _ref5.tooltip,
      mouseCoordinates = _ref5.mouseCoordinates,
      mousePosition = _ref5.mousePosition;

  if (position === 'mouse') {
    return getMousePosition({ mousePosition: mousePosition, tooltip: tooltip, mouseCoordinates: mouseCoordinates });
  }

  var noPosition = {
    coordinates: { left: 0, top: 0 },
    position: 'bottom',
    mousePosition: mousePosition
  };
  /* eslint-disable no-console */
  if (!position) console.error('Property "position" is required.');
  if (!target) console.error('Property "target" is required.');
  if (!tooltip) console.error('Property "tooltip" is required.');
  if (!position || !target || !tooltip) return noPosition;
  /* eslint-enable no-console */

  // get the original coordinates
  var gutter = 8;
  var targetRect = target.getBoundingClientRect();
  var tooltipRect = tooltip.getBoundingClientRect();

  var POSITIONS = getCoords({ targetRect: targetRect, tooltipRect: tooltipRect, gutter: gutter });

  var _adjustPosition2 = adjustPosition(position, POSITIONS, gutter),
      left = _adjustPosition2.left,
      top = _adjustPosition2.top,
      adjustedPosition = _adjustPosition2.adjustedPosition;

  return {
    coordinates: { left: left, top: top },
    position: adjustedPosition,
    mousePosition: mousePosition
  };
}