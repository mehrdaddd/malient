'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TooltipBase = exports.marshal = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDeprecate = require('react-deprecate');

var _reactDeprecate2 = _interopRequireDefault(_reactDeprecate);

var _styled = require('../styled');

var _Portal = require('./Portal');

var _Portal2 = _interopRequireDefault(_Portal);

var _Marshal = require('./Marshal');

var _Marshal2 = _interopRequireDefault(_Marshal);

var _Transition = require('./Transition');

var _Transition2 = _interopRequireDefault(_Transition);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// global tooltip marshal
// export for testing purposes
var marshal = exports.marshal = new _Marshal2.default();
/* eslint-disable react/require-default-props */

function getInitialState(props) {
  return {
    immediatelyHide: false,
    immediatelyShow: false,
    isVisible: false,
    isFlipped: false,
    position: props.position,
    mousePosition: props.mousePosition,
    coordinates: null
  };
}

/* eslint-disable react/sort-comp */

var Tooltip = function (_Component) {
  (0, _inherits3.default)(Tooltip, _Component);

  function Tooltip() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Tooltip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Tooltip.__proto__ || (0, _getPrototypeOf2.default)(Tooltip)).call.apply(_ref, [this].concat(args))), _this), _this.state = getInitialState(_this.props), _this.mouseCoordinates = null, _this.handleWrapperRef = function (ref) {
      _this.wrapper = ref;
    }, _this.handleMeasureRef = function (tooltip) {
      if (!tooltip || !_this.wrapper) return;

      var _this$props = _this.props,
          position = _this$props.position,
          mousePosition = _this$props.mousePosition;
      var _this2 = _this,
          mouseCoordinates = _this2.mouseCoordinates;

      var target = _this.wrapper.children.length ? _this.wrapper.children[0] : _this.wrapper;

      var positionData = (0, _utils.getPosition)({
        position: position,
        target: target,
        tooltip: tooltip,
        mouseCoordinates: mouseCoordinates,
        mousePosition: mousePosition
      });
      _this.setState(positionData);
    }, _this.show = function (_ref2) {
      var immediate = _ref2.immediate;

      _this.setState({
        immediatelyShow: immediate,
        isVisible: true,
        coordinates: null
      });
    }, _this.hide = function (_ref3) {
      var immediate = _ref3.immediate;

      // Update state twice to allow for the updated `immediate` prop to pass through
      // to the Transition component before the tooltip is removed
      _this.setState({ immediatelyHide: immediate }, function () {
        _this.setState({ isVisible: false, coordinates: null });
      });
    }, _this.handleMouseOver = function (event) {
      var onMouseOver = _this.props.onMouseOver;
      // bail if over the wrapper, we only want to target the first child.

      if (event.target === _this.wrapper) return;

      marshal.show(_this);

      if (onMouseOver) onMouseOver(event);
    }, _this.handleMouseOut = function (event) {
      var onMouseOut = _this.props.onMouseOut;

      // bail if over the wrapper, we only want to target the first child.

      if (event.target === _this.wrapper) return;

      marshal.hide(_this);

      if (onMouseOut) onMouseOut(event);
    }, _this.handleMouseMove = function (event) {
      _this.mouseCoordinates = {
        left: event.clientX,
        top: event.clientY
      };
    }, _this.handleClick = function () {
      var hideTooltipOnClick = _this.props.hideTooltipOnClick;


      if (hideTooltipOnClick) _this.hide({ immediate: true });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Tooltip, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var position = nextProps.position,
          truncate = nextProps.truncate,
          mousePosition = nextProps.mousePosition;

      // handle case where position is changed while visible

      if (position !== this.props.position || mousePosition !== this.props.mousePosition) {
        this.setState({ position: position, mousePosition: mousePosition, coordinates: null });
      }

      // handle case where truncate is changed while visible
      if (truncate !== this.props.truncate) {
        this.setState({ coordinates: null });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      marshal.unmount(this);
    }
  }, {
    key: 'renderTooltip',
    value: function renderTooltip() {
      var _props = this.props,
          content = _props.content,
          truncate = _props.truncate,
          component = _props.component;
      var _state = this.state,
          immediatelyHide = _state.immediatelyHide,
          immediatelyShow = _state.immediatelyShow,
          isVisible = _state.isVisible,
          mousePosition = _state.mousePosition,
          position = _state.position,
          coordinates = _state.coordinates;

      // bail immediately when not visible, or when there is no content

      if (!isVisible || !content) return null;

      // render node for measuring in alternate tree via portal
      if (!coordinates) {
        var MeasurableTooltip = component;
        return _react2.default.createElement(
          _Portal2.default,
          null,
          _react2.default.createElement(
            MeasurableTooltip,
            {
              innerRef: this.handleMeasureRef,
              style: { visibility: 'hidden' }
            },
            content
          )
        );
      }

      // render and animate tooltip when coordinates available
      var transitionProps = {
        component: component,
        immediatelyHide: immediatelyHide,
        immediatelyShow: immediatelyShow,
        mousePosition: mousePosition,
        position: position,
        coordinates: coordinates,
        truncate: truncate
      };

      return _react2.default.createElement(
        _Transition2.default,
        transitionProps,
        content
      );
    }
    // eslint-disable-next-line react/no-unused-prop-types


    // Update mouse coordinates, used when position is 'mouse'.
    // We are not debouncing/throttling this function because we aren't causing any
    // re-renders or performaing any intensive calculations, we're just updating a value.
    // React also doesn't play nice debounced DOM event handlers because they pool their
    // SyntheticEvent objects. Need to use event.persist as a workaround - https://stackoverflow.com/a/24679479/893630

  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          Tag = _props2.tag;


      return _react2.default.createElement(
        Tag,
        {
          onClick: this.handleClick,
          onMouseMove: this.handleMouseMove,
          onMouseOver: this.handleMouseOver,
          onMouseOut: this.handleMouseOut,
          ref: this.handleWrapperRef
        },
        _react.Children.only(children),
        this.renderTooltip()
      );
    }
  }]);
  return Tooltip;
}(_react.Component);

Tooltip.defaultProps = {
  component: _styled.Tooltip,
  delay: 300,
  mousePosition: 'bottom',
  position: 'bottom',
  tag: 'div'
};
exports.TooltipBase = Tooltip;
exports.default = (0, _reactDeprecate2.default)(Tooltip, {
  description: 'content'
});