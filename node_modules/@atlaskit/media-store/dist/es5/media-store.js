"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var request_1 = require("./utils/request");
var MediaStore = /** @class */ (function () {
    function MediaStore(config) {
        var _this = this;
        this.config = config;
        this.getFile = function (fileId, params) {
            if (params === void 0) { params = {}; }
            return _this.request("/file/" + fileId, {
                params: params,
                authContext: { collectionName: params.collection },
            }).then(request_1.mapResponseToJson);
        };
        this.getFileImageURL = function (id, params) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var auth;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.config.authProvider()];
                    case 1:
                        auth = _a.sent();
                        return [2 /*return*/, request_1.createUrl(this.config.serviceHost + "/file/" + id + "/image", {
                                params: params,
                                auth: auth,
                            })];
                }
            });
        }); };
    }
    MediaStore.prototype.createCollection = function (collectionName) {
        return this.request('/collection', {
            method: 'POST',
            body: JSON.stringify({ name: collectionName }),
            authContext: { collectionName: collectionName },
            headers: {
                'Content-Type': 'application/json',
                Accept: 'application/json',
            },
        }).then(request_1.mapResponseToJson);
    };
    MediaStore.prototype.getCollection = function (collectionName) {
        return this.request("/collection/" + collectionName, {
            authContext: { collectionName: collectionName },
            headers: {
                Accept: 'application/json',
            },
        }).then(request_1.mapResponseToJson);
    };
    MediaStore.prototype.getCollectionItems = function (collectionName, params) {
        return this.request("/collection/" + collectionName + "/items", {
            authContext: { collectionName: collectionName },
            params: params,
            headers: {
                Accept: 'application/json',
            },
        }).then(request_1.mapResponseToJson);
    };
    MediaStore.prototype.createUpload = function (createUpTo) {
        if (createUpTo === void 0) { createUpTo = 1; }
        return this.request("/upload", {
            method: 'POST',
            params: {
                createUpTo: createUpTo,
            },
            headers: {
                Accept: 'application/json',
            },
        }).then(request_1.mapResponseToJson);
    };
    MediaStore.prototype.uploadChunk = function (etag, blob) {
        return this.request("/chunk/" + etag, {
            method: 'PUT',
            body: blob,
        }).then(request_1.mapResponseToVoid);
    };
    MediaStore.prototype.probeChunks = function (chunks) {
        return this.request("/chunk/probe", {
            method: 'POST',
            body: JSON.stringify({
                chunks: chunks,
            }),
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
        }).then(request_1.mapResponseToJson);
    };
    MediaStore.prototype.createFileFromUpload = function (body, params) {
        if (params === void 0) { params = {}; }
        return this.request('/file/upload', {
            method: 'POST',
            authContext: { collectionName: params.collection },
            params: params,
            body: JSON.stringify(body),
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
        }).then(request_1.mapResponseToJson);
    };
    MediaStore.prototype.createFile = function (params) {
        if (params === void 0) { params = {}; }
        return this.request('/file', {
            method: 'POST',
            headers: {
                Accept: 'application/json',
            },
            params: params,
            authContext: { collectionName: params.collection },
        }).then(request_1.mapResponseToJson);
    };
    MediaStore.prototype.appendChunksToUpload = function (uploadId, body) {
        return this.request("/upload/" + uploadId + "/chunks", {
            method: 'PUT',
            body: JSON.stringify(body),
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
        }).then(request_1.mapResponseToVoid);
    };
    MediaStore.prototype.copyFileWithToken = function (body, params) {
        return this.request('/file/copy/withToken', {
            method: 'POST',
            authContext: { collectionName: params.collection },
            body: JSON.stringify(body),
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
            params: params,
        }).then(request_1.mapResponseToVoid);
    };
    MediaStore.prototype.request = function (path, options) {
        if (options === void 0) { options = {
            method: 'GET',
        }; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, serviceHost, authProvider, method, authContext, params, headers, body, auth;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.config, serviceHost = _a.serviceHost, authProvider = _a.authProvider;
                        method = options.method, authContext = options.authContext, params = options.params, headers = options.headers, body = options.body;
                        return [4 /*yield*/, authProvider(authContext)];
                    case 1:
                        auth = _b.sent();
                        return [2 /*return*/, request_1.request("" + serviceHost + path, {
                                method: method,
                                auth: auth,
                                params: params,
                                headers: headers,
                                body: body,
                            })];
                }
            });
        });
    };
    return MediaStore;
}());
exports.MediaStore = MediaStore;
//# sourceMappingURL=media-store.js.map