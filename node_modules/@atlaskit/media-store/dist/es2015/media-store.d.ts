import { MediaFile, MediaCollection, MediaCollectionItems, MediaUpload, MediaChunksProbe } from './models/media';
import { AsapBasedAuth, AuthContext, ClientAltBasedAuth, MediaApiConfig } from './models/auth';
import { RequestMethod, RequestParams, RequestHeaders } from './utils/request';
export declare class MediaStore {
    private readonly config;
    constructor(config: MediaApiConfig);
    createCollection(collectionName: string): Promise<MediaStoreResponse<MediaCollection>>;
    getCollection(collectionName: string): Promise<MediaStoreResponse<MediaCollection>>;
    getCollectionItems(collectionName: string, params: MediaStoreGetCollectionItemsPrams): Promise<MediaStoreResponse<MediaCollectionItems>>;
    createUpload(createUpTo?: number): Promise<MediaStoreResponse<MediaUpload[]>>;
    uploadChunk(etag: string, blob: Blob): Promise<void>;
    probeChunks(chunks: string[]): Promise<MediaStoreResponse<MediaChunksProbe>>;
    createFileFromUpload(body: MediaStoreCreateFileFromUploadBody, params?: MediaStoreCreateFileFromUploadParams): Promise<MediaStoreResponse<MediaFile>>;
    createFile(params?: MediaStoreCreateFileParams): Promise<MediaStoreResponse<EmptyFile>>;
    getFile: (fileId: string, params?: MediaStoreGetFileParams) => Promise<MediaStoreResponse<MediaFile>>;
    getFileImageURL: (id: string, params?: MediaStoreGetFileImageParams | undefined) => Promise<string>;
    appendChunksToUpload(uploadId: string, body: AppendChunksToUploadRequestBody): Promise<void>;
    copyFileWithToken(body: MediaStoreCopyFileWithTokenBody, params: MediaStoreCopyFileWithTokenParams): Promise<void>;
    request(path: string, options?: MediaStoreRequestOptions): Promise<Response>;
}
export interface MediaStoreResponse<Data> {
    readonly data: Data;
}
export declare type MediaStoreRequestOptions = {
    readonly method?: RequestMethod;
    readonly authContext?: AuthContext;
    readonly params?: RequestParams;
    readonly headers?: RequestHeaders;
    readonly body?: any;
};
export declare type MediaStoreCreateFileFromUploadParams = {
    readonly collection?: string;
    readonly occurrenceKey?: string;
    readonly expireAfter?: number;
    readonly replaceFileId?: string;
    readonly skipConversions?: boolean;
};
export declare type MediaStoreCreateFileParams = {
    readonly occurrenceKey?: string;
    readonly collection?: string;
};
export declare type MediaStoreCreateFileFromUploadConditions = {
    readonly hash: string;
    readonly size: number;
};
export declare type MediaStoreCreateFileFromUploadBody = {
    readonly uploadId: string;
    readonly name?: string;
    readonly mimeType?: string;
    readonly conditions?: MediaStoreCreateFileFromUploadConditions;
};
export declare type MediaStoreGetFileParams = {
    readonly version?: number;
    readonly collection?: string;
};
export declare type MediaStoreGetFileImageParams = {
    readonly version?: number;
    readonly collection?: string;
    readonly width?: number;
    readonly height?: number;
    readonly mode?: 'fit' | 'full-fit' | 'crop';
    readonly upscale?: boolean;
    readonly 'max-age': number;
    readonly allowAnimated: boolean;
};
export declare type MediaStoreGetCollectionItemsPrams = {
    readonly limit: number;
    readonly inclusiveStartKey?: string;
    readonly sortDirection?: 'asc' | 'desc';
    readonly details?: 'minimal' | 'full';
};
export declare type MediaStoreCopyFileWithTokenBody = {
    sourceFile: {
        id: string;
        owner: ClientAltBasedAuth | AsapBasedAuth;
        collection?: string;
        version?: number;
    };
};
export declare type MediaStoreCopyFileWithTokenParams = {
    readonly collection?: string;
};
export declare type AppendChunksToUploadRequestBody = {
    readonly chunks: string[];
    readonly hash?: string;
    readonly offset?: number;
};
export interface EmptyFile {
    readonly id: string;
    readonly createdAt: number;
}
