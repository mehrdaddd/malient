{"version":3,"file":"index.js","sources":["../src/schema.js","../src/from_markdown.js","../src/to_markdown.js","../src/index.js"],"sourcesContent":["import {Schema} from \"prosemirror-model\"\n\n// ::Schema Document schema for the data model used by CommonMark.\nexport const schema = new Schema({\n  nodes: {\n    doc: {\n      content: \"block+\"\n    },\n\n    paragraph: {\n      content: \"inline*\",\n      group: \"block\",\n      parseDOM: [{tag: \"p\"}],\n      toDOM() { return [\"p\", 0] }\n    },\n\n    blockquote: {\n      content: \"block+\",\n      group: \"block\",\n      parseDOM: [{tag: \"blockquote\"}],\n      toDOM() { return [\"blockquote\", 0] }\n    },\n\n    horizontal_rule: {\n      group: \"block\",\n      parseDOM: [{tag: \"hr\"}],\n      toDOM() { return [\"div\", [\"hr\"]] }\n    },\n\n    heading: {\n      attrs: {level: {default: 1}},\n      content: \"inline*\",\n      group: \"block\",\n      defining: true,\n      parseDOM: [{tag: \"h1\", attrs: {level: 1}},\n                 {tag: \"h2\", attrs: {level: 2}},\n                 {tag: \"h3\", attrs: {level: 3}},\n                 {tag: \"h4\", attrs: {level: 4}},\n                 {tag: \"h5\", attrs: {level: 5}},\n                 {tag: \"h6\", attrs: {level: 6}}],\n      toDOM(node) { return [\"h\" + node.attrs.level, 0] }\n    },\n\n    code_block: {\n      content: \"text*\",\n      group: \"block\",\n      code: true,\n      defining: true,\n      attrs: {params: {default: \"\"}},\n      parseDOM: [{tag: \"pre\", preserveWhitespace: true, getAttrs: node => ({params: node.getAttribute(\"data-params\")})}],\n      toDOM(node) { return [\"pre\", node.attrs.params ? {\"data-params\": node.attrs.params} : {}, [\"code\", 0]] }\n    },\n\n    ordered_list: {\n      content: \"list_item+\",\n      group: \"block\",\n      attrs: {order: {default: 1}, tight: {default: false}},\n      parseDOM: [{tag: \"ol\", getAttrs(dom) {\n        return {order: dom.hasAttribute(\"start\") ? +dom.getAttribute(\"start\") : 1,\n                tight: dom.hasAttribute(\"data-tight\")}\n      }}],\n      toDOM(node) {\n        return [\"ol\", {start: node.attrs.order == 1 ? null : node.attrs.order,\n                       \"data-tight\": node.attrs.tight ? \"true\" : null}, 0]\n      }\n    },\n\n    bullet_list: {\n      content: \"list_item+\",\n      group: \"block\",\n      attrs: {tight: {default: false}},\n      parseDOM: [{tag: \"ul\", getAttrs: dom => ({tight: dom.hasAttribute(\"data-tight\")})}],\n      toDOM(node) { return [\"ul\", {\"data-tight\": node.attrs.tight ? \"true\" : null}, 0] }\n    },\n\n    list_item: {\n      content: \"paragraph block*\",\n      defining: true,\n      parseDOM: [{tag: \"li\"}],\n      toDOM() { return [\"li\", 0] }\n    },\n\n    text: {\n      group: \"inline\",\n      toDOM(node) { return node.text }\n    },\n\n    image: {\n      inline: true,\n      attrs: {\n        src: {},\n        alt: {default: null},\n        title: {default: null}\n      },\n      group: \"inline\",\n      draggable: true,\n      parseDOM: [{tag: \"img[src]\", getAttrs(dom) {\n        return {\n          src: dom.getAttribute(\"src\"),\n          title: dom.getAttribute(\"title\"),\n          alt: dom.getAttribute(\"alt\")\n        }\n      }}],\n      toDOM(node) { return [\"img\", node.attrs] }\n    },\n\n    hard_break: {\n      inline: true,\n      group: \"inline\",\n      selectable: false,\n      parseDOM: [{tag: \"br\"}],\n      toDOM() { return [\"br\"] }\n    }\n  },\n\n  marks: {\n    em: {\n      parseDOM: [{tag: \"i\"}, {tag: \"em\"},\n                 {style: \"font-style\", getAttrs: value => value == \"italic\" && null}],\n      toDOM() { return [\"em\"] }\n    },\n\n    strong: {\n      parseDOM: [{tag: \"b\"}, {tag: \"strong\"},\n                 {style: \"font-weight\", getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null}],\n      toDOM() { return [\"strong\"] }\n    },\n\n    link: {\n      attrs: {\n        href: {},\n        title: {default: null}\n      },\n      inclusive: false,\n      parseDOM: [{tag: \"a[href]\", getAttrs(dom) {\n        return {href: dom.getAttribute(\"href\"), title: dom.getAttribute(\"title\")}\n      }}],\n      toDOM(node) { return [\"a\", node.attrs] }\n    },\n\n    code: {\n      parseDOM: [{tag: \"code\"}],\n      toDOM() { return [\"code\"] }\n    }\n  }\n})\n","import markdownit from \"markdown-it\"\nimport {schema} from \"./schema\"\nimport {Mark} from \"prosemirror-model\"\n\nfunction maybeMerge(a, b) {\n  if (a.isText && b.isText && Mark.sameSet(a.marks, b.marks))\n    return a.copy(a.text + b.text)\n}\n\n// Object used to track the context of a running parse.\nclass MarkdownParseState {\n  constructor(schema, tokenHandlers) {\n    this.schema = schema\n    this.stack = [{type: schema.topNodeType, content: []}]\n    this.marks = Mark.none\n    this.tokenHandlers = tokenHandlers\n  }\n\n  top() {\n    return this.stack[this.stack.length - 1]\n  }\n\n  push(elt) {\n    if (this.stack.length) this.top().content.push(elt)\n  }\n\n  // : (string)\n  // Adds the given text to the current position in the document,\n  // using the current marks as styling.\n  addText(text) {\n    if (!text) return\n    let nodes = this.top().content, last = nodes[nodes.length - 1]\n    let node = this.schema.text(text, this.marks), merged\n    if (last && (merged = maybeMerge(last, node))) nodes[nodes.length - 1] = merged\n    else nodes.push(node)\n  }\n\n  // : (Mark)\n  // Adds the given mark to the set of active marks.\n  openMark(mark) {\n    this.marks = mark.addToSet(this.marks)\n  }\n\n  // : (Mark)\n  // Removes the given mark from the set of active marks.\n  closeMark(mark) {\n    this.marks = mark.removeFromSet(this.marks)\n  }\n\n  parseTokens(toks) {\n    for (let i = 0; i < toks.length; i++) {\n      let tok = toks[i]\n      let handler = this.tokenHandlers[tok.type]\n      if (!handler)\n        throw new Error(\"Token type `\" + tok.type + \"` not supported by Markdown parser\")\n      handler(this, tok)\n    }\n  }\n\n  // : (NodeType, ?Object, ?[Node]) → ?Node\n  // Add a node at the current position.\n  addNode(type, attrs, content) {\n    let node = type.createAndFill(attrs, content, this.marks)\n    if (!node) return null\n    this.push(node)\n    return node\n  }\n\n  // : (NodeType, ?Object)\n  // Wrap subsequent content in a node of the given type.\n  openNode(type, attrs) {\n    this.stack.push({type: type, attrs: attrs, content: []})\n  }\n\n  // : () → ?Node\n  // Close and return the node that is currently on top of the stack.\n  closeNode() {\n    if (this.marks.length) this.marks = Mark.none\n    let info = this.stack.pop()\n    return this.addNode(info.type, info.attrs, info.content)\n  }\n}\n\nfunction attrs(spec, token) {\n  if (spec.getAttrs) return spec.getAttrs(token)\n  // For backwards compatibility when `attrs` is a Function\n  else if (spec.attrs instanceof Function) return spec.attrs(token)\n  else return spec.attrs\n}\n\n// Code content is represented as a single token with a `content`\n// property in Markdown-it.\nfunction noOpenClose(type) {\n  return type == \"code_inline\" || type == \"code_block\" || type == \"fence\"\n}\n\nfunction withoutTrailingNewline(str) {\n  return str[str.length - 1] == \"\\n\" ? str.slice(0, str.length - 1) : str\n}\n\nfunction noOp() {}\n\nfunction tokenHandlers(schema, tokens) {\n  let handlers = Object.create(null)\n  for (let type in tokens) {\n    let spec = tokens[type]\n    if (spec.block) {\n      let nodeType = schema.nodeType(spec.block)\n      if (noOpenClose(type)) {\n        handlers[type] = (state, tok) => {\n          state.openNode(nodeType, attrs(spec, tok))\n          state.addText(withoutTrailingNewline(tok.content))\n          state.closeNode()\n        }\n      } else {\n        handlers[type + \"_open\"] = (state, tok) => state.openNode(nodeType, attrs(spec, tok))\n        handlers[type + \"_close\"] = state => state.closeNode()\n      }\n    } else if (spec.node) {\n      let nodeType = schema.nodeType(spec.node)\n      handlers[type] = (state, tok) => state.addNode(nodeType, attrs(spec, tok))\n    } else if (spec.mark) {\n      let markType = schema.marks[spec.mark]\n      if (noOpenClose(type)) {\n        handlers[type] = (state, tok) => {\n          state.openMark(markType.create(attrs(spec, tok)))\n          state.addText(withoutTrailingNewline(tok.content))\n          state.closeMark(markType)\n        }\n      } else {\n        handlers[type + \"_open\"] = (state, tok) => state.openMark(markType.create(attrs(spec, tok)))\n        handlers[type + \"_close\"] = state => state.closeMark(markType)\n      }\n    } else if (spec.ignore) {\n      if (noOpenClose(type)) {\n        handlers[type] = noOp\n      } else {\n        handlers[type + '_open'] = noOp\n        handlers[type + '_close'] = noOp\n      }\n    } else {\n      throw new RangeError(\"Unrecognized parsing spec \" + JSON.stringify(spec))\n    }\n  }\n\n  handlers.text = (state, tok) => state.addText(tok.content)\n  handlers.inline = (state, tok) => state.parseTokens(tok.children)\n  handlers.softbreak = state => state.addText(\"\\n\")\n\n  return handlers\n}\n\n// ::- A configuration of a Markdown parser. Such a parser uses\n// [markdown-it](https://github.com/markdown-it/markdown-it) to\n// tokenize a file, and then runs the custom rules it is given over\n// the tokens to create a ProseMirror document tree.\nexport class MarkdownParser {\n  // :: (Schema, MarkdownIt, Object)\n  // Create a parser with the given configuration. You can configure\n  // the markdown-it parser to parse the dialect you want, and provide\n  // a description of the ProseMirror entities those tokens map to in\n  // the `tokens` object, which maps token names to descriptions of\n  // what to do with them. Such a description is an object, and may\n  // have the following properties:\n  //\n  // **`node`**`: ?string`\n  //   : This token maps to a single node, whose type can be looked up\n  //     in the schema under the given name. Exactly one of `node`,\n  //     `block`, or `mark` must be set.\n  //\n  // **`block`**`: ?string`\n  //   : This token comes in `_open` and `_close` variants (which are\n  //     appended to the base token name provides a the object\n  //     property), and wraps a block of content. The block should be\n  //     wrapped in a node of the type named to by the property's\n  //     value.\n  //\n  // **`mark`**`: ?string`\n  //   : This token also comes in `_open` and `_close` variants, but\n  //     should add a mark (named by the value) to its content, rather\n  //     than wrapping it in a node.\n  //\n  // **`attrs`**`: ?Object`\n  //   : Attributes for the node or mark. When `getAttrs` is provided,\n  //     it takes precedence.\n  //\n  // **`getAttrs`**`: ?(MarkdownToken) → Object`\n  //   : A function used to compute the attributes for the node or mark\n  //     that takes a [markdown-it\n  //     token](https://markdown-it.github.io/markdown-it/#Token) and\n  //     returns an attribute object.\n  //\n  // **`ignore`**`: ?bool`\n  //   : When true, ignore content for the matched token.\n  constructor(schema, tokenizer, tokens) {\n    // :: Object The value of the `tokens` object used to construct\n    // this parser. Can be useful to copy and modify to base other\n    // parsers on.\n    this.tokens = tokens\n    this.schema = schema\n    this.tokenizer = tokenizer\n    this.tokenHandlers = tokenHandlers(schema, tokens)\n  }\n\n  // :: (string) → Node\n  // Parse a string as [CommonMark](http://commonmark.org/) markup,\n  // and create a ProseMirror document as prescribed by this parser's\n  // rules.\n  parse(text) {\n    let state = new MarkdownParseState(this.schema, this.tokenHandlers), doc\n    state.parseTokens(this.tokenizer.parse(text, {}))\n    do { doc = state.closeNode() } while (state.stack.length)\n    return doc\n  }\n}\n\n// :: MarkdownParser\n// A parser parsing unextended [CommonMark](http://commonmark.org/),\n// without inline HTML, and producing a document in the basic schema.\nexport const defaultMarkdownParser = new MarkdownParser(schema, markdownit(\"commonmark\", {html: false}), {\n  blockquote: {block: \"blockquote\"},\n  paragraph: {block: \"paragraph\"},\n  list_item: {block: \"list_item\"},\n  bullet_list: {block: \"bullet_list\"},\n  ordered_list: {block: \"ordered_list\", getAttrs: tok => ({order: +tok.attrGet(\"order\") || 1})},\n  heading: {block: \"heading\", getAttrs: tok => ({level: +tok.tag.slice(1)})},\n  code_block: {block: \"code_block\"},\n  fence: {block: \"code_block\", getAttrs: tok => ({params: tok.info || \"\"})},\n  hr: {node: \"horizontal_rule\"},\n  image: {node: \"image\", getAttrs: tok => ({\n    src: tok.attrGet(\"src\"),\n    title: tok.attrGet(\"title\") || null,\n    alt: tok.children[0] && tok.children[0].content || null\n  })},\n  hardbreak: {node: \"hard_break\"},\n\n  em: {mark: \"em\"},\n  strong: {mark: \"strong\"},\n  link: {mark: \"link\", getAttrs: tok => ({\n    href: tok.attrGet(\"href\"),\n    title: tok.attrGet(\"title\") || null\n  })},\n  code_inline: {mark: \"code\"}\n})\n","// ::- A specification for serializing a ProseMirror document as\n// Markdown/CommonMark text.\nexport class MarkdownSerializer {\n  // :: (Object<(state: MarkdownSerializerState, node: Node, parent: Node, index: number)>, Object)\n\n  // Construct a serializer with the given configuration. The `nodes`\n  // object should map node names in a given schema to function that\n  // take a serializer state and such a node, and serialize the node.\n  //\n  // The `marks` object should hold objects with `open` and `close`\n  // properties, which hold the strings that should appear before and\n  // after a piece of text marked that way, either directly or as a\n  // function that takes a serializer state and a mark, and returns a\n  // string.\n  //\n  // Mark information objects can also have a `mixable` property\n  // which, when `true`, indicates that the order in which the mark's\n  // opening and closing syntax appears relative to other mixable\n  // marks can be varied. (For example, you can say `**a *b***` and\n  // `*a **b***`, but not `` `a *b*` ``.)\n  //\n  // The `expelEnclosingWhitespace` mark property causes the\n  // serializer to move enclosing whitespace from inside the marks to\n  // outside the marks. This is necessary for emphasis marks as\n  // CommonMark does not permit enclosing whitespace inside emphasis\n  // marks, see: http://spec.commonmark.org/0.26/#example-330\n  constructor(nodes, marks) {\n    // :: Object<(MarkdownSerializerState, Node)> The node serializer\n    // functions for this serializer.\n    this.nodes = nodes\n    // :: Object The mark serializer info.\n    this.marks = marks\n  }\n\n  // :: (Node, ?Object) → string\n  // Serialize the content of the given node to\n  // [CommonMark](http://commonmark.org/).\n  serialize(content, options) {\n    let state = new MarkdownSerializerState(this.nodes, this.marks, options)\n    state.renderContent(content)\n    return state.out\n  }\n}\n\n// :: MarkdownSerializer\n// A serializer for the [basic schema](#schema).\nexport const defaultMarkdownSerializer = new MarkdownSerializer({\n  blockquote(state, node) {\n    state.wrapBlock(\"> \", null, node, () => state.renderContent(node))\n  },\n  code_block(state, node) {\n    state.write(\"```\" + node.attrs.params + \"\\n\")\n    state.text(node.textContent, false)\n    state.ensureNewLine()\n    state.write(\"```\")\n    state.closeBlock(node)\n  },\n  heading(state, node) {\n    state.write(state.repeat(\"#\", node.attrs.level) + \" \")\n    state.renderInline(node)\n    state.closeBlock(node)\n  },\n  horizontal_rule(state, node) {\n    state.write(node.attrs.markup || \"---\")\n    state.closeBlock(node)\n  },\n  bullet_list(state, node) {\n    state.renderList(node, \"  \", () => (node.attrs.bullet || \"*\") + \" \")\n  },\n  ordered_list(state, node) {\n    let start = node.attrs.order || 1\n    let maxW = String(start + node.childCount - 1).length\n    let space = state.repeat(\" \", maxW + 2)\n    state.renderList(node, space, i => {\n      let nStr = String(start + i)\n      return state.repeat(\" \", maxW - nStr.length) + nStr + \". \"\n    })\n  },\n  list_item(state, node) {\n    state.renderContent(node)\n  },\n  paragraph(state, node) {\n    state.renderInline(node)\n    state.closeBlock(node)\n  },\n\n  image(state, node) {\n    state.write(\"![\" + state.esc(node.attrs.alt || \"\") + \"](\" + state.esc(node.attrs.src) +\n                (node.attrs.title ? \" \" + state.quote(node.attrs.title) : \"\") + \")\")\n  },\n  hard_break(state, node, parent, index) {\n    for (let i = index + 1; i < parent.childCount; i++)\n      if (parent.child(i).type != node.type) {\n        state.write(\"\\\\\\n\")\n        return\n      }\n  },\n  text(state, node) {\n    state.text(node.text)\n  }\n}, {\n  em: {open: \"*\", close: \"*\", mixable: true, expelEnclosingWhitespace: true},\n  strong: {open: \"**\", close: \"**\", mixable: true, expelEnclosingWhitespace: true},\n  link: {\n    open: \"[\",\n    close(state, mark) {\n      return \"](\" + state.esc(mark.attrs.href) + (mark.attrs.title ? \" \" + state.quote(mark.attrs.title) : \"\") + \")\"\n    }\n  },\n  code: {open: \"`\", close: \"`\"}\n})\n\n// ::- This is an object used to track state and expose\n// methods related to markdown serialization. Instances are passed to\n// node and mark serialization methods (see `toMarkdown`).\nexport class MarkdownSerializerState {\n  constructor(nodes, marks, options) {\n    this.nodes = nodes\n    this.marks = marks\n    this.delim = this.out = \"\"\n    this.closed = false\n    this.inTightList = false\n    // :: Object\n    // The options passed to the serializer.\n    //   tightLists:: ?bool\n    //   Whether to render lists in a tight style. This can be overridden\n    //   on a node level by specifying a tight attribute on the node.\n    //   Defaults to false.\n    this.options = options || {}\n    if (typeof this.options.tightLists == \"undefined\")\n      this.options.tightLists = false\n  }\n\n  flushClose(size) {\n    if (this.closed) {\n      if (!this.atBlank()) this.out += \"\\n\"\n      if (size == null) size = 2\n      if (size > 1) {\n        let delimMin = this.delim\n        let trim = /\\s+$/.exec(delimMin)\n        if (trim) delimMin = delimMin.slice(0, delimMin.length - trim[0].length)\n        for (let i = 1; i < size; i++)\n          this.out += delimMin + \"\\n\"\n      }\n      this.closed = false\n    }\n  }\n\n  // :: (string, ?string, Node, ())\n  // Render a block, prefixing each line with `delim`, and the first\n  // line in `firstDelim`. `node` should be the node that is closed at\n  // the end of the block, and `f` is a function that renders the\n  // content of the block.\n  wrapBlock(delim, firstDelim, node, f) {\n    let old = this.delim\n    this.write(firstDelim || delim)\n    this.delim += delim\n    f()\n    this.delim = old\n    this.closeBlock(node)\n  }\n\n  atBlank() {\n    return /(^|\\n)$/.test(this.out)\n  }\n\n  // :: ()\n  // Ensure the current content ends with a newline.\n  ensureNewLine() {\n    if (!this.atBlank()) this.out += \"\\n\"\n  }\n\n  // :: (?string)\n  // Prepare the state for writing output (closing closed paragraphs,\n  // adding delimiters, and so on), and then optionally add content\n  // (unescaped) to the output.\n  write(content) {\n    this.flushClose()\n    if (this.delim && this.atBlank())\n      this.out += this.delim\n    if (content) this.out += content\n  }\n\n  // :: (Node)\n  // Close the block for the given node.\n  closeBlock(node) {\n    this.closed = node\n  }\n\n  // :: (string, ?bool)\n  // Add the given text to the document. When escape is not `false`,\n  // it will be escaped.\n  text(text, escape) {\n    let lines = text.split(\"\\n\")\n    for (let i = 0; i < lines.length; i++) {\n      var startOfLine = this.atBlank() || this.closed\n      this.write()\n      this.out += escape !== false ? this.esc(lines[i], startOfLine) : lines[i]\n      if (i != lines.length - 1) this.out += \"\\n\"\n    }\n  }\n\n  // :: (Node)\n  // Render the given node as a block.\n  render(node, parent, index) {\n    if (typeof parent == \"number\") throw new Error(\"!\")\n    this.nodes[node.type.name](this, node, parent, index)\n  }\n\n  // :: (Node)\n  // Render the contents of `parent` as block nodes.\n  renderContent(parent) {\n    parent.forEach((node, _, i) => this.render(node, parent, i))\n  }\n\n  // :: (Node)\n  // Render the contents of `parent` as inline content.\n  renderInline(parent) {\n    let active = [], trailing = \"\"\n    let progress = (node, _, index) => {\n      let marks = node ? node.marks : []\n\n      let leading = trailing\n      trailing = \"\"\n      // If whitespace has to be expelled from the node, adjust\n      // leading and trailing accordingly.\n      if (node && node.isText && marks.some(mark => {\n        let info = this.marks[mark.type.name]\n        return info && info.expelEnclosingWhitespace\n      })) {\n        let [_, lead, inner, trail] = /^(\\s*)(.*?)(\\s*)$/m.exec(node.text)\n        leading += lead\n        trailing = trail\n        if (lead || trail) {\n          node = inner ? node.withText(inner) : null\n          if (!node) marks = active\n        }\n      }\n\n      let code = marks.length && marks[marks.length - 1].type.isCode && marks[marks.length - 1]\n      let len = marks.length - (code ? 1 : 0)\n\n      // Try to reorder 'mixable' marks, such as em and strong, which\n      // in Markdown may be opened and closed in different order, so\n      // that order of the marks for the token matches the order in\n      // active.\n      outer: for (let i = 0; i < len; i++) {\n        let mark = marks[i]\n        if (!this.marks[mark.type.name].mixable) break\n        for (let j = 0; j < active.length; j++) {\n          let other = active[j]\n          if (!this.marks[other.type.name].mixable) break\n          if (mark.eq(other)) {\n            if (i > j)\n              marks = marks.slice(0, j).concat(mark).concat(marks.slice(j, i)).concat(marks.slice(i + 1, len))\n            else if (j > i)\n              marks = marks.slice(0, i).concat(marks.slice(i + 1, j)).concat(mark).concat(marks.slice(j, len))\n            continue outer\n          }\n        }\n      }\n\n      // Find the prefix of the mark set that didn't change\n      let keep = 0\n      while (keep < Math.min(active.length, len) && marks[keep].eq(active[keep])) ++keep\n\n      // Close the marks that need to be closed\n      while (keep < active.length)\n        this.text(this.markString(active.pop(), false), false)\n\n      // Output any previously expelled trailing whitespace outside the marks\n      if (leading) this.text(leading)\n\n      // Open the marks that need to be opened\n      if (node) {\n        while (active.length < len) {\n          let add = marks[active.length]\n          active.push(add)\n          this.text(this.markString(add, true), false)\n        }\n\n        // Render the node. Special case code marks, since their content\n        // may not be escaped.\n        if (code && node.isText)\n          this.text(this.markString(code, false) + node.text + this.markString(code, true), false)\n        else\n          this.render(node, parent, index)\n      }\n    }\n    parent.forEach(progress)\n    progress(null)\n  }\n\n  // :: (Node, string, (number) → string)\n  // Render a node's content as a list. `delim` should be the extra\n  // indentation added to all lines except the first in an item,\n  // `firstDelim` is a function going from an item index to a\n  // delimiter for the first line of the item.\n  renderList(node, delim, firstDelim) {\n    if (this.closed && this.closed.type == node.type)\n      this.flushClose(3)\n    else if (this.inTightList)\n      this.flushClose(1)\n\n    let isTight = typeof node.attrs.tight != \"undefined\" ? node.attrs.tight : this.options.tightLists\n    let prevTight = this.inTightList\n    this.inTightList = isTight\n    node.forEach((child, _, i) => {\n      if (i && isTight) this.flushClose(1)\n      this.wrapBlock(delim, firstDelim(i), node, () => this.render(child, node, i))\n    })\n    this.inTightList = prevTight\n  }\n\n  // :: (string, ?bool) → string\n  // Escape the given string so that it can safely appear in Markdown\n  // content. If `startOfLine` is true, also escape characters that\n  // has special meaning only at the start of the line.\n  esc(str, startOfLine) {\n    str = str.replace(/[`*\\\\~\\[\\]]/g, \"\\\\$&\")\n    if (startOfLine) str = str.replace(/^[:#-*+]/, \"\\\\$&\").replace(/^(\\d+)\\./, \"$1\\\\.\")\n    return str\n  }\n\n  quote(str) {\n    var wrap = str.indexOf('\"') == -1 ? '\"\"' : str.indexOf(\"'\") == -1 ? \"''\" : \"()\"\n    return wrap[0] + str + wrap[1]\n  }\n\n  // :: (string, number) → string\n  // Repeat the given string `n` times.\n  repeat(str, n) {\n    let out = \"\"\n    for (let i = 0; i < n; i++) out += str\n    return out\n  }\n\n  // : (Mark, bool) → string\n  // Get the markdown string for a given opening or closing mark.\n  markString(mark, open) {\n    let info = this.marks[mark.type.name]\n    let value = open ? info.open : info.close\n    return typeof value == \"string\" ? value : value(this, mark)\n  }\n\n  // :: (string) → { leading: ?string, trailing: ?string }\n  // Get leading and trailing whitespace from a string. Values of\n  // leading or trailing property of the return object will be undefined\n  // if there is no match.\n  getEnclosingWhitespace(text) {\n    return {\n      leading: (text.match(/^(\\s+)/) || [])[0],\n      trailing: (text.match(/(\\s+)$/) || [])[0]\n    }\n  }\n\n}\n","// Defines a parser and serializer for [CommonMark](http://commonmark.org/) text.\n\nexport {schema} from \"./schema\"\nexport {defaultMarkdownParser, MarkdownParser} from \"./from_markdown\"\nexport {MarkdownSerializer, defaultMarkdownSerializer, MarkdownSerializerState} from \"./to_markdown\"\n"],"names":["const","Schema","Mark","schema","let","this","nodeType","text"],"mappings":"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"}