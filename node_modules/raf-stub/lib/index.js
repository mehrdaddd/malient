'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createStub;
exports.replaceRaf = replaceRaf;

var _performanceNow = require('performance-now');

var _performanceNow2 = _interopRequireDefault(_performanceNow);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createStub() {
  var frameDuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.defaultFrameDuration;
  var startTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _performanceNow2.default)();

  var frames = [];
  var frameId = 0;
  var currentTime = startTime;

  var add = function add(cb) {
    var id = ++frameId;

    var callback = function callback(time) {
      cb(time);

      remove(id);
    };

    frames.push({
      id: id,
      callback: callback
    });

    return id;
  };

  var remove = function remove(id) {
    var index = frames.findIndex(function (frame) {
      return frame.id === id;
    });

    if (index === -1) {
      return;
    }

    frames.splice(index, 1);
  };

  var flush = function flush() {
    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : frameDuration;

    while (frames.length) {
      step(1, duration);
    }
  };

  var reset = function reset() {
    frames.length = 0;
    currentTime = startTime;
  };

  var step = function step() {
    var steps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : frameDuration;

    if (steps === 0) {
      return;
    }

    currentTime = currentTime + duration;

    var shallow = frames.slice(0);
    shallow.forEach(function (frame) {
      frame.callback(currentTime);
    });

    return step(steps - 1, duration);
  };

  var api = {
    add: add,
    remove: remove,
    reset: reset,
    flush: flush,
    step: step
  };

  return api;
}

function replaceRaf() {
  var roots = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$frameDuration = _ref.frameDuration,
      frameDuration = _ref$frameDuration === undefined ? _constants.defaultFrameDuration : _ref$frameDuration,
      _ref$startTime = _ref.startTime,
      startTime = _ref$startTime === undefined ? (0, _performanceNow2.default)() : _ref$startTime;

  if (!roots.length) {
    roots.push(typeof window !== 'undefined' ? window : global);
  }

  var stub = createStub(frameDuration, startTime);

  roots.forEach(function (root) {
    root.requestAnimationFrame = stub.add;
    Object.assign(root.requestAnimationFrame, {
      step: stub.step,
      flush: stub.flush,
      reset: stub.reset
    });

    root.cancelAnimationFrame = stub.remove;
  });
}